{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#_moduleargs","title":"_module.args","text":"<p>Additional arguments passed to each module in addition to ones like <code>lib</code>, <code>config</code>, and <code>pkgs</code>, <code>modulesPath</code>.</p> <p>This option is also available to all submodules. Submodules do not inherit args from their parent module, nor do they provide args to their parent module or sibling submodules. The sole exception to this is the argument <code>name</code> which is provided by parent modules to a submodule and contains the attribute name the submodule is bound to, or a unique generated name if it is not bound to an attribute.</p> <p>Some arguments are already passed by default, of which the following cannot be changed with this option:</p> <ul> <li> <p><code>lib</code>: The nixpkgs library.</p> </li> <li> <p><code>config</code>: The results of all options after merging the values from all modules together.</p> </li> <li> <p><code>options</code>: The options declared in all modules.</p> </li> <li> <p><code>specialArgs</code>: The <code>specialArgs</code> argument passed to <code>evalModules</code>.</p> </li> <li> <p>All attributes of <code>specialArgs</code></p> </li> </ul> <p>Whereas option values can generally depend on other option values    thanks to laziness, this does not apply to <code>imports</code>, which    must be computed statically before anything else.</p> <p>For this reason, callers of the module system can provide <code>specialArgs</code>    which are available during import resolution.</p> <p>For NixOS, <code>specialArgs</code> includes    <code>modulesPath</code>, which allows you to import    extra modules from the nixpkgs package tree without having to    somehow make the module aware of the location of the    <code>nixpkgs</code> or NixOS directories.</p> <p><code>{ modulesPath, ... }: {      imports = [        (modulesPath + \"/profiles/minimal.nix\")      ];    }</code></p> <p>For NixOS, the default value for this option includes at least this argument:</p> <ul> <li><code>pkgs</code>: The nixpkgs package set according to    the <code>nixpkgs.pkgs</code> option.</li> </ul> <p>Type: lazy attribute set of raw value</p> <p>Declared by:  - \\"},{"location":"#cudapackagespackagesets","title":"cudaPackagesPackageSets","text":"<p>CUDA Package Sets</p> <p>Type: submodule</p> <p>Default:</p> <pre><code>{\n  cudaPackages_10_0 = {\n    cudaVersion = \"10.0\";\n  };\n  cudaPackages_10_1 = {\n    cudaVersion = \"10.1\";\n  };\n  cudaPackages_10_2 = {\n    cudaVersion = \"10.2\";\n  };\n  cudaPackages_11_0 = {\n    cudaVersion = \"11.0\";\n  };\n  cudaPackages_11_1 = {\n    cudaVersion = \"11.1\";\n  };\n  cudaPackages_11_2 = {\n    cudaVersion = \"11.2\";\n  };\n  cudaPackages_11_3 = {\n    cudaVersion = \"11.3\";\n  };\n  cudaPackages_11_4 = {\n    cudaVersion = \"11.4\";\n  };\n  cudaPackages_11_5 = {\n    cudaVersion = \"11.5\";\n  };\n  cudaPackages_11_6 = {\n    cudaVersion = \"11.6\";\n  };\n  cudaPackages_11_7 = {\n    cudaVersion = \"11.7\";\n  };\n  cudaPackages_11_8 = {\n    cudaVersion = \"11.8\";\n  };\n  cudaPackages_12_0 = {\n    cudaVersion = \"12.0\";\n  };\n  cudaPackages_12_1 = {\n    cudaVersion = \"12.1\";\n  };\n  cudaPackages_12_2 = {\n    cudaVersion = \"12.2\";\n  };\n  cudaPackages_12_3 = {\n    cudaVersion = \"12.3\";\n  };\n}\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules</p>"},{"location":"#cudapackagespackagesetscudapackages_10_0","title":"cudaPackagesPackageSets.cudaPackages_10_0","text":"<p>A CUDA package set for a particular version of CUDA</p> <p>Type: submodule</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules</p>"},{"location":"#cudapackagespackagesetscudapackages_10_0cudaatleast","title":"cudaPackagesPackageSets.cudaPackages_10_0.cudaAtLeast","text":"<p>A utility to check if the CUDA version is at least a given version</p> <p>Type: function that evaluates to a(n) boolean</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_0cudaatmost","title":"cudaPackagesPackageSets.cudaPackages_10_0.cudaAtMost","text":"<p>A utility to check if the CUDA version is at most a given version</p> <p>Type: function that evaluates to a(n) boolean</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_0cudaflagsdataarchnames","title":"cudaPackagesPackageSets.cudaPackages_10_0.cudaFlags.data.archNames","text":"<p>The names of the architectures to build for</p> <p>Type: list of string</p> <p>Default: <code>[ ]</code></p> <p>Example:</p> <pre><code>[\n  \"Turing\"\n  \"Ampere\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_0cudaflagsdataarches","title":"cudaPackagesPackageSets.cudaPackages_10_0.cudaFlags.data.arches","text":"<p>The architectures to build for. Includes a virtual architecture if forward compatibility is enabled.</p> <p>Type: list of (A real/physical CUDA architecture name. or A virtual CUDA architecture name.)</p> <p>Default:</p> <pre><code>[\n  \"sm_89\"\n]\n</code></pre> <p>Example:</p> <pre><code>[\n  \"sm_75\"\n  \"sm_86\"\n  \"compute_86\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_0cudaflagsdatacudacapabilities","title":"cudaPackagesPackageSets.cudaPackages_10_0.cudaFlags.data.cudaCapabilities","text":"<p>CUDA capabilities (hardware generations) to build for</p> <p>Type: list of A CUDA capability version.</p> <p>Default:</p> <pre><code>[\n  \"8.9\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_0cudaflagsdatacudaforwardcompat","title":"cudaPackagesPackageSets.cudaPackages_10_0.cudaFlags.data.cudaForwardCompat","text":"<p>Build with forward compatibility gencode (+PTX) to support future GPU generations</p> <p>Type: boolean</p> <p>Default: <code>false</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_0cudaflagsdatacudagpus","title":"cudaPackagesPackageSets.cudaPackages_10_0.cudaFlags.data.cudaGpus","text":"<p>CUDA GPUs to build for</p> <p>Type: list of (submodule)</p> <p>Default: <code>[ ]</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_0cudaflagsdatacudagpusarchname","title":"cudaPackagesPackageSets.cudaPackages_10_0.cudaFlags.data.cudaGpus.*.archName","text":"<p>Name of the microarchitecture</p> <p>Type: A CUDA architecture name, like Ampere or Ada.</p> <p>Example: <code>\"Kepler\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_0cudaflagsdatacudagpuscomputecapability","title":"cudaPackagesPackageSets.cudaPackages_10_0.cudaFlags.data.cudaGpus.*.computeCapability","text":"<p>Compute capability of the GPU</p> <p>Type: A CUDA capability version.</p> <p>Example: <code>\"3.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_0cudaflagsdatacudagpusdontdefaultafter","title":"cudaPackagesPackageSets.cudaPackages_10_0.cudaFlags.data.cudaGpus.*.dontDefaultAfter","text":"<p>The CUDA version after which to exclude this GPU from the list of default capabilities we build. null means we always include this GPU in the default capabilities if it is supported.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_0cudaflagsdatacudagpusisjetson","title":"cudaPackagesPackageSets.cudaPackages_10_0.cudaFlags.data.cudaGpus.*.isJetson","text":"<p>Whether a GPU is part of NVIDIA\u2019s line of Jetson embedded computers.</p> <p>This field is notable because it tells us what architecture to build for (as Jetson devices are aarch64). More on Jetson devices here: https://www.nvidia.com/en-us/autonomous-machines/embedded-systems/</p> <p>NOTE: These architectures are only built upon request.</p> <p>Type: one of true, false</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_0cudaflagsdatacudagpusmaxcudaversion","title":"cudaPackagesPackageSets.cudaPackages_10_0.cudaFlags.data.cudaGpus.*.maxCudaVersion","text":"<p>The maximum (exclusive) CUDA version that supports this GPU. null means there is no maximum.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_0cudaflagsdatacudagpusmincudaversion","title":"cudaPackagesPackageSets.cudaPackages_10_0.cudaFlags.data.cudaGpus.*.minCudaVersion","text":"<p>The minimum (inclusive) CUDA version that supports this GPU.</p> <p>Type: A version number with a major and minor component.</p> <p>Example: <code>\"10.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_0cudaflagsdatacudajetsongpus","title":"cudaPackagesPackageSets.cudaPackages_10_0.cudaFlags.data.cudaJetsonGpus","text":"<p>CUDA GPUs to build for, including only Jetson devices</p> <p>Type: list of (submodule)</p> <p>Default: <code>[ ]</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_0cudaflagsdatacudajetsongpusarchname","title":"cudaPackagesPackageSets.cudaPackages_10_0.cudaFlags.data.cudaJetsonGpus.*.archName","text":"<p>Name of the microarchitecture</p> <p>Type: A CUDA architecture name, like Ampere or Ada.</p> <p>Example: <code>\"Kepler\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_0cudaflagsdatacudajetsongpuscomputecapability","title":"cudaPackagesPackageSets.cudaPackages_10_0.cudaFlags.data.cudaJetsonGpus.*.computeCapability","text":"<p>Compute capability of the GPU</p> <p>Type: A CUDA capability version.</p> <p>Example: <code>\"3.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_0cudaflagsdatacudajetsongpusdontdefaultafter","title":"cudaPackagesPackageSets.cudaPackages_10_0.cudaFlags.data.cudaJetsonGpus.*.dontDefaultAfter","text":"<p>The CUDA version after which to exclude this GPU from the list of default capabilities we build. null means we always include this GPU in the default capabilities if it is supported.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_0cudaflagsdatacudajetsongpusisjetson","title":"cudaPackagesPackageSets.cudaPackages_10_0.cudaFlags.data.cudaJetsonGpus.*.isJetson","text":"<p>Whether a GPU is part of NVIDIA\u2019s line of Jetson embedded computers.</p> <p>This field is notable because it tells us what architecture to build for (as Jetson devices are aarch64). More on Jetson devices here: https://www.nvidia.com/en-us/autonomous-machines/embedded-systems/</p> <p>NOTE: These architectures are only built upon request.</p> <p>Type: one of true, false</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_0cudaflagsdatacudajetsongpusmaxcudaversion","title":"cudaPackagesPackageSets.cudaPackages_10_0.cudaFlags.data.cudaJetsonGpus.*.maxCudaVersion","text":"<p>The maximum (exclusive) CUDA version that supports this GPU. null means there is no maximum.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_0cudaflagsdatacudajetsongpusmincudaversion","title":"cudaPackagesPackageSets.cudaPackages_10_0.cudaFlags.data.cudaJetsonGpus.*.minCudaVersion","text":"<p>The minimum (inclusive) CUDA version that supports this GPU.</p> <p>Type: A version number with a major and minor component.</p> <p>Example: <code>\"10.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_0cudaflagsdatacudanonjetsongpus","title":"cudaPackagesPackageSets.cudaPackages_10_0.cudaFlags.data.cudaNonJetsonGpus","text":"<p>CUDA GPUs to build for, excluding Jetson devices</p> <p>Type: list of (submodule)</p> <p>Default: <code>[ ]</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_0cudaflagsdatacudanonjetsongpusarchname","title":"cudaPackagesPackageSets.cudaPackages_10_0.cudaFlags.data.cudaNonJetsonGpus.*.archName","text":"<p>Name of the microarchitecture</p> <p>Type: A CUDA architecture name, like Ampere or Ada.</p> <p>Example: <code>\"Kepler\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_0cudaflagsdatacudanonjetsongpuscomputecapability","title":"cudaPackagesPackageSets.cudaPackages_10_0.cudaFlags.data.cudaNonJetsonGpus.*.computeCapability","text":"<p>Compute capability of the GPU</p> <p>Type: A CUDA capability version.</p> <p>Example: <code>\"3.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_0cudaflagsdatacudanonjetsongpusdontdefaultafter","title":"cudaPackagesPackageSets.cudaPackages_10_0.cudaFlags.data.cudaNonJetsonGpus.*.dontDefaultAfter","text":"<p>The CUDA version after which to exclude this GPU from the list of default capabilities we build. null means we always include this GPU in the default capabilities if it is supported.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_0cudaflagsdatacudanonjetsongpusisjetson","title":"cudaPackagesPackageSets.cudaPackages_10_0.cudaFlags.data.cudaNonJetsonGpus.*.isJetson","text":"<p>Whether a GPU is part of NVIDIA\u2019s line of Jetson embedded computers.</p> <p>This field is notable because it tells us what architecture to build for (as Jetson devices are aarch64). More on Jetson devices here: https://www.nvidia.com/en-us/autonomous-machines/embedded-systems/</p> <p>NOTE: These architectures are only built upon request.</p> <p>Type: one of false, true</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_0cudaflagsdatacudanonjetsongpusmaxcudaversion","title":"cudaPackagesPackageSets.cudaPackages_10_0.cudaFlags.data.cudaNonJetsonGpus.*.maxCudaVersion","text":"<p>The maximum (exclusive) CUDA version that supports this GPU. null means there is no maximum.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_0cudaflagsdatacudanonjetsongpusmincudaversion","title":"cudaPackagesPackageSets.cudaPackages_10_0.cudaFlags.data.cudaNonJetsonGpus.*.minCudaVersion","text":"<p>The minimum (inclusive) CUDA version that supports this GPU.</p> <p>Type: A version number with a major and minor component.</p> <p>Example: <code>\"10.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_0cudaflagsdatacudasupport","title":"cudaPackagesPackageSets.cudaPackages_10_0.cudaFlags.data.cudaSupport","text":"<p>Build packages with CUDA support</p> <p>Type: boolean</p> <p>Default: <code>true</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_0cudaflagsdatadefaultcapabilities","title":"cudaPackagesPackageSets.cudaPackages_10_0.cudaFlags.data.defaultCapabilities","text":"<p>The default compute capabilities for a given CUDA version</p> <p>Type: list of A CUDA capability version.</p> <p>Default:</p> <pre><code>[\n  \"3.0\"\n  \"3.2\"\n  \"3.5\"\n  \"3.7\"\n  \"5.0\"\n  \"5.2\"\n  \"6.0\"\n  \"6.1\"\n  \"7.0\"\n  \"7.5\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_0cudaflagsdatadefaultgpus","title":"cudaPackagesPackageSets.cudaPackages_10_0.cudaFlags.data.defaultGpus","text":"<p>The default GPUs for a given CUDA version</p> <p>Type: list of (submodule)</p> <p>Default:</p> <pre><code>[\n  {\n    archName = \"Kepler\";\n    computeCapability = \"3.0\";\n    dontDefaultAfter = \"10.2\";\n    isJetson = false;\n    maxCudaVersion = \"10.2\";\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Kepler\";\n    computeCapability = \"3.2\";\n    dontDefaultAfter = \"10.2\";\n    isJetson = false;\n    maxCudaVersion = \"10.2\";\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Kepler\";\n    computeCapability = \"3.5\";\n    dontDefaultAfter = \"11.0\";\n    isJetson = false;\n    maxCudaVersion = \"11.8\";\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Kepler\";\n    computeCapability = \"3.7\";\n    dontDefaultAfter = \"11.0\";\n    isJetson = false;\n    maxCudaVersion = \"11.8\";\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Maxwell\";\n    computeCapability = \"5.0\";\n    dontDefaultAfter = \"11.0\";\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Maxwell\";\n    computeCapability = \"5.2\";\n    dontDefaultAfter = \"11.0\";\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Pascal\";\n    computeCapability = \"6.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Pascal\";\n    computeCapability = \"6.1\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Volta\";\n    computeCapability = \"7.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Turing\";\n    computeCapability = \"7.5\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_0cudaflagsdatadefaultgpusarchname","title":"cudaPackagesPackageSets.cudaPackages_10_0.cudaFlags.data.defaultGpus.*.archName","text":"<p>Name of the microarchitecture</p> <p>Type: A CUDA architecture name, like Ampere or Ada.</p> <p>Example: <code>\"Kepler\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_0cudaflagsdatadefaultgpuscomputecapability","title":"cudaPackagesPackageSets.cudaPackages_10_0.cudaFlags.data.defaultGpus.*.computeCapability","text":"<p>Compute capability of the GPU</p> <p>Type: A CUDA capability version.</p> <p>Example: <code>\"3.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_0cudaflagsdatadefaultgpusdontdefaultafter","title":"cudaPackagesPackageSets.cudaPackages_10_0.cudaFlags.data.defaultGpus.*.dontDefaultAfter","text":"<p>The CUDA version after which to exclude this GPU from the list of default capabilities we build. null means we always include this GPU in the default capabilities if it is supported.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_0cudaflagsdatadefaultgpusisjetson","title":"cudaPackagesPackageSets.cudaPackages_10_0.cudaFlags.data.defaultGpus.*.isJetson","text":"<p>Whether a GPU is part of NVIDIA\u2019s line of Jetson embedded computers.</p> <p>This field is notable because it tells us what architecture to build for (as Jetson devices are aarch64). More on Jetson devices here: https://www.nvidia.com/en-us/autonomous-machines/embedded-systems/</p> <p>NOTE: These architectures are only built upon request.</p> <p>Type: one of true, false</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_0cudaflagsdatadefaultgpusmaxcudaversion","title":"cudaPackagesPackageSets.cudaPackages_10_0.cudaFlags.data.defaultGpus.*.maxCudaVersion","text":"<p>The maximum (exclusive) CUDA version that supports this GPU. null means there is no maximum.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_0cudaflagsdatadefaultgpusmincudaversion","title":"cudaPackagesPackageSets.cudaPackages_10_0.cudaFlags.data.defaultGpus.*.minCudaVersion","text":"<p>The minimum (inclusive) CUDA version that supports this GPU.</p> <p>Type: A version number with a major and minor component.</p> <p>Example: <code>\"10.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_0cudaflagsdatagencodeargs","title":"cudaPackagesPackageSets.cudaPackages_10_0.cudaFlags.data.gencodeArgs","text":"<p>The gencode arguments to pass to NVCC</p> <p>Type: list of A `gencode` argument for the `nvcc` compiler.</p> <p>Default:</p> <pre><code>[\n  \"-gencode=arch=compute_89,code=sm_89\"\n]\n</code></pre> <p>Example:</p> <pre><code>[\n  \"-gencode=arch=compute_75,code=sm_75\"\n  \"-gencode=arch=compute_86,code=sm_86\"\n  \"-gencode=arch=compute_86,code=compute_86\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_0cudaflagsdatagencodestring","title":"cudaPackagesPackageSets.cudaPackages_10_0.cudaFlags.data.gencodeString","text":"<p>A space-separated string of CUDA gencode arguments to pass to NVCC</p> <p>Type: string</p> <p>Default: <code>\"-gencode=arch=compute_89,code=sm_89\"</code></p> <p>Example: <code>\"-gencode=arch=compute_75,code=sm_75 ... -gencode=arch=compute_86,code=compute_86\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_0cudaflagsdataisjetsonbuild","title":"cudaPackagesPackageSets.cudaPackages_10_0.cudaFlags.data.isJetsonBuild","text":"<p>Whether the build is for a Jetson device.</p> <p>Jetson devices cannot be targeted by the same binaries which target non-Jetson devices. While NVIDIA provides both <code>linux-aarch64</code> and <code>linux-sbsa</code> packages, which both target <code>aarch64</code>, they are built with different settings and cannot be mixed.</p> <p>Type: boolean</p> <p>Default: <code>false</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_0cudaflagsdatarealarches","title":"cudaPackagesPackageSets.cudaPackages_10_0.cudaFlags.data.realArches","text":"<p>The physical architectures to build for</p> <p>Type: list of A real/physical CUDA architecture name.</p> <p>Default:</p> <pre><code>[\n  \"sm_89\"\n]\n</code></pre> <p>Example:</p> <pre><code>[\n  \"sm_75\"\n  \"sm_86\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_0cudaflagsdatasupportedcapabilities","title":"cudaPackagesPackageSets.cudaPackages_10_0.cudaFlags.data.supportedCapabilities","text":"<p>The compute capabilities supported by a given CUDA version</p> <p>Type: list of A CUDA capability version.</p> <p>Default:</p> <pre><code>[\n  \"3.0\"\n  \"3.2\"\n  \"3.5\"\n  \"3.7\"\n  \"5.0\"\n  \"5.2\"\n  \"5.3\"\n  \"6.0\"\n  \"6.1\"\n  \"6.2\"\n  \"7.0\"\n  \"7.2\"\n  \"7.5\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_0cudaflagsdatasupportedgpus","title":"cudaPackagesPackageSets.cudaPackages_10_0.cudaFlags.data.supportedGpus","text":"<p>The GPUs supported by a given CUDA version</p> <p>Type: list of (submodule)</p> <p>Default:</p> <pre><code>[\n  {\n    archName = \"Kepler\";\n    computeCapability = \"3.0\";\n    dontDefaultAfter = \"10.2\";\n    isJetson = false;\n    maxCudaVersion = \"10.2\";\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Kepler\";\n    computeCapability = \"3.2\";\n    dontDefaultAfter = \"10.2\";\n    isJetson = false;\n    maxCudaVersion = \"10.2\";\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Kepler\";\n    computeCapability = \"3.5\";\n    dontDefaultAfter = \"11.0\";\n    isJetson = false;\n    maxCudaVersion = \"11.8\";\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Kepler\";\n    computeCapability = \"3.7\";\n    dontDefaultAfter = \"11.0\";\n    isJetson = false;\n    maxCudaVersion = \"11.8\";\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Maxwell\";\n    computeCapability = \"5.0\";\n    dontDefaultAfter = \"11.0\";\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Maxwell\";\n    computeCapability = \"5.2\";\n    dontDefaultAfter = \"11.0\";\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Maxwell\";\n    computeCapability = \"5.3\";\n    dontDefaultAfter = null;\n    isJetson = true;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Pascal\";\n    computeCapability = \"6.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Pascal\";\n    computeCapability = \"6.1\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Pascal\";\n    computeCapability = \"6.2\";\n    dontDefaultAfter = null;\n    isJetson = true;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Volta\";\n    computeCapability = \"7.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Volta\";\n    computeCapability = \"7.2\";\n    dontDefaultAfter = null;\n    isJetson = true;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Turing\";\n    computeCapability = \"7.5\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_0cudaflagsdatasupportedgpusarchname","title":"cudaPackagesPackageSets.cudaPackages_10_0.cudaFlags.data.supportedGpus.*.archName","text":"<p>Name of the microarchitecture</p> <p>Type: A CUDA architecture name, like Ampere or Ada.</p> <p>Example: <code>\"Kepler\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_0cudaflagsdatasupportedgpuscomputecapability","title":"cudaPackagesPackageSets.cudaPackages_10_0.cudaFlags.data.supportedGpus.*.computeCapability","text":"<p>Compute capability of the GPU</p> <p>Type: A CUDA capability version.</p> <p>Example: <code>\"3.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_0cudaflagsdatasupportedgpusdontdefaultafter","title":"cudaPackagesPackageSets.cudaPackages_10_0.cudaFlags.data.supportedGpus.*.dontDefaultAfter","text":"<p>The CUDA version after which to exclude this GPU from the list of default capabilities we build. null means we always include this GPU in the default capabilities if it is supported.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_0cudaflagsdatasupportedgpusisjetson","title":"cudaPackagesPackageSets.cudaPackages_10_0.cudaFlags.data.supportedGpus.*.isJetson","text":"<p>Whether a GPU is part of NVIDIA\u2019s line of Jetson embedded computers.</p> <p>This field is notable because it tells us what architecture to build for (as Jetson devices are aarch64). More on Jetson devices here: https://www.nvidia.com/en-us/autonomous-machines/embedded-systems/</p> <p>NOTE: These architectures are only built upon request.</p> <p>Type: one of true, false</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_0cudaflagsdatasupportedgpusmaxcudaversion","title":"cudaPackagesPackageSets.cudaPackages_10_0.cudaFlags.data.supportedGpus.*.maxCudaVersion","text":"<p>The maximum (exclusive) CUDA version that supports this GPU. null means there is no maximum.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_0cudaflagsdatasupportedgpusmincudaversion","title":"cudaPackagesPackageSets.cudaPackages_10_0.cudaFlags.data.supportedGpus.*.minCudaVersion","text":"<p>The minimum (inclusive) CUDA version that supports this GPU.</p> <p>Type: A version number with a major and minor component.</p> <p>Example: <code>\"10.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_0cudaflagsdatavirtualarches","title":"cudaPackagesPackageSets.cudaPackages_10_0.cudaFlags.data.virtualArches","text":"<p>The virtual architectures to build for. These are typically used for forward compatibility, when trying to support an architecture newer than the CUDA version allows.</p> <p>Type: list of A virtual CUDA architecture name.</p> <p>Default:</p> <pre><code>[\n  \"compute_89\"\n]\n</code></pre> <p>Example:</p> <pre><code>[\n  \"compute_75\"\n  \"compute_86\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_0cudaflagsutilsarchmapper","title":"cudaPackagesPackageSets.cudaPackages_10_0.cudaFlags.utils.archMapper","text":"<p>Maps a feature across a list of compute capabilities to produce a list of architectures.</p> <p>For example, \u201csm\u201d and [ \u201c8.0\u201d \u201c8.6\u201d \u201c8.7\u201d ] yield [ \u201csm_80\u201d \u201csm_86\u201d \u201csm_87\u201d ].</p> <p>Type: function that evaluates to a(n) function that evaluates to a(n) list of string</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_0cudaflagsutilsdropdot","title":"cudaPackagesPackageSets.cudaPackages_10_0.cudaFlags.utils.dropDot","text":"<p>Drops dots from a string.</p> <p>Type: function that evaluates to a(n) string</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_0cudaflagsutilsgencodemapper","title":"cudaPackagesPackageSets.cudaPackages_10_0.cudaFlags.utils.gencodeMapper","text":"<p>Maps a feature across a list of compute capabilities to produce a list of gencode arguments.</p> <p>For example, \u201csm\u201d and [ \u201c8.0\u201d \u201c8.6\u201d \u201c8.7\u201d ] yield [ \u201c-gencode=arch=compute_80,code=sm_80\u201d \u201c-gencode=arch=compute_86,code=sm_86\u201d \u201c-gencode=arch=compute_87,code=sm_87\u201d ].</p> <p>Type: function that evaluates to a(n) function that evaluates to a(n) list of string</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_0cudaflagsutilsgetnixsystem","title":"cudaPackagesPackageSets.cudaPackages_10_0.cudaFlags.utils.getNixSystem","text":"<p>Maps NVIDIA redist arch to Nix system.</p> <p>NOTE: This function will be called by unsupported systems because <code>cudaPackages</code> is part of <code>all-packages.nix</code>, which is evaluated on all systems. As such, we need to handle unsupported systems gracefully.</p> <p>Type: function that evaluates to a(n) (one of \u201cunsupported\u201d, \u201caaarch64-linux\u201d, \u201cx86_64-linux\u201d, \u201cppc64le-linux\u201d, \u201cx86_64-windows\u201d)</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_0cudaflagsutilsgetredistarch","title":"cudaPackagesPackageSets.cudaPackages_10_0.cudaFlags.utils.getRedistArch","text":"<p>Maps Nix system to NVIDIA redist arch.</p> <p>NOTE: We swap out the default <code>linux-sbsa</code> redist (for server-grade ARM chips) with the <code>linux-aarch64</code> redist (which is for Jetson devices) if we\u2019re building any Jetson devices. Since both are based on aarch64, we can only have one or the other, otherwise there\u2019s an ambiguity as to which should be used.</p> <p>NOTE: This function will be called by unsupported systems because <code>cudaPackages</code> is part of <code>all-packages.nix</code>, which is evaluated on all systems. As such, we need to handle unsupported systems gracefully.</p> <p>Type: function that evaluates to a(n) (one of \u201cunsupported\u201d, \u201clinux-aarch64\u201d, \u201clinux-sbsa\u201d, \u201clinux-x86_64\u201d, \u201clinux-ppc64le\u201d, \u201cwindows-x86_64\u201d)</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_0cudaflagsutilsisdefault","title":"cudaPackagesPackageSets.cudaPackages_10_0.cudaFlags.utils.isDefault","text":"<p>Whether a GPU is included in the default capabilities</p> <p>Type: function that evaluates to a(n) boolean</p> <p>Default: <code>&lt;function, args: {dontDefaultAfter, isJetson}&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_0cudaflagsutilsissupported","title":"cudaPackagesPackageSets.cudaPackages_10_0.cudaFlags.utils.isSupported","text":"<p>Whether a CUDA version supports a given GPU</p> <p>Type: function that evaluates to a(n) boolean</p> <p>Default: <code>&lt;function, args: {maxCudaVersion, minCudaVersion}&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_0cudamajorminorversion","title":"cudaPackagesPackageSets.cudaPackages_10_0.cudaMajorMinorVersion","text":"<p>The major and minor version of the CUDA package set</p> <p>Type: string</p> <p>Default: <code>\"10.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_0cudamajorversion","title":"cudaPackagesPackageSets.cudaPackages_10_0.cudaMajorVersion","text":"<p>The major version of the CUDA package set</p> <p>Type: string</p> <p>Default: <code>\"10\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_0cudanewer","title":"cudaPackagesPackageSets.cudaPackages_10_0.cudaNewer","text":"<p>A utility to check if the CUDA version is newer than a given version</p> <p>Type: function that evaluates to a(n) boolean</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_0cudaolder","title":"cudaPackagesPackageSets.cudaPackages_10_0.cudaOlder","text":"<p>A utility to check if the CUDA version is older than a given version</p> <p>Type: function that evaluates to a(n) boolean</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_0cudaversion","title":"cudaPackagesPackageSets.cudaPackages_10_0.cudaVersion","text":"<p>The CUDA version of the package set</p> <p>Type: A version number with a major and minor component.</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_1","title":"cudaPackagesPackageSets.cudaPackages_10_1","text":"<p>A CUDA package set for a particular version of CUDA</p> <p>Type: submodule</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules</p>"},{"location":"#cudapackagespackagesetscudapackages_10_1cudaatleast","title":"cudaPackagesPackageSets.cudaPackages_10_1.cudaAtLeast","text":"<p>A utility to check if the CUDA version is at least a given version</p> <p>Type: function that evaluates to a(n) boolean</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_1cudaatmost","title":"cudaPackagesPackageSets.cudaPackages_10_1.cudaAtMost","text":"<p>A utility to check if the CUDA version is at most a given version</p> <p>Type: function that evaluates to a(n) boolean</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_1cudaflagsdataarchnames","title":"cudaPackagesPackageSets.cudaPackages_10_1.cudaFlags.data.archNames","text":"<p>The names of the architectures to build for</p> <p>Type: list of string</p> <p>Default: <code>[ ]</code></p> <p>Example:</p> <pre><code>[\n  \"Turing\"\n  \"Ampere\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_1cudaflagsdataarches","title":"cudaPackagesPackageSets.cudaPackages_10_1.cudaFlags.data.arches","text":"<p>The architectures to build for. Includes a virtual architecture if forward compatibility is enabled.</p> <p>Type: list of (A real/physical CUDA architecture name. or A virtual CUDA architecture name.)</p> <p>Default:</p> <pre><code>[\n  \"sm_89\"\n]\n</code></pre> <p>Example:</p> <pre><code>[\n  \"sm_75\"\n  \"sm_86\"\n  \"compute_86\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_1cudaflagsdatacudacapabilities","title":"cudaPackagesPackageSets.cudaPackages_10_1.cudaFlags.data.cudaCapabilities","text":"<p>CUDA capabilities (hardware generations) to build for</p> <p>Type: list of A CUDA capability version.</p> <p>Default:</p> <pre><code>[\n  \"8.9\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_1cudaflagsdatacudaforwardcompat","title":"cudaPackagesPackageSets.cudaPackages_10_1.cudaFlags.data.cudaForwardCompat","text":"<p>Build with forward compatibility gencode (+PTX) to support future GPU generations</p> <p>Type: boolean</p> <p>Default: <code>false</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_1cudaflagsdatacudagpus","title":"cudaPackagesPackageSets.cudaPackages_10_1.cudaFlags.data.cudaGpus","text":"<p>CUDA GPUs to build for</p> <p>Type: list of (submodule)</p> <p>Default: <code>[ ]</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_1cudaflagsdatacudagpusarchname","title":"cudaPackagesPackageSets.cudaPackages_10_1.cudaFlags.data.cudaGpus.*.archName","text":"<p>Name of the microarchitecture</p> <p>Type: A CUDA architecture name, like Ampere or Ada.</p> <p>Example: <code>\"Kepler\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_1cudaflagsdatacudagpuscomputecapability","title":"cudaPackagesPackageSets.cudaPackages_10_1.cudaFlags.data.cudaGpus.*.computeCapability","text":"<p>Compute capability of the GPU</p> <p>Type: A CUDA capability version.</p> <p>Example: <code>\"3.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_1cudaflagsdatacudagpusdontdefaultafter","title":"cudaPackagesPackageSets.cudaPackages_10_1.cudaFlags.data.cudaGpus.*.dontDefaultAfter","text":"<p>The CUDA version after which to exclude this GPU from the list of default capabilities we build. null means we always include this GPU in the default capabilities if it is supported.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_1cudaflagsdatacudagpusisjetson","title":"cudaPackagesPackageSets.cudaPackages_10_1.cudaFlags.data.cudaGpus.*.isJetson","text":"<p>Whether a GPU is part of NVIDIA\u2019s line of Jetson embedded computers.</p> <p>This field is notable because it tells us what architecture to build for (as Jetson devices are aarch64). More on Jetson devices here: https://www.nvidia.com/en-us/autonomous-machines/embedded-systems/</p> <p>NOTE: These architectures are only built upon request.</p> <p>Type: one of true, false</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_1cudaflagsdatacudagpusmaxcudaversion","title":"cudaPackagesPackageSets.cudaPackages_10_1.cudaFlags.data.cudaGpus.*.maxCudaVersion","text":"<p>The maximum (exclusive) CUDA version that supports this GPU. null means there is no maximum.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_1cudaflagsdatacudagpusmincudaversion","title":"cudaPackagesPackageSets.cudaPackages_10_1.cudaFlags.data.cudaGpus.*.minCudaVersion","text":"<p>The minimum (inclusive) CUDA version that supports this GPU.</p> <p>Type: A version number with a major and minor component.</p> <p>Example: <code>\"10.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_1cudaflagsdatacudajetsongpus","title":"cudaPackagesPackageSets.cudaPackages_10_1.cudaFlags.data.cudaJetsonGpus","text":"<p>CUDA GPUs to build for, including only Jetson devices</p> <p>Type: list of (submodule)</p> <p>Default: <code>[ ]</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_1cudaflagsdatacudajetsongpusarchname","title":"cudaPackagesPackageSets.cudaPackages_10_1.cudaFlags.data.cudaJetsonGpus.*.archName","text":"<p>Name of the microarchitecture</p> <p>Type: A CUDA architecture name, like Ampere or Ada.</p> <p>Example: <code>\"Kepler\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_1cudaflagsdatacudajetsongpuscomputecapability","title":"cudaPackagesPackageSets.cudaPackages_10_1.cudaFlags.data.cudaJetsonGpus.*.computeCapability","text":"<p>Compute capability of the GPU</p> <p>Type: A CUDA capability version.</p> <p>Example: <code>\"3.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_1cudaflagsdatacudajetsongpusdontdefaultafter","title":"cudaPackagesPackageSets.cudaPackages_10_1.cudaFlags.data.cudaJetsonGpus.*.dontDefaultAfter","text":"<p>The CUDA version after which to exclude this GPU from the list of default capabilities we build. null means we always include this GPU in the default capabilities if it is supported.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_1cudaflagsdatacudajetsongpusisjetson","title":"cudaPackagesPackageSets.cudaPackages_10_1.cudaFlags.data.cudaJetsonGpus.*.isJetson","text":"<p>Whether a GPU is part of NVIDIA\u2019s line of Jetson embedded computers.</p> <p>This field is notable because it tells us what architecture to build for (as Jetson devices are aarch64). More on Jetson devices here: https://www.nvidia.com/en-us/autonomous-machines/embedded-systems/</p> <p>NOTE: These architectures are only built upon request.</p> <p>Type: one of true, false</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_1cudaflagsdatacudajetsongpusmaxcudaversion","title":"cudaPackagesPackageSets.cudaPackages_10_1.cudaFlags.data.cudaJetsonGpus.*.maxCudaVersion","text":"<p>The maximum (exclusive) CUDA version that supports this GPU. null means there is no maximum.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_1cudaflagsdatacudajetsongpusmincudaversion","title":"cudaPackagesPackageSets.cudaPackages_10_1.cudaFlags.data.cudaJetsonGpus.*.minCudaVersion","text":"<p>The minimum (inclusive) CUDA version that supports this GPU.</p> <p>Type: A version number with a major and minor component.</p> <p>Example: <code>\"10.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_1cudaflagsdatacudanonjetsongpus","title":"cudaPackagesPackageSets.cudaPackages_10_1.cudaFlags.data.cudaNonJetsonGpus","text":"<p>CUDA GPUs to build for, excluding Jetson devices</p> <p>Type: list of (submodule)</p> <p>Default: <code>[ ]</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_1cudaflagsdatacudanonjetsongpusarchname","title":"cudaPackagesPackageSets.cudaPackages_10_1.cudaFlags.data.cudaNonJetsonGpus.*.archName","text":"<p>Name of the microarchitecture</p> <p>Type: A CUDA architecture name, like Ampere or Ada.</p> <p>Example: <code>\"Kepler\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_1cudaflagsdatacudanonjetsongpuscomputecapability","title":"cudaPackagesPackageSets.cudaPackages_10_1.cudaFlags.data.cudaNonJetsonGpus.*.computeCapability","text":"<p>Compute capability of the GPU</p> <p>Type: A CUDA capability version.</p> <p>Example: <code>\"3.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_1cudaflagsdatacudanonjetsongpusdontdefaultafter","title":"cudaPackagesPackageSets.cudaPackages_10_1.cudaFlags.data.cudaNonJetsonGpus.*.dontDefaultAfter","text":"<p>The CUDA version after which to exclude this GPU from the list of default capabilities we build. null means we always include this GPU in the default capabilities if it is supported.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_1cudaflagsdatacudanonjetsongpusisjetson","title":"cudaPackagesPackageSets.cudaPackages_10_1.cudaFlags.data.cudaNonJetsonGpus.*.isJetson","text":"<p>Whether a GPU is part of NVIDIA\u2019s line of Jetson embedded computers.</p> <p>This field is notable because it tells us what architecture to build for (as Jetson devices are aarch64). More on Jetson devices here: https://www.nvidia.com/en-us/autonomous-machines/embedded-systems/</p> <p>NOTE: These architectures are only built upon request.</p> <p>Type: one of false, true</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_1cudaflagsdatacudanonjetsongpusmaxcudaversion","title":"cudaPackagesPackageSets.cudaPackages_10_1.cudaFlags.data.cudaNonJetsonGpus.*.maxCudaVersion","text":"<p>The maximum (exclusive) CUDA version that supports this GPU. null means there is no maximum.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_1cudaflagsdatacudanonjetsongpusmincudaversion","title":"cudaPackagesPackageSets.cudaPackages_10_1.cudaFlags.data.cudaNonJetsonGpus.*.minCudaVersion","text":"<p>The minimum (inclusive) CUDA version that supports this GPU.</p> <p>Type: A version number with a major and minor component.</p> <p>Example: <code>\"10.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_1cudaflagsdatacudasupport","title":"cudaPackagesPackageSets.cudaPackages_10_1.cudaFlags.data.cudaSupport","text":"<p>Build packages with CUDA support</p> <p>Type: boolean</p> <p>Default: <code>true</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_1cudaflagsdatadefaultcapabilities","title":"cudaPackagesPackageSets.cudaPackages_10_1.cudaFlags.data.defaultCapabilities","text":"<p>The default compute capabilities for a given CUDA version</p> <p>Type: list of A CUDA capability version.</p> <p>Default:</p> <pre><code>[\n  \"3.0\"\n  \"3.2\"\n  \"3.5\"\n  \"3.7\"\n  \"5.0\"\n  \"5.2\"\n  \"6.0\"\n  \"6.1\"\n  \"7.0\"\n  \"7.5\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_1cudaflagsdatadefaultgpus","title":"cudaPackagesPackageSets.cudaPackages_10_1.cudaFlags.data.defaultGpus","text":"<p>The default GPUs for a given CUDA version</p> <p>Type: list of (submodule)</p> <p>Default:</p> <pre><code>[\n  {\n    archName = \"Kepler\";\n    computeCapability = \"3.0\";\n    dontDefaultAfter = \"10.2\";\n    isJetson = false;\n    maxCudaVersion = \"10.2\";\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Kepler\";\n    computeCapability = \"3.2\";\n    dontDefaultAfter = \"10.2\";\n    isJetson = false;\n    maxCudaVersion = \"10.2\";\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Kepler\";\n    computeCapability = \"3.5\";\n    dontDefaultAfter = \"11.0\";\n    isJetson = false;\n    maxCudaVersion = \"11.8\";\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Kepler\";\n    computeCapability = \"3.7\";\n    dontDefaultAfter = \"11.0\";\n    isJetson = false;\n    maxCudaVersion = \"11.8\";\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Maxwell\";\n    computeCapability = \"5.0\";\n    dontDefaultAfter = \"11.0\";\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Maxwell\";\n    computeCapability = \"5.2\";\n    dontDefaultAfter = \"11.0\";\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Pascal\";\n    computeCapability = \"6.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Pascal\";\n    computeCapability = \"6.1\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Volta\";\n    computeCapability = \"7.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Turing\";\n    computeCapability = \"7.5\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_1cudaflagsdatadefaultgpusarchname","title":"cudaPackagesPackageSets.cudaPackages_10_1.cudaFlags.data.defaultGpus.*.archName","text":"<p>Name of the microarchitecture</p> <p>Type: A CUDA architecture name, like Ampere or Ada.</p> <p>Example: <code>\"Kepler\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_1cudaflagsdatadefaultgpuscomputecapability","title":"cudaPackagesPackageSets.cudaPackages_10_1.cudaFlags.data.defaultGpus.*.computeCapability","text":"<p>Compute capability of the GPU</p> <p>Type: A CUDA capability version.</p> <p>Example: <code>\"3.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_1cudaflagsdatadefaultgpusdontdefaultafter","title":"cudaPackagesPackageSets.cudaPackages_10_1.cudaFlags.data.defaultGpus.*.dontDefaultAfter","text":"<p>The CUDA version after which to exclude this GPU from the list of default capabilities we build. null means we always include this GPU in the default capabilities if it is supported.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_1cudaflagsdatadefaultgpusisjetson","title":"cudaPackagesPackageSets.cudaPackages_10_1.cudaFlags.data.defaultGpus.*.isJetson","text":"<p>Whether a GPU is part of NVIDIA\u2019s line of Jetson embedded computers.</p> <p>This field is notable because it tells us what architecture to build for (as Jetson devices are aarch64). More on Jetson devices here: https://www.nvidia.com/en-us/autonomous-machines/embedded-systems/</p> <p>NOTE: These architectures are only built upon request.</p> <p>Type: one of true, false</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_1cudaflagsdatadefaultgpusmaxcudaversion","title":"cudaPackagesPackageSets.cudaPackages_10_1.cudaFlags.data.defaultGpus.*.maxCudaVersion","text":"<p>The maximum (exclusive) CUDA version that supports this GPU. null means there is no maximum.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_1cudaflagsdatadefaultgpusmincudaversion","title":"cudaPackagesPackageSets.cudaPackages_10_1.cudaFlags.data.defaultGpus.*.minCudaVersion","text":"<p>The minimum (inclusive) CUDA version that supports this GPU.</p> <p>Type: A version number with a major and minor component.</p> <p>Example: <code>\"10.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_1cudaflagsdatagencodeargs","title":"cudaPackagesPackageSets.cudaPackages_10_1.cudaFlags.data.gencodeArgs","text":"<p>The gencode arguments to pass to NVCC</p> <p>Type: list of A `gencode` argument for the `nvcc` compiler.</p> <p>Default:</p> <pre><code>[\n  \"-gencode=arch=compute_89,code=sm_89\"\n]\n</code></pre> <p>Example:</p> <pre><code>[\n  \"-gencode=arch=compute_75,code=sm_75\"\n  \"-gencode=arch=compute_86,code=sm_86\"\n  \"-gencode=arch=compute_86,code=compute_86\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_1cudaflagsdatagencodestring","title":"cudaPackagesPackageSets.cudaPackages_10_1.cudaFlags.data.gencodeString","text":"<p>A space-separated string of CUDA gencode arguments to pass to NVCC</p> <p>Type: string</p> <p>Default: <code>\"-gencode=arch=compute_89,code=sm_89\"</code></p> <p>Example: <code>\"-gencode=arch=compute_75,code=sm_75 ... -gencode=arch=compute_86,code=compute_86\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_1cudaflagsdataisjetsonbuild","title":"cudaPackagesPackageSets.cudaPackages_10_1.cudaFlags.data.isJetsonBuild","text":"<p>Whether the build is for a Jetson device.</p> <p>Jetson devices cannot be targeted by the same binaries which target non-Jetson devices. While NVIDIA provides both <code>linux-aarch64</code> and <code>linux-sbsa</code> packages, which both target <code>aarch64</code>, they are built with different settings and cannot be mixed.</p> <p>Type: boolean</p> <p>Default: <code>false</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_1cudaflagsdatarealarches","title":"cudaPackagesPackageSets.cudaPackages_10_1.cudaFlags.data.realArches","text":"<p>The physical architectures to build for</p> <p>Type: list of A real/physical CUDA architecture name.</p> <p>Default:</p> <pre><code>[\n  \"sm_89\"\n]\n</code></pre> <p>Example:</p> <pre><code>[\n  \"sm_75\"\n  \"sm_86\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_1cudaflagsdatasupportedcapabilities","title":"cudaPackagesPackageSets.cudaPackages_10_1.cudaFlags.data.supportedCapabilities","text":"<p>The compute capabilities supported by a given CUDA version</p> <p>Type: list of A CUDA capability version.</p> <p>Default:</p> <pre><code>[\n  \"3.0\"\n  \"3.2\"\n  \"3.5\"\n  \"3.7\"\n  \"5.0\"\n  \"5.2\"\n  \"5.3\"\n  \"6.0\"\n  \"6.1\"\n  \"6.2\"\n  \"7.0\"\n  \"7.2\"\n  \"7.5\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_1cudaflagsdatasupportedgpus","title":"cudaPackagesPackageSets.cudaPackages_10_1.cudaFlags.data.supportedGpus","text":"<p>The GPUs supported by a given CUDA version</p> <p>Type: list of (submodule)</p> <p>Default:</p> <pre><code>[\n  {\n    archName = \"Kepler\";\n    computeCapability = \"3.0\";\n    dontDefaultAfter = \"10.2\";\n    isJetson = false;\n    maxCudaVersion = \"10.2\";\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Kepler\";\n    computeCapability = \"3.2\";\n    dontDefaultAfter = \"10.2\";\n    isJetson = false;\n    maxCudaVersion = \"10.2\";\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Kepler\";\n    computeCapability = \"3.5\";\n    dontDefaultAfter = \"11.0\";\n    isJetson = false;\n    maxCudaVersion = \"11.8\";\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Kepler\";\n    computeCapability = \"3.7\";\n    dontDefaultAfter = \"11.0\";\n    isJetson = false;\n    maxCudaVersion = \"11.8\";\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Maxwell\";\n    computeCapability = \"5.0\";\n    dontDefaultAfter = \"11.0\";\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Maxwell\";\n    computeCapability = \"5.2\";\n    dontDefaultAfter = \"11.0\";\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Maxwell\";\n    computeCapability = \"5.3\";\n    dontDefaultAfter = null;\n    isJetson = true;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Pascal\";\n    computeCapability = \"6.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Pascal\";\n    computeCapability = \"6.1\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Pascal\";\n    computeCapability = \"6.2\";\n    dontDefaultAfter = null;\n    isJetson = true;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Volta\";\n    computeCapability = \"7.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Volta\";\n    computeCapability = \"7.2\";\n    dontDefaultAfter = null;\n    isJetson = true;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Turing\";\n    computeCapability = \"7.5\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_1cudaflagsdatasupportedgpusarchname","title":"cudaPackagesPackageSets.cudaPackages_10_1.cudaFlags.data.supportedGpus.*.archName","text":"<p>Name of the microarchitecture</p> <p>Type: A CUDA architecture name, like Ampere or Ada.</p> <p>Example: <code>\"Kepler\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_1cudaflagsdatasupportedgpuscomputecapability","title":"cudaPackagesPackageSets.cudaPackages_10_1.cudaFlags.data.supportedGpus.*.computeCapability","text":"<p>Compute capability of the GPU</p> <p>Type: A CUDA capability version.</p> <p>Example: <code>\"3.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_1cudaflagsdatasupportedgpusdontdefaultafter","title":"cudaPackagesPackageSets.cudaPackages_10_1.cudaFlags.data.supportedGpus.*.dontDefaultAfter","text":"<p>The CUDA version after which to exclude this GPU from the list of default capabilities we build. null means we always include this GPU in the default capabilities if it is supported.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_1cudaflagsdatasupportedgpusisjetson","title":"cudaPackagesPackageSets.cudaPackages_10_1.cudaFlags.data.supportedGpus.*.isJetson","text":"<p>Whether a GPU is part of NVIDIA\u2019s line of Jetson embedded computers.</p> <p>This field is notable because it tells us what architecture to build for (as Jetson devices are aarch64). More on Jetson devices here: https://www.nvidia.com/en-us/autonomous-machines/embedded-systems/</p> <p>NOTE: These architectures are only built upon request.</p> <p>Type: one of true, false</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_1cudaflagsdatasupportedgpusmaxcudaversion","title":"cudaPackagesPackageSets.cudaPackages_10_1.cudaFlags.data.supportedGpus.*.maxCudaVersion","text":"<p>The maximum (exclusive) CUDA version that supports this GPU. null means there is no maximum.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_1cudaflagsdatasupportedgpusmincudaversion","title":"cudaPackagesPackageSets.cudaPackages_10_1.cudaFlags.data.supportedGpus.*.minCudaVersion","text":"<p>The minimum (inclusive) CUDA version that supports this GPU.</p> <p>Type: A version number with a major and minor component.</p> <p>Example: <code>\"10.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_1cudaflagsdatavirtualarches","title":"cudaPackagesPackageSets.cudaPackages_10_1.cudaFlags.data.virtualArches","text":"<p>The virtual architectures to build for. These are typically used for forward compatibility, when trying to support an architecture newer than the CUDA version allows.</p> <p>Type: list of A virtual CUDA architecture name.</p> <p>Default:</p> <pre><code>[\n  \"compute_89\"\n]\n</code></pre> <p>Example:</p> <pre><code>[\n  \"compute_75\"\n  \"compute_86\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_1cudaflagsutilsarchmapper","title":"cudaPackagesPackageSets.cudaPackages_10_1.cudaFlags.utils.archMapper","text":"<p>Maps a feature across a list of compute capabilities to produce a list of architectures.</p> <p>For example, \u201csm\u201d and [ \u201c8.0\u201d \u201c8.6\u201d \u201c8.7\u201d ] yield [ \u201csm_80\u201d \u201csm_86\u201d \u201csm_87\u201d ].</p> <p>Type: function that evaluates to a(n) function that evaluates to a(n) list of string</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_1cudaflagsutilsdropdot","title":"cudaPackagesPackageSets.cudaPackages_10_1.cudaFlags.utils.dropDot","text":"<p>Drops dots from a string.</p> <p>Type: function that evaluates to a(n) string</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_1cudaflagsutilsgencodemapper","title":"cudaPackagesPackageSets.cudaPackages_10_1.cudaFlags.utils.gencodeMapper","text":"<p>Maps a feature across a list of compute capabilities to produce a list of gencode arguments.</p> <p>For example, \u201csm\u201d and [ \u201c8.0\u201d \u201c8.6\u201d \u201c8.7\u201d ] yield [ \u201c-gencode=arch=compute_80,code=sm_80\u201d \u201c-gencode=arch=compute_86,code=sm_86\u201d \u201c-gencode=arch=compute_87,code=sm_87\u201d ].</p> <p>Type: function that evaluates to a(n) function that evaluates to a(n) list of string</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_1cudaflagsutilsgetnixsystem","title":"cudaPackagesPackageSets.cudaPackages_10_1.cudaFlags.utils.getNixSystem","text":"<p>Maps NVIDIA redist arch to Nix system.</p> <p>NOTE: This function will be called by unsupported systems because <code>cudaPackages</code> is part of <code>all-packages.nix</code>, which is evaluated on all systems. As such, we need to handle unsupported systems gracefully.</p> <p>Type: function that evaluates to a(n) (one of \u201cunsupported\u201d, \u201caaarch64-linux\u201d, \u201cx86_64-linux\u201d, \u201cppc64le-linux\u201d, \u201cx86_64-windows\u201d)</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_1cudaflagsutilsgetredistarch","title":"cudaPackagesPackageSets.cudaPackages_10_1.cudaFlags.utils.getRedistArch","text":"<p>Maps Nix system to NVIDIA redist arch.</p> <p>NOTE: We swap out the default <code>linux-sbsa</code> redist (for server-grade ARM chips) with the <code>linux-aarch64</code> redist (which is for Jetson devices) if we\u2019re building any Jetson devices. Since both are based on aarch64, we can only have one or the other, otherwise there\u2019s an ambiguity as to which should be used.</p> <p>NOTE: This function will be called by unsupported systems because <code>cudaPackages</code> is part of <code>all-packages.nix</code>, which is evaluated on all systems. As such, we need to handle unsupported systems gracefully.</p> <p>Type: function that evaluates to a(n) (one of \u201cunsupported\u201d, \u201clinux-aarch64\u201d, \u201clinux-sbsa\u201d, \u201clinux-x86_64\u201d, \u201clinux-ppc64le\u201d, \u201cwindows-x86_64\u201d)</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_1cudaflagsutilsisdefault","title":"cudaPackagesPackageSets.cudaPackages_10_1.cudaFlags.utils.isDefault","text":"<p>Whether a GPU is included in the default capabilities</p> <p>Type: function that evaluates to a(n) boolean</p> <p>Default: <code>&lt;function, args: {dontDefaultAfter, isJetson}&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_1cudaflagsutilsissupported","title":"cudaPackagesPackageSets.cudaPackages_10_1.cudaFlags.utils.isSupported","text":"<p>Whether a CUDA version supports a given GPU</p> <p>Type: function that evaluates to a(n) boolean</p> <p>Default: <code>&lt;function, args: {maxCudaVersion, minCudaVersion}&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_1cudamajorminorversion","title":"cudaPackagesPackageSets.cudaPackages_10_1.cudaMajorMinorVersion","text":"<p>The major and minor version of the CUDA package set</p> <p>Type: string</p> <p>Default: <code>\"10.1\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_1cudamajorversion","title":"cudaPackagesPackageSets.cudaPackages_10_1.cudaMajorVersion","text":"<p>The major version of the CUDA package set</p> <p>Type: string</p> <p>Default: <code>\"10\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_1cudanewer","title":"cudaPackagesPackageSets.cudaPackages_10_1.cudaNewer","text":"<p>A utility to check if the CUDA version is newer than a given version</p> <p>Type: function that evaluates to a(n) boolean</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_1cudaolder","title":"cudaPackagesPackageSets.cudaPackages_10_1.cudaOlder","text":"<p>A utility to check if the CUDA version is older than a given version</p> <p>Type: function that evaluates to a(n) boolean</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_1cudaversion","title":"cudaPackagesPackageSets.cudaPackages_10_1.cudaVersion","text":"<p>The CUDA version of the package set</p> <p>Type: A version number with a major and minor component.</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_2","title":"cudaPackagesPackageSets.cudaPackages_10_2","text":"<p>A CUDA package set for a particular version of CUDA</p> <p>Type: submodule</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules</p>"},{"location":"#cudapackagespackagesetscudapackages_10_2cudaatleast","title":"cudaPackagesPackageSets.cudaPackages_10_2.cudaAtLeast","text":"<p>A utility to check if the CUDA version is at least a given version</p> <p>Type: function that evaluates to a(n) boolean</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_2cudaatmost","title":"cudaPackagesPackageSets.cudaPackages_10_2.cudaAtMost","text":"<p>A utility to check if the CUDA version is at most a given version</p> <p>Type: function that evaluates to a(n) boolean</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_2cudaflagsdataarchnames","title":"cudaPackagesPackageSets.cudaPackages_10_2.cudaFlags.data.archNames","text":"<p>The names of the architectures to build for</p> <p>Type: list of string</p> <p>Default: <code>[ ]</code></p> <p>Example:</p> <pre><code>[\n  \"Turing\"\n  \"Ampere\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_2cudaflagsdataarches","title":"cudaPackagesPackageSets.cudaPackages_10_2.cudaFlags.data.arches","text":"<p>The architectures to build for. Includes a virtual architecture if forward compatibility is enabled.</p> <p>Type: list of (A real/physical CUDA architecture name. or A virtual CUDA architecture name.)</p> <p>Default:</p> <pre><code>[\n  \"sm_89\"\n]\n</code></pre> <p>Example:</p> <pre><code>[\n  \"sm_75\"\n  \"sm_86\"\n  \"compute_86\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_2cudaflagsdatacudacapabilities","title":"cudaPackagesPackageSets.cudaPackages_10_2.cudaFlags.data.cudaCapabilities","text":"<p>CUDA capabilities (hardware generations) to build for</p> <p>Type: list of A CUDA capability version.</p> <p>Default:</p> <pre><code>[\n  \"8.9\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_2cudaflagsdatacudaforwardcompat","title":"cudaPackagesPackageSets.cudaPackages_10_2.cudaFlags.data.cudaForwardCompat","text":"<p>Build with forward compatibility gencode (+PTX) to support future GPU generations</p> <p>Type: boolean</p> <p>Default: <code>false</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_2cudaflagsdatacudagpus","title":"cudaPackagesPackageSets.cudaPackages_10_2.cudaFlags.data.cudaGpus","text":"<p>CUDA GPUs to build for</p> <p>Type: list of (submodule)</p> <p>Default: <code>[ ]</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_2cudaflagsdatacudagpusarchname","title":"cudaPackagesPackageSets.cudaPackages_10_2.cudaFlags.data.cudaGpus.*.archName","text":"<p>Name of the microarchitecture</p> <p>Type: A CUDA architecture name, like Ampere or Ada.</p> <p>Example: <code>\"Kepler\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_2cudaflagsdatacudagpuscomputecapability","title":"cudaPackagesPackageSets.cudaPackages_10_2.cudaFlags.data.cudaGpus.*.computeCapability","text":"<p>Compute capability of the GPU</p> <p>Type: A CUDA capability version.</p> <p>Example: <code>\"3.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_2cudaflagsdatacudagpusdontdefaultafter","title":"cudaPackagesPackageSets.cudaPackages_10_2.cudaFlags.data.cudaGpus.*.dontDefaultAfter","text":"<p>The CUDA version after which to exclude this GPU from the list of default capabilities we build. null means we always include this GPU in the default capabilities if it is supported.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_2cudaflagsdatacudagpusisjetson","title":"cudaPackagesPackageSets.cudaPackages_10_2.cudaFlags.data.cudaGpus.*.isJetson","text":"<p>Whether a GPU is part of NVIDIA\u2019s line of Jetson embedded computers.</p> <p>This field is notable because it tells us what architecture to build for (as Jetson devices are aarch64). More on Jetson devices here: https://www.nvidia.com/en-us/autonomous-machines/embedded-systems/</p> <p>NOTE: These architectures are only built upon request.</p> <p>Type: one of true, false</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_2cudaflagsdatacudagpusmaxcudaversion","title":"cudaPackagesPackageSets.cudaPackages_10_2.cudaFlags.data.cudaGpus.*.maxCudaVersion","text":"<p>The maximum (exclusive) CUDA version that supports this GPU. null means there is no maximum.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_2cudaflagsdatacudagpusmincudaversion","title":"cudaPackagesPackageSets.cudaPackages_10_2.cudaFlags.data.cudaGpus.*.minCudaVersion","text":"<p>The minimum (inclusive) CUDA version that supports this GPU.</p> <p>Type: A version number with a major and minor component.</p> <p>Example: <code>\"10.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_2cudaflagsdatacudajetsongpus","title":"cudaPackagesPackageSets.cudaPackages_10_2.cudaFlags.data.cudaJetsonGpus","text":"<p>CUDA GPUs to build for, including only Jetson devices</p> <p>Type: list of (submodule)</p> <p>Default: <code>[ ]</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_2cudaflagsdatacudajetsongpusarchname","title":"cudaPackagesPackageSets.cudaPackages_10_2.cudaFlags.data.cudaJetsonGpus.*.archName","text":"<p>Name of the microarchitecture</p> <p>Type: A CUDA architecture name, like Ampere or Ada.</p> <p>Example: <code>\"Kepler\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_2cudaflagsdatacudajetsongpuscomputecapability","title":"cudaPackagesPackageSets.cudaPackages_10_2.cudaFlags.data.cudaJetsonGpus.*.computeCapability","text":"<p>Compute capability of the GPU</p> <p>Type: A CUDA capability version.</p> <p>Example: <code>\"3.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_2cudaflagsdatacudajetsongpusdontdefaultafter","title":"cudaPackagesPackageSets.cudaPackages_10_2.cudaFlags.data.cudaJetsonGpus.*.dontDefaultAfter","text":"<p>The CUDA version after which to exclude this GPU from the list of default capabilities we build. null means we always include this GPU in the default capabilities if it is supported.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_2cudaflagsdatacudajetsongpusisjetson","title":"cudaPackagesPackageSets.cudaPackages_10_2.cudaFlags.data.cudaJetsonGpus.*.isJetson","text":"<p>Whether a GPU is part of NVIDIA\u2019s line of Jetson embedded computers.</p> <p>This field is notable because it tells us what architecture to build for (as Jetson devices are aarch64). More on Jetson devices here: https://www.nvidia.com/en-us/autonomous-machines/embedded-systems/</p> <p>NOTE: These architectures are only built upon request.</p> <p>Type: one of true, false</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_2cudaflagsdatacudajetsongpusmaxcudaversion","title":"cudaPackagesPackageSets.cudaPackages_10_2.cudaFlags.data.cudaJetsonGpus.*.maxCudaVersion","text":"<p>The maximum (exclusive) CUDA version that supports this GPU. null means there is no maximum.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_2cudaflagsdatacudajetsongpusmincudaversion","title":"cudaPackagesPackageSets.cudaPackages_10_2.cudaFlags.data.cudaJetsonGpus.*.minCudaVersion","text":"<p>The minimum (inclusive) CUDA version that supports this GPU.</p> <p>Type: A version number with a major and minor component.</p> <p>Example: <code>\"10.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_2cudaflagsdatacudanonjetsongpus","title":"cudaPackagesPackageSets.cudaPackages_10_2.cudaFlags.data.cudaNonJetsonGpus","text":"<p>CUDA GPUs to build for, excluding Jetson devices</p> <p>Type: list of (submodule)</p> <p>Default: <code>[ ]</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_2cudaflagsdatacudanonjetsongpusarchname","title":"cudaPackagesPackageSets.cudaPackages_10_2.cudaFlags.data.cudaNonJetsonGpus.*.archName","text":"<p>Name of the microarchitecture</p> <p>Type: A CUDA architecture name, like Ampere or Ada.</p> <p>Example: <code>\"Kepler\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_2cudaflagsdatacudanonjetsongpuscomputecapability","title":"cudaPackagesPackageSets.cudaPackages_10_2.cudaFlags.data.cudaNonJetsonGpus.*.computeCapability","text":"<p>Compute capability of the GPU</p> <p>Type: A CUDA capability version.</p> <p>Example: <code>\"3.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_2cudaflagsdatacudanonjetsongpusdontdefaultafter","title":"cudaPackagesPackageSets.cudaPackages_10_2.cudaFlags.data.cudaNonJetsonGpus.*.dontDefaultAfter","text":"<p>The CUDA version after which to exclude this GPU from the list of default capabilities we build. null means we always include this GPU in the default capabilities if it is supported.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_2cudaflagsdatacudanonjetsongpusisjetson","title":"cudaPackagesPackageSets.cudaPackages_10_2.cudaFlags.data.cudaNonJetsonGpus.*.isJetson","text":"<p>Whether a GPU is part of NVIDIA\u2019s line of Jetson embedded computers.</p> <p>This field is notable because it tells us what architecture to build for (as Jetson devices are aarch64). More on Jetson devices here: https://www.nvidia.com/en-us/autonomous-machines/embedded-systems/</p> <p>NOTE: These architectures are only built upon request.</p> <p>Type: one of false, true</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_2cudaflagsdatacudanonjetsongpusmaxcudaversion","title":"cudaPackagesPackageSets.cudaPackages_10_2.cudaFlags.data.cudaNonJetsonGpus.*.maxCudaVersion","text":"<p>The maximum (exclusive) CUDA version that supports this GPU. null means there is no maximum.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_2cudaflagsdatacudanonjetsongpusmincudaversion","title":"cudaPackagesPackageSets.cudaPackages_10_2.cudaFlags.data.cudaNonJetsonGpus.*.minCudaVersion","text":"<p>The minimum (inclusive) CUDA version that supports this GPU.</p> <p>Type: A version number with a major and minor component.</p> <p>Example: <code>\"10.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_2cudaflagsdatacudasupport","title":"cudaPackagesPackageSets.cudaPackages_10_2.cudaFlags.data.cudaSupport","text":"<p>Build packages with CUDA support</p> <p>Type: boolean</p> <p>Default: <code>true</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_2cudaflagsdatadefaultcapabilities","title":"cudaPackagesPackageSets.cudaPackages_10_2.cudaFlags.data.defaultCapabilities","text":"<p>The default compute capabilities for a given CUDA version</p> <p>Type: list of A CUDA capability version.</p> <p>Default:</p> <pre><code>[\n  \"3.0\"\n  \"3.2\"\n  \"3.5\"\n  \"3.7\"\n  \"5.0\"\n  \"5.2\"\n  \"6.0\"\n  \"6.1\"\n  \"7.0\"\n  \"7.5\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_2cudaflagsdatadefaultgpus","title":"cudaPackagesPackageSets.cudaPackages_10_2.cudaFlags.data.defaultGpus","text":"<p>The default GPUs for a given CUDA version</p> <p>Type: list of (submodule)</p> <p>Default:</p> <pre><code>[\n  {\n    archName = \"Kepler\";\n    computeCapability = \"3.0\";\n    dontDefaultAfter = \"10.2\";\n    isJetson = false;\n    maxCudaVersion = \"10.2\";\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Kepler\";\n    computeCapability = \"3.2\";\n    dontDefaultAfter = \"10.2\";\n    isJetson = false;\n    maxCudaVersion = \"10.2\";\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Kepler\";\n    computeCapability = \"3.5\";\n    dontDefaultAfter = \"11.0\";\n    isJetson = false;\n    maxCudaVersion = \"11.8\";\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Kepler\";\n    computeCapability = \"3.7\";\n    dontDefaultAfter = \"11.0\";\n    isJetson = false;\n    maxCudaVersion = \"11.8\";\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Maxwell\";\n    computeCapability = \"5.0\";\n    dontDefaultAfter = \"11.0\";\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Maxwell\";\n    computeCapability = \"5.2\";\n    dontDefaultAfter = \"11.0\";\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Pascal\";\n    computeCapability = \"6.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Pascal\";\n    computeCapability = \"6.1\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Volta\";\n    computeCapability = \"7.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Turing\";\n    computeCapability = \"7.5\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_2cudaflagsdatadefaultgpusarchname","title":"cudaPackagesPackageSets.cudaPackages_10_2.cudaFlags.data.defaultGpus.*.archName","text":"<p>Name of the microarchitecture</p> <p>Type: A CUDA architecture name, like Ampere or Ada.</p> <p>Example: <code>\"Kepler\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_2cudaflagsdatadefaultgpuscomputecapability","title":"cudaPackagesPackageSets.cudaPackages_10_2.cudaFlags.data.defaultGpus.*.computeCapability","text":"<p>Compute capability of the GPU</p> <p>Type: A CUDA capability version.</p> <p>Example: <code>\"3.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_2cudaflagsdatadefaultgpusdontdefaultafter","title":"cudaPackagesPackageSets.cudaPackages_10_2.cudaFlags.data.defaultGpus.*.dontDefaultAfter","text":"<p>The CUDA version after which to exclude this GPU from the list of default capabilities we build. null means we always include this GPU in the default capabilities if it is supported.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_2cudaflagsdatadefaultgpusisjetson","title":"cudaPackagesPackageSets.cudaPackages_10_2.cudaFlags.data.defaultGpus.*.isJetson","text":"<p>Whether a GPU is part of NVIDIA\u2019s line of Jetson embedded computers.</p> <p>This field is notable because it tells us what architecture to build for (as Jetson devices are aarch64). More on Jetson devices here: https://www.nvidia.com/en-us/autonomous-machines/embedded-systems/</p> <p>NOTE: These architectures are only built upon request.</p> <p>Type: one of true, false</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_2cudaflagsdatadefaultgpusmaxcudaversion","title":"cudaPackagesPackageSets.cudaPackages_10_2.cudaFlags.data.defaultGpus.*.maxCudaVersion","text":"<p>The maximum (exclusive) CUDA version that supports this GPU. null means there is no maximum.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_2cudaflagsdatadefaultgpusmincudaversion","title":"cudaPackagesPackageSets.cudaPackages_10_2.cudaFlags.data.defaultGpus.*.minCudaVersion","text":"<p>The minimum (inclusive) CUDA version that supports this GPU.</p> <p>Type: A version number with a major and minor component.</p> <p>Example: <code>\"10.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_2cudaflagsdatagencodeargs","title":"cudaPackagesPackageSets.cudaPackages_10_2.cudaFlags.data.gencodeArgs","text":"<p>The gencode arguments to pass to NVCC</p> <p>Type: list of A `gencode` argument for the `nvcc` compiler.</p> <p>Default:</p> <pre><code>[\n  \"-gencode=arch=compute_89,code=sm_89\"\n]\n</code></pre> <p>Example:</p> <pre><code>[\n  \"-gencode=arch=compute_75,code=sm_75\"\n  \"-gencode=arch=compute_86,code=sm_86\"\n  \"-gencode=arch=compute_86,code=compute_86\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_2cudaflagsdatagencodestring","title":"cudaPackagesPackageSets.cudaPackages_10_2.cudaFlags.data.gencodeString","text":"<p>A space-separated string of CUDA gencode arguments to pass to NVCC</p> <p>Type: string</p> <p>Default: <code>\"-gencode=arch=compute_89,code=sm_89\"</code></p> <p>Example: <code>\"-gencode=arch=compute_75,code=sm_75 ... -gencode=arch=compute_86,code=compute_86\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_2cudaflagsdataisjetsonbuild","title":"cudaPackagesPackageSets.cudaPackages_10_2.cudaFlags.data.isJetsonBuild","text":"<p>Whether the build is for a Jetson device.</p> <p>Jetson devices cannot be targeted by the same binaries which target non-Jetson devices. While NVIDIA provides both <code>linux-aarch64</code> and <code>linux-sbsa</code> packages, which both target <code>aarch64</code>, they are built with different settings and cannot be mixed.</p> <p>Type: boolean</p> <p>Default: <code>false</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_2cudaflagsdatarealarches","title":"cudaPackagesPackageSets.cudaPackages_10_2.cudaFlags.data.realArches","text":"<p>The physical architectures to build for</p> <p>Type: list of A real/physical CUDA architecture name.</p> <p>Default:</p> <pre><code>[\n  \"sm_89\"\n]\n</code></pre> <p>Example:</p> <pre><code>[\n  \"sm_75\"\n  \"sm_86\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_2cudaflagsdatasupportedcapabilities","title":"cudaPackagesPackageSets.cudaPackages_10_2.cudaFlags.data.supportedCapabilities","text":"<p>The compute capabilities supported by a given CUDA version</p> <p>Type: list of A CUDA capability version.</p> <p>Default:</p> <pre><code>[\n  \"3.0\"\n  \"3.2\"\n  \"3.5\"\n  \"3.7\"\n  \"5.0\"\n  \"5.2\"\n  \"5.3\"\n  \"6.0\"\n  \"6.1\"\n  \"6.2\"\n  \"7.0\"\n  \"7.2\"\n  \"7.5\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_2cudaflagsdatasupportedgpus","title":"cudaPackagesPackageSets.cudaPackages_10_2.cudaFlags.data.supportedGpus","text":"<p>The GPUs supported by a given CUDA version</p> <p>Type: list of (submodule)</p> <p>Default:</p> <pre><code>[\n  {\n    archName = \"Kepler\";\n    computeCapability = \"3.0\";\n    dontDefaultAfter = \"10.2\";\n    isJetson = false;\n    maxCudaVersion = \"10.2\";\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Kepler\";\n    computeCapability = \"3.2\";\n    dontDefaultAfter = \"10.2\";\n    isJetson = false;\n    maxCudaVersion = \"10.2\";\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Kepler\";\n    computeCapability = \"3.5\";\n    dontDefaultAfter = \"11.0\";\n    isJetson = false;\n    maxCudaVersion = \"11.8\";\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Kepler\";\n    computeCapability = \"3.7\";\n    dontDefaultAfter = \"11.0\";\n    isJetson = false;\n    maxCudaVersion = \"11.8\";\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Maxwell\";\n    computeCapability = \"5.0\";\n    dontDefaultAfter = \"11.0\";\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Maxwell\";\n    computeCapability = \"5.2\";\n    dontDefaultAfter = \"11.0\";\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Maxwell\";\n    computeCapability = \"5.3\";\n    dontDefaultAfter = null;\n    isJetson = true;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Pascal\";\n    computeCapability = \"6.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Pascal\";\n    computeCapability = \"6.1\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Pascal\";\n    computeCapability = \"6.2\";\n    dontDefaultAfter = null;\n    isJetson = true;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Volta\";\n    computeCapability = \"7.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Volta\";\n    computeCapability = \"7.2\";\n    dontDefaultAfter = null;\n    isJetson = true;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Turing\";\n    computeCapability = \"7.5\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_2cudaflagsdatasupportedgpusarchname","title":"cudaPackagesPackageSets.cudaPackages_10_2.cudaFlags.data.supportedGpus.*.archName","text":"<p>Name of the microarchitecture</p> <p>Type: A CUDA architecture name, like Ampere or Ada.</p> <p>Example: <code>\"Kepler\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_2cudaflagsdatasupportedgpuscomputecapability","title":"cudaPackagesPackageSets.cudaPackages_10_2.cudaFlags.data.supportedGpus.*.computeCapability","text":"<p>Compute capability of the GPU</p> <p>Type: A CUDA capability version.</p> <p>Example: <code>\"3.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_2cudaflagsdatasupportedgpusdontdefaultafter","title":"cudaPackagesPackageSets.cudaPackages_10_2.cudaFlags.data.supportedGpus.*.dontDefaultAfter","text":"<p>The CUDA version after which to exclude this GPU from the list of default capabilities we build. null means we always include this GPU in the default capabilities if it is supported.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_2cudaflagsdatasupportedgpusisjetson","title":"cudaPackagesPackageSets.cudaPackages_10_2.cudaFlags.data.supportedGpus.*.isJetson","text":"<p>Whether a GPU is part of NVIDIA\u2019s line of Jetson embedded computers.</p> <p>This field is notable because it tells us what architecture to build for (as Jetson devices are aarch64). More on Jetson devices here: https://www.nvidia.com/en-us/autonomous-machines/embedded-systems/</p> <p>NOTE: These architectures are only built upon request.</p> <p>Type: one of true, false</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_2cudaflagsdatasupportedgpusmaxcudaversion","title":"cudaPackagesPackageSets.cudaPackages_10_2.cudaFlags.data.supportedGpus.*.maxCudaVersion","text":"<p>The maximum (exclusive) CUDA version that supports this GPU. null means there is no maximum.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_2cudaflagsdatasupportedgpusmincudaversion","title":"cudaPackagesPackageSets.cudaPackages_10_2.cudaFlags.data.supportedGpus.*.minCudaVersion","text":"<p>The minimum (inclusive) CUDA version that supports this GPU.</p> <p>Type: A version number with a major and minor component.</p> <p>Example: <code>\"10.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_2cudaflagsdatavirtualarches","title":"cudaPackagesPackageSets.cudaPackages_10_2.cudaFlags.data.virtualArches","text":"<p>The virtual architectures to build for. These are typically used for forward compatibility, when trying to support an architecture newer than the CUDA version allows.</p> <p>Type: list of A virtual CUDA architecture name.</p> <p>Default:</p> <pre><code>[\n  \"compute_89\"\n]\n</code></pre> <p>Example:</p> <pre><code>[\n  \"compute_75\"\n  \"compute_86\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_2cudaflagsutilsarchmapper","title":"cudaPackagesPackageSets.cudaPackages_10_2.cudaFlags.utils.archMapper","text":"<p>Maps a feature across a list of compute capabilities to produce a list of architectures.</p> <p>For example, \u201csm\u201d and [ \u201c8.0\u201d \u201c8.6\u201d \u201c8.7\u201d ] yield [ \u201csm_80\u201d \u201csm_86\u201d \u201csm_87\u201d ].</p> <p>Type: function that evaluates to a(n) function that evaluates to a(n) list of string</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_2cudaflagsutilsdropdot","title":"cudaPackagesPackageSets.cudaPackages_10_2.cudaFlags.utils.dropDot","text":"<p>Drops dots from a string.</p> <p>Type: function that evaluates to a(n) string</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_2cudaflagsutilsgencodemapper","title":"cudaPackagesPackageSets.cudaPackages_10_2.cudaFlags.utils.gencodeMapper","text":"<p>Maps a feature across a list of compute capabilities to produce a list of gencode arguments.</p> <p>For example, \u201csm\u201d and [ \u201c8.0\u201d \u201c8.6\u201d \u201c8.7\u201d ] yield [ \u201c-gencode=arch=compute_80,code=sm_80\u201d \u201c-gencode=arch=compute_86,code=sm_86\u201d \u201c-gencode=arch=compute_87,code=sm_87\u201d ].</p> <p>Type: function that evaluates to a(n) function that evaluates to a(n) list of string</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_2cudaflagsutilsgetnixsystem","title":"cudaPackagesPackageSets.cudaPackages_10_2.cudaFlags.utils.getNixSystem","text":"<p>Maps NVIDIA redist arch to Nix system.</p> <p>NOTE: This function will be called by unsupported systems because <code>cudaPackages</code> is part of <code>all-packages.nix</code>, which is evaluated on all systems. As such, we need to handle unsupported systems gracefully.</p> <p>Type: function that evaluates to a(n) (one of \u201cunsupported\u201d, \u201caaarch64-linux\u201d, \u201cx86_64-linux\u201d, \u201cppc64le-linux\u201d, \u201cx86_64-windows\u201d)</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_2cudaflagsutilsgetredistarch","title":"cudaPackagesPackageSets.cudaPackages_10_2.cudaFlags.utils.getRedistArch","text":"<p>Maps Nix system to NVIDIA redist arch.</p> <p>NOTE: We swap out the default <code>linux-sbsa</code> redist (for server-grade ARM chips) with the <code>linux-aarch64</code> redist (which is for Jetson devices) if we\u2019re building any Jetson devices. Since both are based on aarch64, we can only have one or the other, otherwise there\u2019s an ambiguity as to which should be used.</p> <p>NOTE: This function will be called by unsupported systems because <code>cudaPackages</code> is part of <code>all-packages.nix</code>, which is evaluated on all systems. As such, we need to handle unsupported systems gracefully.</p> <p>Type: function that evaluates to a(n) (one of \u201cunsupported\u201d, \u201clinux-aarch64\u201d, \u201clinux-sbsa\u201d, \u201clinux-x86_64\u201d, \u201clinux-ppc64le\u201d, \u201cwindows-x86_64\u201d)</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_2cudaflagsutilsisdefault","title":"cudaPackagesPackageSets.cudaPackages_10_2.cudaFlags.utils.isDefault","text":"<p>Whether a GPU is included in the default capabilities</p> <p>Type: function that evaluates to a(n) boolean</p> <p>Default: <code>&lt;function, args: {dontDefaultAfter, isJetson}&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_2cudaflagsutilsissupported","title":"cudaPackagesPackageSets.cudaPackages_10_2.cudaFlags.utils.isSupported","text":"<p>Whether a CUDA version supports a given GPU</p> <p>Type: function that evaluates to a(n) boolean</p> <p>Default: <code>&lt;function, args: {maxCudaVersion, minCudaVersion}&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_2cudamajorminorversion","title":"cudaPackagesPackageSets.cudaPackages_10_2.cudaMajorMinorVersion","text":"<p>The major and minor version of the CUDA package set</p> <p>Type: string</p> <p>Default: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_2cudamajorversion","title":"cudaPackagesPackageSets.cudaPackages_10_2.cudaMajorVersion","text":"<p>The major version of the CUDA package set</p> <p>Type: string</p> <p>Default: <code>\"10\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_2cudanewer","title":"cudaPackagesPackageSets.cudaPackages_10_2.cudaNewer","text":"<p>A utility to check if the CUDA version is newer than a given version</p> <p>Type: function that evaluates to a(n) boolean</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_2cudaolder","title":"cudaPackagesPackageSets.cudaPackages_10_2.cudaOlder","text":"<p>A utility to check if the CUDA version is older than a given version</p> <p>Type: function that evaluates to a(n) boolean</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_10_2cudaversion","title":"cudaPackagesPackageSets.cudaPackages_10_2.cudaVersion","text":"<p>The CUDA version of the package set</p> <p>Type: A version number with a major and minor component.</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_0","title":"cudaPackagesPackageSets.cudaPackages_11_0","text":"<p>A CUDA package set for a particular version of CUDA</p> <p>Type: submodule</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules</p>"},{"location":"#cudapackagespackagesetscudapackages_11_0cudaatleast","title":"cudaPackagesPackageSets.cudaPackages_11_0.cudaAtLeast","text":"<p>A utility to check if the CUDA version is at least a given version</p> <p>Type: function that evaluates to a(n) boolean</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_0cudaatmost","title":"cudaPackagesPackageSets.cudaPackages_11_0.cudaAtMost","text":"<p>A utility to check if the CUDA version is at most a given version</p> <p>Type: function that evaluates to a(n) boolean</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_0cudaflagsdataarchnames","title":"cudaPackagesPackageSets.cudaPackages_11_0.cudaFlags.data.archNames","text":"<p>The names of the architectures to build for</p> <p>Type: list of string</p> <p>Default: <code>[ ]</code></p> <p>Example:</p> <pre><code>[\n  \"Turing\"\n  \"Ampere\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_0cudaflagsdataarches","title":"cudaPackagesPackageSets.cudaPackages_11_0.cudaFlags.data.arches","text":"<p>The architectures to build for. Includes a virtual architecture if forward compatibility is enabled.</p> <p>Type: list of (A real/physical CUDA architecture name. or A virtual CUDA architecture name.)</p> <p>Default:</p> <pre><code>[\n  \"sm_89\"\n]\n</code></pre> <p>Example:</p> <pre><code>[\n  \"sm_75\"\n  \"sm_86\"\n  \"compute_86\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_0cudaflagsdatacudacapabilities","title":"cudaPackagesPackageSets.cudaPackages_11_0.cudaFlags.data.cudaCapabilities","text":"<p>CUDA capabilities (hardware generations) to build for</p> <p>Type: list of A CUDA capability version.</p> <p>Default:</p> <pre><code>[\n  \"8.9\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_0cudaflagsdatacudaforwardcompat","title":"cudaPackagesPackageSets.cudaPackages_11_0.cudaFlags.data.cudaForwardCompat","text":"<p>Build with forward compatibility gencode (+PTX) to support future GPU generations</p> <p>Type: boolean</p> <p>Default: <code>false</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_0cudaflagsdatacudagpus","title":"cudaPackagesPackageSets.cudaPackages_11_0.cudaFlags.data.cudaGpus","text":"<p>CUDA GPUs to build for</p> <p>Type: list of (submodule)</p> <p>Default: <code>[ ]</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_0cudaflagsdatacudagpusarchname","title":"cudaPackagesPackageSets.cudaPackages_11_0.cudaFlags.data.cudaGpus.*.archName","text":"<p>Name of the microarchitecture</p> <p>Type: A CUDA architecture name, like Ampere or Ada.</p> <p>Example: <code>\"Kepler\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_0cudaflagsdatacudagpuscomputecapability","title":"cudaPackagesPackageSets.cudaPackages_11_0.cudaFlags.data.cudaGpus.*.computeCapability","text":"<p>Compute capability of the GPU</p> <p>Type: A CUDA capability version.</p> <p>Example: <code>\"3.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_0cudaflagsdatacudagpusdontdefaultafter","title":"cudaPackagesPackageSets.cudaPackages_11_0.cudaFlags.data.cudaGpus.*.dontDefaultAfter","text":"<p>The CUDA version after which to exclude this GPU from the list of default capabilities we build. null means we always include this GPU in the default capabilities if it is supported.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_0cudaflagsdatacudagpusisjetson","title":"cudaPackagesPackageSets.cudaPackages_11_0.cudaFlags.data.cudaGpus.*.isJetson","text":"<p>Whether a GPU is part of NVIDIA\u2019s line of Jetson embedded computers.</p> <p>This field is notable because it tells us what architecture to build for (as Jetson devices are aarch64). More on Jetson devices here: https://www.nvidia.com/en-us/autonomous-machines/embedded-systems/</p> <p>NOTE: These architectures are only built upon request.</p> <p>Type: one of true, false</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_0cudaflagsdatacudagpusmaxcudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_0.cudaFlags.data.cudaGpus.*.maxCudaVersion","text":"<p>The maximum (exclusive) CUDA version that supports this GPU. null means there is no maximum.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_0cudaflagsdatacudagpusmincudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_0.cudaFlags.data.cudaGpus.*.minCudaVersion","text":"<p>The minimum (inclusive) CUDA version that supports this GPU.</p> <p>Type: A version number with a major and minor component.</p> <p>Example: <code>\"10.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_0cudaflagsdatacudajetsongpus","title":"cudaPackagesPackageSets.cudaPackages_11_0.cudaFlags.data.cudaJetsonGpus","text":"<p>CUDA GPUs to build for, including only Jetson devices</p> <p>Type: list of (submodule)</p> <p>Default: <code>[ ]</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_0cudaflagsdatacudajetsongpusarchname","title":"cudaPackagesPackageSets.cudaPackages_11_0.cudaFlags.data.cudaJetsonGpus.*.archName","text":"<p>Name of the microarchitecture</p> <p>Type: A CUDA architecture name, like Ampere or Ada.</p> <p>Example: <code>\"Kepler\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_0cudaflagsdatacudajetsongpuscomputecapability","title":"cudaPackagesPackageSets.cudaPackages_11_0.cudaFlags.data.cudaJetsonGpus.*.computeCapability","text":"<p>Compute capability of the GPU</p> <p>Type: A CUDA capability version.</p> <p>Example: <code>\"3.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_0cudaflagsdatacudajetsongpusdontdefaultafter","title":"cudaPackagesPackageSets.cudaPackages_11_0.cudaFlags.data.cudaJetsonGpus.*.dontDefaultAfter","text":"<p>The CUDA version after which to exclude this GPU from the list of default capabilities we build. null means we always include this GPU in the default capabilities if it is supported.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_0cudaflagsdatacudajetsongpusisjetson","title":"cudaPackagesPackageSets.cudaPackages_11_0.cudaFlags.data.cudaJetsonGpus.*.isJetson","text":"<p>Whether a GPU is part of NVIDIA\u2019s line of Jetson embedded computers.</p> <p>This field is notable because it tells us what architecture to build for (as Jetson devices are aarch64). More on Jetson devices here: https://www.nvidia.com/en-us/autonomous-machines/embedded-systems/</p> <p>NOTE: These architectures are only built upon request.</p> <p>Type: one of true, false</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_0cudaflagsdatacudajetsongpusmaxcudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_0.cudaFlags.data.cudaJetsonGpus.*.maxCudaVersion","text":"<p>The maximum (exclusive) CUDA version that supports this GPU. null means there is no maximum.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_0cudaflagsdatacudajetsongpusmincudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_0.cudaFlags.data.cudaJetsonGpus.*.minCudaVersion","text":"<p>The minimum (inclusive) CUDA version that supports this GPU.</p> <p>Type: A version number with a major and minor component.</p> <p>Example: <code>\"10.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_0cudaflagsdatacudanonjetsongpus","title":"cudaPackagesPackageSets.cudaPackages_11_0.cudaFlags.data.cudaNonJetsonGpus","text":"<p>CUDA GPUs to build for, excluding Jetson devices</p> <p>Type: list of (submodule)</p> <p>Default: <code>[ ]</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_0cudaflagsdatacudanonjetsongpusarchname","title":"cudaPackagesPackageSets.cudaPackages_11_0.cudaFlags.data.cudaNonJetsonGpus.*.archName","text":"<p>Name of the microarchitecture</p> <p>Type: A CUDA architecture name, like Ampere or Ada.</p> <p>Example: <code>\"Kepler\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_0cudaflagsdatacudanonjetsongpuscomputecapability","title":"cudaPackagesPackageSets.cudaPackages_11_0.cudaFlags.data.cudaNonJetsonGpus.*.computeCapability","text":"<p>Compute capability of the GPU</p> <p>Type: A CUDA capability version.</p> <p>Example: <code>\"3.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_0cudaflagsdatacudanonjetsongpusdontdefaultafter","title":"cudaPackagesPackageSets.cudaPackages_11_0.cudaFlags.data.cudaNonJetsonGpus.*.dontDefaultAfter","text":"<p>The CUDA version after which to exclude this GPU from the list of default capabilities we build. null means we always include this GPU in the default capabilities if it is supported.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_0cudaflagsdatacudanonjetsongpusisjetson","title":"cudaPackagesPackageSets.cudaPackages_11_0.cudaFlags.data.cudaNonJetsonGpus.*.isJetson","text":"<p>Whether a GPU is part of NVIDIA\u2019s line of Jetson embedded computers.</p> <p>This field is notable because it tells us what architecture to build for (as Jetson devices are aarch64). More on Jetson devices here: https://www.nvidia.com/en-us/autonomous-machines/embedded-systems/</p> <p>NOTE: These architectures are only built upon request.</p> <p>Type: one of false, true</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_0cudaflagsdatacudanonjetsongpusmaxcudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_0.cudaFlags.data.cudaNonJetsonGpus.*.maxCudaVersion","text":"<p>The maximum (exclusive) CUDA version that supports this GPU. null means there is no maximum.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_0cudaflagsdatacudanonjetsongpusmincudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_0.cudaFlags.data.cudaNonJetsonGpus.*.minCudaVersion","text":"<p>The minimum (inclusive) CUDA version that supports this GPU.</p> <p>Type: A version number with a major and minor component.</p> <p>Example: <code>\"10.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_0cudaflagsdatacudasupport","title":"cudaPackagesPackageSets.cudaPackages_11_0.cudaFlags.data.cudaSupport","text":"<p>Build packages with CUDA support</p> <p>Type: boolean</p> <p>Default: <code>true</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_0cudaflagsdatadefaultcapabilities","title":"cudaPackagesPackageSets.cudaPackages_11_0.cudaFlags.data.defaultCapabilities","text":"<p>The default compute capabilities for a given CUDA version</p> <p>Type: list of A CUDA capability version.</p> <p>Default:</p> <pre><code>[\n  \"3.5\"\n  \"3.7\"\n  \"5.0\"\n  \"5.2\"\n  \"6.0\"\n  \"6.1\"\n  \"7.0\"\n  \"7.5\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_0cudaflagsdatadefaultgpus","title":"cudaPackagesPackageSets.cudaPackages_11_0.cudaFlags.data.defaultGpus","text":"<p>The default GPUs for a given CUDA version</p> <p>Type: list of (submodule)</p> <p>Default:</p> <pre><code>[\n  {\n    archName = \"Kepler\";\n    computeCapability = \"3.5\";\n    dontDefaultAfter = \"11.0\";\n    isJetson = false;\n    maxCudaVersion = \"11.8\";\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Kepler\";\n    computeCapability = \"3.7\";\n    dontDefaultAfter = \"11.0\";\n    isJetson = false;\n    maxCudaVersion = \"11.8\";\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Maxwell\";\n    computeCapability = \"5.0\";\n    dontDefaultAfter = \"11.0\";\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Maxwell\";\n    computeCapability = \"5.2\";\n    dontDefaultAfter = \"11.0\";\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Pascal\";\n    computeCapability = \"6.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Pascal\";\n    computeCapability = \"6.1\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Volta\";\n    computeCapability = \"7.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Turing\";\n    computeCapability = \"7.5\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_0cudaflagsdatadefaultgpusarchname","title":"cudaPackagesPackageSets.cudaPackages_11_0.cudaFlags.data.defaultGpus.*.archName","text":"<p>Name of the microarchitecture</p> <p>Type: A CUDA architecture name, like Ampere or Ada.</p> <p>Example: <code>\"Kepler\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_0cudaflagsdatadefaultgpuscomputecapability","title":"cudaPackagesPackageSets.cudaPackages_11_0.cudaFlags.data.defaultGpus.*.computeCapability","text":"<p>Compute capability of the GPU</p> <p>Type: A CUDA capability version.</p> <p>Example: <code>\"3.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_0cudaflagsdatadefaultgpusdontdefaultafter","title":"cudaPackagesPackageSets.cudaPackages_11_0.cudaFlags.data.defaultGpus.*.dontDefaultAfter","text":"<p>The CUDA version after which to exclude this GPU from the list of default capabilities we build. null means we always include this GPU in the default capabilities if it is supported.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_0cudaflagsdatadefaultgpusisjetson","title":"cudaPackagesPackageSets.cudaPackages_11_0.cudaFlags.data.defaultGpus.*.isJetson","text":"<p>Whether a GPU is part of NVIDIA\u2019s line of Jetson embedded computers.</p> <p>This field is notable because it tells us what architecture to build for (as Jetson devices are aarch64). More on Jetson devices here: https://www.nvidia.com/en-us/autonomous-machines/embedded-systems/</p> <p>NOTE: These architectures are only built upon request.</p> <p>Type: one of true, false</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_0cudaflagsdatadefaultgpusmaxcudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_0.cudaFlags.data.defaultGpus.*.maxCudaVersion","text":"<p>The maximum (exclusive) CUDA version that supports this GPU. null means there is no maximum.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_0cudaflagsdatadefaultgpusmincudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_0.cudaFlags.data.defaultGpus.*.minCudaVersion","text":"<p>The minimum (inclusive) CUDA version that supports this GPU.</p> <p>Type: A version number with a major and minor component.</p> <p>Example: <code>\"10.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_0cudaflagsdatagencodeargs","title":"cudaPackagesPackageSets.cudaPackages_11_0.cudaFlags.data.gencodeArgs","text":"<p>The gencode arguments to pass to NVCC</p> <p>Type: list of A `gencode` argument for the `nvcc` compiler.</p> <p>Default:</p> <pre><code>[\n  \"-gencode=arch=compute_89,code=sm_89\"\n]\n</code></pre> <p>Example:</p> <pre><code>[\n  \"-gencode=arch=compute_75,code=sm_75\"\n  \"-gencode=arch=compute_86,code=sm_86\"\n  \"-gencode=arch=compute_86,code=compute_86\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_0cudaflagsdatagencodestring","title":"cudaPackagesPackageSets.cudaPackages_11_0.cudaFlags.data.gencodeString","text":"<p>A space-separated string of CUDA gencode arguments to pass to NVCC</p> <p>Type: string</p> <p>Default: <code>\"-gencode=arch=compute_89,code=sm_89\"</code></p> <p>Example: <code>\"-gencode=arch=compute_75,code=sm_75 ... -gencode=arch=compute_86,code=compute_86\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_0cudaflagsdataisjetsonbuild","title":"cudaPackagesPackageSets.cudaPackages_11_0.cudaFlags.data.isJetsonBuild","text":"<p>Whether the build is for a Jetson device.</p> <p>Jetson devices cannot be targeted by the same binaries which target non-Jetson devices. While NVIDIA provides both <code>linux-aarch64</code> and <code>linux-sbsa</code> packages, which both target <code>aarch64</code>, they are built with different settings and cannot be mixed.</p> <p>Type: boolean</p> <p>Default: <code>false</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_0cudaflagsdatarealarches","title":"cudaPackagesPackageSets.cudaPackages_11_0.cudaFlags.data.realArches","text":"<p>The physical architectures to build for</p> <p>Type: list of A real/physical CUDA architecture name.</p> <p>Default:</p> <pre><code>[\n  \"sm_89\"\n]\n</code></pre> <p>Example:</p> <pre><code>[\n  \"sm_75\"\n  \"sm_86\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_0cudaflagsdatasupportedcapabilities","title":"cudaPackagesPackageSets.cudaPackages_11_0.cudaFlags.data.supportedCapabilities","text":"<p>The compute capabilities supported by a given CUDA version</p> <p>Type: list of A CUDA capability version.</p> <p>Default:</p> <pre><code>[\n  \"3.5\"\n  \"3.7\"\n  \"5.0\"\n  \"5.2\"\n  \"5.3\"\n  \"6.0\"\n  \"6.1\"\n  \"6.2\"\n  \"7.0\"\n  \"7.2\"\n  \"7.5\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_0cudaflagsdatasupportedgpus","title":"cudaPackagesPackageSets.cudaPackages_11_0.cudaFlags.data.supportedGpus","text":"<p>The GPUs supported by a given CUDA version</p> <p>Type: list of (submodule)</p> <p>Default:</p> <pre><code>[\n  {\n    archName = \"Kepler\";\n    computeCapability = \"3.5\";\n    dontDefaultAfter = \"11.0\";\n    isJetson = false;\n    maxCudaVersion = \"11.8\";\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Kepler\";\n    computeCapability = \"3.7\";\n    dontDefaultAfter = \"11.0\";\n    isJetson = false;\n    maxCudaVersion = \"11.8\";\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Maxwell\";\n    computeCapability = \"5.0\";\n    dontDefaultAfter = \"11.0\";\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Maxwell\";\n    computeCapability = \"5.2\";\n    dontDefaultAfter = \"11.0\";\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Maxwell\";\n    computeCapability = \"5.3\";\n    dontDefaultAfter = null;\n    isJetson = true;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Pascal\";\n    computeCapability = \"6.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Pascal\";\n    computeCapability = \"6.1\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Pascal\";\n    computeCapability = \"6.2\";\n    dontDefaultAfter = null;\n    isJetson = true;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Volta\";\n    computeCapability = \"7.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Volta\";\n    computeCapability = \"7.2\";\n    dontDefaultAfter = null;\n    isJetson = true;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Turing\";\n    computeCapability = \"7.5\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_0cudaflagsdatasupportedgpusarchname","title":"cudaPackagesPackageSets.cudaPackages_11_0.cudaFlags.data.supportedGpus.*.archName","text":"<p>Name of the microarchitecture</p> <p>Type: A CUDA architecture name, like Ampere or Ada.</p> <p>Example: <code>\"Kepler\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_0cudaflagsdatasupportedgpuscomputecapability","title":"cudaPackagesPackageSets.cudaPackages_11_0.cudaFlags.data.supportedGpus.*.computeCapability","text":"<p>Compute capability of the GPU</p> <p>Type: A CUDA capability version.</p> <p>Example: <code>\"3.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_0cudaflagsdatasupportedgpusdontdefaultafter","title":"cudaPackagesPackageSets.cudaPackages_11_0.cudaFlags.data.supportedGpus.*.dontDefaultAfter","text":"<p>The CUDA version after which to exclude this GPU from the list of default capabilities we build. null means we always include this GPU in the default capabilities if it is supported.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_0cudaflagsdatasupportedgpusisjetson","title":"cudaPackagesPackageSets.cudaPackages_11_0.cudaFlags.data.supportedGpus.*.isJetson","text":"<p>Whether a GPU is part of NVIDIA\u2019s line of Jetson embedded computers.</p> <p>This field is notable because it tells us what architecture to build for (as Jetson devices are aarch64). More on Jetson devices here: https://www.nvidia.com/en-us/autonomous-machines/embedded-systems/</p> <p>NOTE: These architectures are only built upon request.</p> <p>Type: one of true, false</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_0cudaflagsdatasupportedgpusmaxcudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_0.cudaFlags.data.supportedGpus.*.maxCudaVersion","text":"<p>The maximum (exclusive) CUDA version that supports this GPU. null means there is no maximum.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_0cudaflagsdatasupportedgpusmincudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_0.cudaFlags.data.supportedGpus.*.minCudaVersion","text":"<p>The minimum (inclusive) CUDA version that supports this GPU.</p> <p>Type: A version number with a major and minor component.</p> <p>Example: <code>\"10.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_0cudaflagsdatavirtualarches","title":"cudaPackagesPackageSets.cudaPackages_11_0.cudaFlags.data.virtualArches","text":"<p>The virtual architectures to build for. These are typically used for forward compatibility, when trying to support an architecture newer than the CUDA version allows.</p> <p>Type: list of A virtual CUDA architecture name.</p> <p>Default:</p> <pre><code>[\n  \"compute_89\"\n]\n</code></pre> <p>Example:</p> <pre><code>[\n  \"compute_75\"\n  \"compute_86\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_0cudaflagsutilsarchmapper","title":"cudaPackagesPackageSets.cudaPackages_11_0.cudaFlags.utils.archMapper","text":"<p>Maps a feature across a list of compute capabilities to produce a list of architectures.</p> <p>For example, \u201csm\u201d and [ \u201c8.0\u201d \u201c8.6\u201d \u201c8.7\u201d ] yield [ \u201csm_80\u201d \u201csm_86\u201d \u201csm_87\u201d ].</p> <p>Type: function that evaluates to a(n) function that evaluates to a(n) list of string</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_0cudaflagsutilsdropdot","title":"cudaPackagesPackageSets.cudaPackages_11_0.cudaFlags.utils.dropDot","text":"<p>Drops dots from a string.</p> <p>Type: function that evaluates to a(n) string</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_0cudaflagsutilsgencodemapper","title":"cudaPackagesPackageSets.cudaPackages_11_0.cudaFlags.utils.gencodeMapper","text":"<p>Maps a feature across a list of compute capabilities to produce a list of gencode arguments.</p> <p>For example, \u201csm\u201d and [ \u201c8.0\u201d \u201c8.6\u201d \u201c8.7\u201d ] yield [ \u201c-gencode=arch=compute_80,code=sm_80\u201d \u201c-gencode=arch=compute_86,code=sm_86\u201d \u201c-gencode=arch=compute_87,code=sm_87\u201d ].</p> <p>Type: function that evaluates to a(n) function that evaluates to a(n) list of string</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_0cudaflagsutilsgetnixsystem","title":"cudaPackagesPackageSets.cudaPackages_11_0.cudaFlags.utils.getNixSystem","text":"<p>Maps NVIDIA redist arch to Nix system.</p> <p>NOTE: This function will be called by unsupported systems because <code>cudaPackages</code> is part of <code>all-packages.nix</code>, which is evaluated on all systems. As such, we need to handle unsupported systems gracefully.</p> <p>Type: function that evaluates to a(n) (one of \u201cunsupported\u201d, \u201caaarch64-linux\u201d, \u201cx86_64-linux\u201d, \u201cppc64le-linux\u201d, \u201cx86_64-windows\u201d)</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_0cudaflagsutilsgetredistarch","title":"cudaPackagesPackageSets.cudaPackages_11_0.cudaFlags.utils.getRedistArch","text":"<p>Maps Nix system to NVIDIA redist arch.</p> <p>NOTE: We swap out the default <code>linux-sbsa</code> redist (for server-grade ARM chips) with the <code>linux-aarch64</code> redist (which is for Jetson devices) if we\u2019re building any Jetson devices. Since both are based on aarch64, we can only have one or the other, otherwise there\u2019s an ambiguity as to which should be used.</p> <p>NOTE: This function will be called by unsupported systems because <code>cudaPackages</code> is part of <code>all-packages.nix</code>, which is evaluated on all systems. As such, we need to handle unsupported systems gracefully.</p> <p>Type: function that evaluates to a(n) (one of \u201cunsupported\u201d, \u201clinux-aarch64\u201d, \u201clinux-sbsa\u201d, \u201clinux-x86_64\u201d, \u201clinux-ppc64le\u201d, \u201cwindows-x86_64\u201d)</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_0cudaflagsutilsisdefault","title":"cudaPackagesPackageSets.cudaPackages_11_0.cudaFlags.utils.isDefault","text":"<p>Whether a GPU is included in the default capabilities</p> <p>Type: function that evaluates to a(n) boolean</p> <p>Default: <code>&lt;function, args: {dontDefaultAfter, isJetson}&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_0cudaflagsutilsissupported","title":"cudaPackagesPackageSets.cudaPackages_11_0.cudaFlags.utils.isSupported","text":"<p>Whether a CUDA version supports a given GPU</p> <p>Type: function that evaluates to a(n) boolean</p> <p>Default: <code>&lt;function, args: {maxCudaVersion, minCudaVersion}&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_0cudamajorminorversion","title":"cudaPackagesPackageSets.cudaPackages_11_0.cudaMajorMinorVersion","text":"<p>The major and minor version of the CUDA package set</p> <p>Type: string</p> <p>Default: <code>\"11.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_0cudamajorversion","title":"cudaPackagesPackageSets.cudaPackages_11_0.cudaMajorVersion","text":"<p>The major version of the CUDA package set</p> <p>Type: string</p> <p>Default: <code>\"11\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_0cudanewer","title":"cudaPackagesPackageSets.cudaPackages_11_0.cudaNewer","text":"<p>A utility to check if the CUDA version is newer than a given version</p> <p>Type: function that evaluates to a(n) boolean</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_0cudaolder","title":"cudaPackagesPackageSets.cudaPackages_11_0.cudaOlder","text":"<p>A utility to check if the CUDA version is older than a given version</p> <p>Type: function that evaluates to a(n) boolean</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_0cudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_0.cudaVersion","text":"<p>The CUDA version of the package set</p> <p>Type: A version number with a major and minor component.</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_1","title":"cudaPackagesPackageSets.cudaPackages_11_1","text":"<p>A CUDA package set for a particular version of CUDA</p> <p>Type: submodule</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules</p>"},{"location":"#cudapackagespackagesetscudapackages_11_1cudaatleast","title":"cudaPackagesPackageSets.cudaPackages_11_1.cudaAtLeast","text":"<p>A utility to check if the CUDA version is at least a given version</p> <p>Type: function that evaluates to a(n) boolean</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_1cudaatmost","title":"cudaPackagesPackageSets.cudaPackages_11_1.cudaAtMost","text":"<p>A utility to check if the CUDA version is at most a given version</p> <p>Type: function that evaluates to a(n) boolean</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_1cudaflagsdataarchnames","title":"cudaPackagesPackageSets.cudaPackages_11_1.cudaFlags.data.archNames","text":"<p>The names of the architectures to build for</p> <p>Type: list of string</p> <p>Default: <code>[ ]</code></p> <p>Example:</p> <pre><code>[\n  \"Turing\"\n  \"Ampere\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_1cudaflagsdataarches","title":"cudaPackagesPackageSets.cudaPackages_11_1.cudaFlags.data.arches","text":"<p>The architectures to build for. Includes a virtual architecture if forward compatibility is enabled.</p> <p>Type: list of (A real/physical CUDA architecture name. or A virtual CUDA architecture name.)</p> <p>Default:</p> <pre><code>[\n  \"sm_89\"\n]\n</code></pre> <p>Example:</p> <pre><code>[\n  \"sm_75\"\n  \"sm_86\"\n  \"compute_86\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_1cudaflagsdatacudacapabilities","title":"cudaPackagesPackageSets.cudaPackages_11_1.cudaFlags.data.cudaCapabilities","text":"<p>CUDA capabilities (hardware generations) to build for</p> <p>Type: list of A CUDA capability version.</p> <p>Default:</p> <pre><code>[\n  \"8.9\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_1cudaflagsdatacudaforwardcompat","title":"cudaPackagesPackageSets.cudaPackages_11_1.cudaFlags.data.cudaForwardCompat","text":"<p>Build with forward compatibility gencode (+PTX) to support future GPU generations</p> <p>Type: boolean</p> <p>Default: <code>false</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_1cudaflagsdatacudagpus","title":"cudaPackagesPackageSets.cudaPackages_11_1.cudaFlags.data.cudaGpus","text":"<p>CUDA GPUs to build for</p> <p>Type: list of (submodule)</p> <p>Default: <code>[ ]</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_1cudaflagsdatacudagpusarchname","title":"cudaPackagesPackageSets.cudaPackages_11_1.cudaFlags.data.cudaGpus.*.archName","text":"<p>Name of the microarchitecture</p> <p>Type: A CUDA architecture name, like Ampere or Ada.</p> <p>Example: <code>\"Kepler\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_1cudaflagsdatacudagpuscomputecapability","title":"cudaPackagesPackageSets.cudaPackages_11_1.cudaFlags.data.cudaGpus.*.computeCapability","text":"<p>Compute capability of the GPU</p> <p>Type: A CUDA capability version.</p> <p>Example: <code>\"3.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_1cudaflagsdatacudagpusdontdefaultafter","title":"cudaPackagesPackageSets.cudaPackages_11_1.cudaFlags.data.cudaGpus.*.dontDefaultAfter","text":"<p>The CUDA version after which to exclude this GPU from the list of default capabilities we build. null means we always include this GPU in the default capabilities if it is supported.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_1cudaflagsdatacudagpusisjetson","title":"cudaPackagesPackageSets.cudaPackages_11_1.cudaFlags.data.cudaGpus.*.isJetson","text":"<p>Whether a GPU is part of NVIDIA\u2019s line of Jetson embedded computers.</p> <p>This field is notable because it tells us what architecture to build for (as Jetson devices are aarch64). More on Jetson devices here: https://www.nvidia.com/en-us/autonomous-machines/embedded-systems/</p> <p>NOTE: These architectures are only built upon request.</p> <p>Type: one of true, false</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_1cudaflagsdatacudagpusmaxcudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_1.cudaFlags.data.cudaGpus.*.maxCudaVersion","text":"<p>The maximum (exclusive) CUDA version that supports this GPU. null means there is no maximum.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_1cudaflagsdatacudagpusmincudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_1.cudaFlags.data.cudaGpus.*.minCudaVersion","text":"<p>The minimum (inclusive) CUDA version that supports this GPU.</p> <p>Type: A version number with a major and minor component.</p> <p>Example: <code>\"10.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_1cudaflagsdatacudajetsongpus","title":"cudaPackagesPackageSets.cudaPackages_11_1.cudaFlags.data.cudaJetsonGpus","text":"<p>CUDA GPUs to build for, including only Jetson devices</p> <p>Type: list of (submodule)</p> <p>Default: <code>[ ]</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_1cudaflagsdatacudajetsongpusarchname","title":"cudaPackagesPackageSets.cudaPackages_11_1.cudaFlags.data.cudaJetsonGpus.*.archName","text":"<p>Name of the microarchitecture</p> <p>Type: A CUDA architecture name, like Ampere or Ada.</p> <p>Example: <code>\"Kepler\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_1cudaflagsdatacudajetsongpuscomputecapability","title":"cudaPackagesPackageSets.cudaPackages_11_1.cudaFlags.data.cudaJetsonGpus.*.computeCapability","text":"<p>Compute capability of the GPU</p> <p>Type: A CUDA capability version.</p> <p>Example: <code>\"3.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_1cudaflagsdatacudajetsongpusdontdefaultafter","title":"cudaPackagesPackageSets.cudaPackages_11_1.cudaFlags.data.cudaJetsonGpus.*.dontDefaultAfter","text":"<p>The CUDA version after which to exclude this GPU from the list of default capabilities we build. null means we always include this GPU in the default capabilities if it is supported.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_1cudaflagsdatacudajetsongpusisjetson","title":"cudaPackagesPackageSets.cudaPackages_11_1.cudaFlags.data.cudaJetsonGpus.*.isJetson","text":"<p>Whether a GPU is part of NVIDIA\u2019s line of Jetson embedded computers.</p> <p>This field is notable because it tells us what architecture to build for (as Jetson devices are aarch64). More on Jetson devices here: https://www.nvidia.com/en-us/autonomous-machines/embedded-systems/</p> <p>NOTE: These architectures are only built upon request.</p> <p>Type: one of true, false</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_1cudaflagsdatacudajetsongpusmaxcudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_1.cudaFlags.data.cudaJetsonGpus.*.maxCudaVersion","text":"<p>The maximum (exclusive) CUDA version that supports this GPU. null means there is no maximum.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_1cudaflagsdatacudajetsongpusmincudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_1.cudaFlags.data.cudaJetsonGpus.*.minCudaVersion","text":"<p>The minimum (inclusive) CUDA version that supports this GPU.</p> <p>Type: A version number with a major and minor component.</p> <p>Example: <code>\"10.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_1cudaflagsdatacudanonjetsongpus","title":"cudaPackagesPackageSets.cudaPackages_11_1.cudaFlags.data.cudaNonJetsonGpus","text":"<p>CUDA GPUs to build for, excluding Jetson devices</p> <p>Type: list of (submodule)</p> <p>Default: <code>[ ]</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_1cudaflagsdatacudanonjetsongpusarchname","title":"cudaPackagesPackageSets.cudaPackages_11_1.cudaFlags.data.cudaNonJetsonGpus.*.archName","text":"<p>Name of the microarchitecture</p> <p>Type: A CUDA architecture name, like Ampere or Ada.</p> <p>Example: <code>\"Kepler\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_1cudaflagsdatacudanonjetsongpuscomputecapability","title":"cudaPackagesPackageSets.cudaPackages_11_1.cudaFlags.data.cudaNonJetsonGpus.*.computeCapability","text":"<p>Compute capability of the GPU</p> <p>Type: A CUDA capability version.</p> <p>Example: <code>\"3.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_1cudaflagsdatacudanonjetsongpusdontdefaultafter","title":"cudaPackagesPackageSets.cudaPackages_11_1.cudaFlags.data.cudaNonJetsonGpus.*.dontDefaultAfter","text":"<p>The CUDA version after which to exclude this GPU from the list of default capabilities we build. null means we always include this GPU in the default capabilities if it is supported.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_1cudaflagsdatacudanonjetsongpusisjetson","title":"cudaPackagesPackageSets.cudaPackages_11_1.cudaFlags.data.cudaNonJetsonGpus.*.isJetson","text":"<p>Whether a GPU is part of NVIDIA\u2019s line of Jetson embedded computers.</p> <p>This field is notable because it tells us what architecture to build for (as Jetson devices are aarch64). More on Jetson devices here: https://www.nvidia.com/en-us/autonomous-machines/embedded-systems/</p> <p>NOTE: These architectures are only built upon request.</p> <p>Type: one of false, true</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_1cudaflagsdatacudanonjetsongpusmaxcudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_1.cudaFlags.data.cudaNonJetsonGpus.*.maxCudaVersion","text":"<p>The maximum (exclusive) CUDA version that supports this GPU. null means there is no maximum.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_1cudaflagsdatacudanonjetsongpusmincudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_1.cudaFlags.data.cudaNonJetsonGpus.*.minCudaVersion","text":"<p>The minimum (inclusive) CUDA version that supports this GPU.</p> <p>Type: A version number with a major and minor component.</p> <p>Example: <code>\"10.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_1cudaflagsdatacudasupport","title":"cudaPackagesPackageSets.cudaPackages_11_1.cudaFlags.data.cudaSupport","text":"<p>Build packages with CUDA support</p> <p>Type: boolean</p> <p>Default: <code>true</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_1cudaflagsdatadefaultcapabilities","title":"cudaPackagesPackageSets.cudaPackages_11_1.cudaFlags.data.defaultCapabilities","text":"<p>The default compute capabilities for a given CUDA version</p> <p>Type: list of A CUDA capability version.</p> <p>Default:</p> <pre><code>[\n  \"6.0\"\n  \"6.1\"\n  \"7.0\"\n  \"7.5\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_1cudaflagsdatadefaultgpus","title":"cudaPackagesPackageSets.cudaPackages_11_1.cudaFlags.data.defaultGpus","text":"<p>The default GPUs for a given CUDA version</p> <p>Type: list of (submodule)</p> <p>Default:</p> <pre><code>[\n  {\n    archName = \"Pascal\";\n    computeCapability = \"6.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Pascal\";\n    computeCapability = \"6.1\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Volta\";\n    computeCapability = \"7.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Turing\";\n    computeCapability = \"7.5\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_1cudaflagsdatadefaultgpusarchname","title":"cudaPackagesPackageSets.cudaPackages_11_1.cudaFlags.data.defaultGpus.*.archName","text":"<p>Name of the microarchitecture</p> <p>Type: A CUDA architecture name, like Ampere or Ada.</p> <p>Example: <code>\"Kepler\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_1cudaflagsdatadefaultgpuscomputecapability","title":"cudaPackagesPackageSets.cudaPackages_11_1.cudaFlags.data.defaultGpus.*.computeCapability","text":"<p>Compute capability of the GPU</p> <p>Type: A CUDA capability version.</p> <p>Example: <code>\"3.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_1cudaflagsdatadefaultgpusdontdefaultafter","title":"cudaPackagesPackageSets.cudaPackages_11_1.cudaFlags.data.defaultGpus.*.dontDefaultAfter","text":"<p>The CUDA version after which to exclude this GPU from the list of default capabilities we build. null means we always include this GPU in the default capabilities if it is supported.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_1cudaflagsdatadefaultgpusisjetson","title":"cudaPackagesPackageSets.cudaPackages_11_1.cudaFlags.data.defaultGpus.*.isJetson","text":"<p>Whether a GPU is part of NVIDIA\u2019s line of Jetson embedded computers.</p> <p>This field is notable because it tells us what architecture to build for (as Jetson devices are aarch64). More on Jetson devices here: https://www.nvidia.com/en-us/autonomous-machines/embedded-systems/</p> <p>NOTE: These architectures are only built upon request.</p> <p>Type: one of true, false</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_1cudaflagsdatadefaultgpusmaxcudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_1.cudaFlags.data.defaultGpus.*.maxCudaVersion","text":"<p>The maximum (exclusive) CUDA version that supports this GPU. null means there is no maximum.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_1cudaflagsdatadefaultgpusmincudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_1.cudaFlags.data.defaultGpus.*.minCudaVersion","text":"<p>The minimum (inclusive) CUDA version that supports this GPU.</p> <p>Type: A version number with a major and minor component.</p> <p>Example: <code>\"10.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_1cudaflagsdatagencodeargs","title":"cudaPackagesPackageSets.cudaPackages_11_1.cudaFlags.data.gencodeArgs","text":"<p>The gencode arguments to pass to NVCC</p> <p>Type: list of A `gencode` argument for the `nvcc` compiler.</p> <p>Default:</p> <pre><code>[\n  \"-gencode=arch=compute_89,code=sm_89\"\n]\n</code></pre> <p>Example:</p> <pre><code>[\n  \"-gencode=arch=compute_75,code=sm_75\"\n  \"-gencode=arch=compute_86,code=sm_86\"\n  \"-gencode=arch=compute_86,code=compute_86\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_1cudaflagsdatagencodestring","title":"cudaPackagesPackageSets.cudaPackages_11_1.cudaFlags.data.gencodeString","text":"<p>A space-separated string of CUDA gencode arguments to pass to NVCC</p> <p>Type: string</p> <p>Default: <code>\"-gencode=arch=compute_89,code=sm_89\"</code></p> <p>Example: <code>\"-gencode=arch=compute_75,code=sm_75 ... -gencode=arch=compute_86,code=compute_86\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_1cudaflagsdataisjetsonbuild","title":"cudaPackagesPackageSets.cudaPackages_11_1.cudaFlags.data.isJetsonBuild","text":"<p>Whether the build is for a Jetson device.</p> <p>Jetson devices cannot be targeted by the same binaries which target non-Jetson devices. While NVIDIA provides both <code>linux-aarch64</code> and <code>linux-sbsa</code> packages, which both target <code>aarch64</code>, they are built with different settings and cannot be mixed.</p> <p>Type: boolean</p> <p>Default: <code>false</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_1cudaflagsdatarealarches","title":"cudaPackagesPackageSets.cudaPackages_11_1.cudaFlags.data.realArches","text":"<p>The physical architectures to build for</p> <p>Type: list of A real/physical CUDA architecture name.</p> <p>Default:</p> <pre><code>[\n  \"sm_89\"\n]\n</code></pre> <p>Example:</p> <pre><code>[\n  \"sm_75\"\n  \"sm_86\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_1cudaflagsdatasupportedcapabilities","title":"cudaPackagesPackageSets.cudaPackages_11_1.cudaFlags.data.supportedCapabilities","text":"<p>The compute capabilities supported by a given CUDA version</p> <p>Type: list of A CUDA capability version.</p> <p>Default:</p> <pre><code>[\n  \"3.5\"\n  \"3.7\"\n  \"5.0\"\n  \"5.2\"\n  \"5.3\"\n  \"6.0\"\n  \"6.1\"\n  \"6.2\"\n  \"7.0\"\n  \"7.2\"\n  \"7.5\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_1cudaflagsdatasupportedgpus","title":"cudaPackagesPackageSets.cudaPackages_11_1.cudaFlags.data.supportedGpus","text":"<p>The GPUs supported by a given CUDA version</p> <p>Type: list of (submodule)</p> <p>Default:</p> <pre><code>[\n  {\n    archName = \"Kepler\";\n    computeCapability = \"3.5\";\n    dontDefaultAfter = \"11.0\";\n    isJetson = false;\n    maxCudaVersion = \"11.8\";\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Kepler\";\n    computeCapability = \"3.7\";\n    dontDefaultAfter = \"11.0\";\n    isJetson = false;\n    maxCudaVersion = \"11.8\";\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Maxwell\";\n    computeCapability = \"5.0\";\n    dontDefaultAfter = \"11.0\";\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Maxwell\";\n    computeCapability = \"5.2\";\n    dontDefaultAfter = \"11.0\";\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Maxwell\";\n    computeCapability = \"5.3\";\n    dontDefaultAfter = null;\n    isJetson = true;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Pascal\";\n    computeCapability = \"6.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Pascal\";\n    computeCapability = \"6.1\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Pascal\";\n    computeCapability = \"6.2\";\n    dontDefaultAfter = null;\n    isJetson = true;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Volta\";\n    computeCapability = \"7.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Volta\";\n    computeCapability = \"7.2\";\n    dontDefaultAfter = null;\n    isJetson = true;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Turing\";\n    computeCapability = \"7.5\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_1cudaflagsdatasupportedgpusarchname","title":"cudaPackagesPackageSets.cudaPackages_11_1.cudaFlags.data.supportedGpus.*.archName","text":"<p>Name of the microarchitecture</p> <p>Type: A CUDA architecture name, like Ampere or Ada.</p> <p>Example: <code>\"Kepler\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_1cudaflagsdatasupportedgpuscomputecapability","title":"cudaPackagesPackageSets.cudaPackages_11_1.cudaFlags.data.supportedGpus.*.computeCapability","text":"<p>Compute capability of the GPU</p> <p>Type: A CUDA capability version.</p> <p>Example: <code>\"3.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_1cudaflagsdatasupportedgpusdontdefaultafter","title":"cudaPackagesPackageSets.cudaPackages_11_1.cudaFlags.data.supportedGpus.*.dontDefaultAfter","text":"<p>The CUDA version after which to exclude this GPU from the list of default capabilities we build. null means we always include this GPU in the default capabilities if it is supported.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_1cudaflagsdatasupportedgpusisjetson","title":"cudaPackagesPackageSets.cudaPackages_11_1.cudaFlags.data.supportedGpus.*.isJetson","text":"<p>Whether a GPU is part of NVIDIA\u2019s line of Jetson embedded computers.</p> <p>This field is notable because it tells us what architecture to build for (as Jetson devices are aarch64). More on Jetson devices here: https://www.nvidia.com/en-us/autonomous-machines/embedded-systems/</p> <p>NOTE: These architectures are only built upon request.</p> <p>Type: one of true, false</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_1cudaflagsdatasupportedgpusmaxcudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_1.cudaFlags.data.supportedGpus.*.maxCudaVersion","text":"<p>The maximum (exclusive) CUDA version that supports this GPU. null means there is no maximum.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_1cudaflagsdatasupportedgpusmincudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_1.cudaFlags.data.supportedGpus.*.minCudaVersion","text":"<p>The minimum (inclusive) CUDA version that supports this GPU.</p> <p>Type: A version number with a major and minor component.</p> <p>Example: <code>\"10.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_1cudaflagsdatavirtualarches","title":"cudaPackagesPackageSets.cudaPackages_11_1.cudaFlags.data.virtualArches","text":"<p>The virtual architectures to build for. These are typically used for forward compatibility, when trying to support an architecture newer than the CUDA version allows.</p> <p>Type: list of A virtual CUDA architecture name.</p> <p>Default:</p> <pre><code>[\n  \"compute_89\"\n]\n</code></pre> <p>Example:</p> <pre><code>[\n  \"compute_75\"\n  \"compute_86\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_1cudaflagsutilsarchmapper","title":"cudaPackagesPackageSets.cudaPackages_11_1.cudaFlags.utils.archMapper","text":"<p>Maps a feature across a list of compute capabilities to produce a list of architectures.</p> <p>For example, \u201csm\u201d and [ \u201c8.0\u201d \u201c8.6\u201d \u201c8.7\u201d ] yield [ \u201csm_80\u201d \u201csm_86\u201d \u201csm_87\u201d ].</p> <p>Type: function that evaluates to a(n) function that evaluates to a(n) list of string</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_1cudaflagsutilsdropdot","title":"cudaPackagesPackageSets.cudaPackages_11_1.cudaFlags.utils.dropDot","text":"<p>Drops dots from a string.</p> <p>Type: function that evaluates to a(n) string</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_1cudaflagsutilsgencodemapper","title":"cudaPackagesPackageSets.cudaPackages_11_1.cudaFlags.utils.gencodeMapper","text":"<p>Maps a feature across a list of compute capabilities to produce a list of gencode arguments.</p> <p>For example, \u201csm\u201d and [ \u201c8.0\u201d \u201c8.6\u201d \u201c8.7\u201d ] yield [ \u201c-gencode=arch=compute_80,code=sm_80\u201d \u201c-gencode=arch=compute_86,code=sm_86\u201d \u201c-gencode=arch=compute_87,code=sm_87\u201d ].</p> <p>Type: function that evaluates to a(n) function that evaluates to a(n) list of string</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_1cudaflagsutilsgetnixsystem","title":"cudaPackagesPackageSets.cudaPackages_11_1.cudaFlags.utils.getNixSystem","text":"<p>Maps NVIDIA redist arch to Nix system.</p> <p>NOTE: This function will be called by unsupported systems because <code>cudaPackages</code> is part of <code>all-packages.nix</code>, which is evaluated on all systems. As such, we need to handle unsupported systems gracefully.</p> <p>Type: function that evaluates to a(n) (one of \u201cunsupported\u201d, \u201caaarch64-linux\u201d, \u201cx86_64-linux\u201d, \u201cppc64le-linux\u201d, \u201cx86_64-windows\u201d)</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_1cudaflagsutilsgetredistarch","title":"cudaPackagesPackageSets.cudaPackages_11_1.cudaFlags.utils.getRedistArch","text":"<p>Maps Nix system to NVIDIA redist arch.</p> <p>NOTE: We swap out the default <code>linux-sbsa</code> redist (for server-grade ARM chips) with the <code>linux-aarch64</code> redist (which is for Jetson devices) if we\u2019re building any Jetson devices. Since both are based on aarch64, we can only have one or the other, otherwise there\u2019s an ambiguity as to which should be used.</p> <p>NOTE: This function will be called by unsupported systems because <code>cudaPackages</code> is part of <code>all-packages.nix</code>, which is evaluated on all systems. As such, we need to handle unsupported systems gracefully.</p> <p>Type: function that evaluates to a(n) (one of \u201cunsupported\u201d, \u201clinux-aarch64\u201d, \u201clinux-sbsa\u201d, \u201clinux-x86_64\u201d, \u201clinux-ppc64le\u201d, \u201cwindows-x86_64\u201d)</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_1cudaflagsutilsisdefault","title":"cudaPackagesPackageSets.cudaPackages_11_1.cudaFlags.utils.isDefault","text":"<p>Whether a GPU is included in the default capabilities</p> <p>Type: function that evaluates to a(n) boolean</p> <p>Default: <code>&lt;function, args: {dontDefaultAfter, isJetson}&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_1cudaflagsutilsissupported","title":"cudaPackagesPackageSets.cudaPackages_11_1.cudaFlags.utils.isSupported","text":"<p>Whether a CUDA version supports a given GPU</p> <p>Type: function that evaluates to a(n) boolean</p> <p>Default: <code>&lt;function, args: {maxCudaVersion, minCudaVersion}&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_1cudamajorminorversion","title":"cudaPackagesPackageSets.cudaPackages_11_1.cudaMajorMinorVersion","text":"<p>The major and minor version of the CUDA package set</p> <p>Type: string</p> <p>Default: <code>\"11.1\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_1cudamajorversion","title":"cudaPackagesPackageSets.cudaPackages_11_1.cudaMajorVersion","text":"<p>The major version of the CUDA package set</p> <p>Type: string</p> <p>Default: <code>\"11\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_1cudanewer","title":"cudaPackagesPackageSets.cudaPackages_11_1.cudaNewer","text":"<p>A utility to check if the CUDA version is newer than a given version</p> <p>Type: function that evaluates to a(n) boolean</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_1cudaolder","title":"cudaPackagesPackageSets.cudaPackages_11_1.cudaOlder","text":"<p>A utility to check if the CUDA version is older than a given version</p> <p>Type: function that evaluates to a(n) boolean</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_1cudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_1.cudaVersion","text":"<p>The CUDA version of the package set</p> <p>Type: A version number with a major and minor component.</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_2","title":"cudaPackagesPackageSets.cudaPackages_11_2","text":"<p>A CUDA package set for a particular version of CUDA</p> <p>Type: submodule</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules</p>"},{"location":"#cudapackagespackagesetscudapackages_11_2cudaatleast","title":"cudaPackagesPackageSets.cudaPackages_11_2.cudaAtLeast","text":"<p>A utility to check if the CUDA version is at least a given version</p> <p>Type: function that evaluates to a(n) boolean</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_2cudaatmost","title":"cudaPackagesPackageSets.cudaPackages_11_2.cudaAtMost","text":"<p>A utility to check if the CUDA version is at most a given version</p> <p>Type: function that evaluates to a(n) boolean</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_2cudaflagsdataarchnames","title":"cudaPackagesPackageSets.cudaPackages_11_2.cudaFlags.data.archNames","text":"<p>The names of the architectures to build for</p> <p>Type: list of string</p> <p>Default: <code>[ ]</code></p> <p>Example:</p> <pre><code>[\n  \"Turing\"\n  \"Ampere\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_2cudaflagsdataarches","title":"cudaPackagesPackageSets.cudaPackages_11_2.cudaFlags.data.arches","text":"<p>The architectures to build for. Includes a virtual architecture if forward compatibility is enabled.</p> <p>Type: list of (A real/physical CUDA architecture name. or A virtual CUDA architecture name.)</p> <p>Default:</p> <pre><code>[\n  \"sm_89\"\n]\n</code></pre> <p>Example:</p> <pre><code>[\n  \"sm_75\"\n  \"sm_86\"\n  \"compute_86\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_2cudaflagsdatacudacapabilities","title":"cudaPackagesPackageSets.cudaPackages_11_2.cudaFlags.data.cudaCapabilities","text":"<p>CUDA capabilities (hardware generations) to build for</p> <p>Type: list of A CUDA capability version.</p> <p>Default:</p> <pre><code>[\n  \"8.9\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_2cudaflagsdatacudaforwardcompat","title":"cudaPackagesPackageSets.cudaPackages_11_2.cudaFlags.data.cudaForwardCompat","text":"<p>Build with forward compatibility gencode (+PTX) to support future GPU generations</p> <p>Type: boolean</p> <p>Default: <code>false</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_2cudaflagsdatacudagpus","title":"cudaPackagesPackageSets.cudaPackages_11_2.cudaFlags.data.cudaGpus","text":"<p>CUDA GPUs to build for</p> <p>Type: list of (submodule)</p> <p>Default: <code>[ ]</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_2cudaflagsdatacudagpusarchname","title":"cudaPackagesPackageSets.cudaPackages_11_2.cudaFlags.data.cudaGpus.*.archName","text":"<p>Name of the microarchitecture</p> <p>Type: A CUDA architecture name, like Ampere or Ada.</p> <p>Example: <code>\"Kepler\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_2cudaflagsdatacudagpuscomputecapability","title":"cudaPackagesPackageSets.cudaPackages_11_2.cudaFlags.data.cudaGpus.*.computeCapability","text":"<p>Compute capability of the GPU</p> <p>Type: A CUDA capability version.</p> <p>Example: <code>\"3.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_2cudaflagsdatacudagpusdontdefaultafter","title":"cudaPackagesPackageSets.cudaPackages_11_2.cudaFlags.data.cudaGpus.*.dontDefaultAfter","text":"<p>The CUDA version after which to exclude this GPU from the list of default capabilities we build. null means we always include this GPU in the default capabilities if it is supported.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_2cudaflagsdatacudagpusisjetson","title":"cudaPackagesPackageSets.cudaPackages_11_2.cudaFlags.data.cudaGpus.*.isJetson","text":"<p>Whether a GPU is part of NVIDIA\u2019s line of Jetson embedded computers.</p> <p>This field is notable because it tells us what architecture to build for (as Jetson devices are aarch64). More on Jetson devices here: https://www.nvidia.com/en-us/autonomous-machines/embedded-systems/</p> <p>NOTE: These architectures are only built upon request.</p> <p>Type: one of true, false</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_2cudaflagsdatacudagpusmaxcudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_2.cudaFlags.data.cudaGpus.*.maxCudaVersion","text":"<p>The maximum (exclusive) CUDA version that supports this GPU. null means there is no maximum.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_2cudaflagsdatacudagpusmincudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_2.cudaFlags.data.cudaGpus.*.minCudaVersion","text":"<p>The minimum (inclusive) CUDA version that supports this GPU.</p> <p>Type: A version number with a major and minor component.</p> <p>Example: <code>\"10.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_2cudaflagsdatacudajetsongpus","title":"cudaPackagesPackageSets.cudaPackages_11_2.cudaFlags.data.cudaJetsonGpus","text":"<p>CUDA GPUs to build for, including only Jetson devices</p> <p>Type: list of (submodule)</p> <p>Default: <code>[ ]</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_2cudaflagsdatacudajetsongpusarchname","title":"cudaPackagesPackageSets.cudaPackages_11_2.cudaFlags.data.cudaJetsonGpus.*.archName","text":"<p>Name of the microarchitecture</p> <p>Type: A CUDA architecture name, like Ampere or Ada.</p> <p>Example: <code>\"Kepler\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_2cudaflagsdatacudajetsongpuscomputecapability","title":"cudaPackagesPackageSets.cudaPackages_11_2.cudaFlags.data.cudaJetsonGpus.*.computeCapability","text":"<p>Compute capability of the GPU</p> <p>Type: A CUDA capability version.</p> <p>Example: <code>\"3.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_2cudaflagsdatacudajetsongpusdontdefaultafter","title":"cudaPackagesPackageSets.cudaPackages_11_2.cudaFlags.data.cudaJetsonGpus.*.dontDefaultAfter","text":"<p>The CUDA version after which to exclude this GPU from the list of default capabilities we build. null means we always include this GPU in the default capabilities if it is supported.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_2cudaflagsdatacudajetsongpusisjetson","title":"cudaPackagesPackageSets.cudaPackages_11_2.cudaFlags.data.cudaJetsonGpus.*.isJetson","text":"<p>Whether a GPU is part of NVIDIA\u2019s line of Jetson embedded computers.</p> <p>This field is notable because it tells us what architecture to build for (as Jetson devices are aarch64). More on Jetson devices here: https://www.nvidia.com/en-us/autonomous-machines/embedded-systems/</p> <p>NOTE: These architectures are only built upon request.</p> <p>Type: one of true, false</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_2cudaflagsdatacudajetsongpusmaxcudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_2.cudaFlags.data.cudaJetsonGpus.*.maxCudaVersion","text":"<p>The maximum (exclusive) CUDA version that supports this GPU. null means there is no maximum.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_2cudaflagsdatacudajetsongpusmincudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_2.cudaFlags.data.cudaJetsonGpus.*.minCudaVersion","text":"<p>The minimum (inclusive) CUDA version that supports this GPU.</p> <p>Type: A version number with a major and minor component.</p> <p>Example: <code>\"10.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_2cudaflagsdatacudanonjetsongpus","title":"cudaPackagesPackageSets.cudaPackages_11_2.cudaFlags.data.cudaNonJetsonGpus","text":"<p>CUDA GPUs to build for, excluding Jetson devices</p> <p>Type: list of (submodule)</p> <p>Default: <code>[ ]</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_2cudaflagsdatacudanonjetsongpusarchname","title":"cudaPackagesPackageSets.cudaPackages_11_2.cudaFlags.data.cudaNonJetsonGpus.*.archName","text":"<p>Name of the microarchitecture</p> <p>Type: A CUDA architecture name, like Ampere or Ada.</p> <p>Example: <code>\"Kepler\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_2cudaflagsdatacudanonjetsongpuscomputecapability","title":"cudaPackagesPackageSets.cudaPackages_11_2.cudaFlags.data.cudaNonJetsonGpus.*.computeCapability","text":"<p>Compute capability of the GPU</p> <p>Type: A CUDA capability version.</p> <p>Example: <code>\"3.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_2cudaflagsdatacudanonjetsongpusdontdefaultafter","title":"cudaPackagesPackageSets.cudaPackages_11_2.cudaFlags.data.cudaNonJetsonGpus.*.dontDefaultAfter","text":"<p>The CUDA version after which to exclude this GPU from the list of default capabilities we build. null means we always include this GPU in the default capabilities if it is supported.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_2cudaflagsdatacudanonjetsongpusisjetson","title":"cudaPackagesPackageSets.cudaPackages_11_2.cudaFlags.data.cudaNonJetsonGpus.*.isJetson","text":"<p>Whether a GPU is part of NVIDIA\u2019s line of Jetson embedded computers.</p> <p>This field is notable because it tells us what architecture to build for (as Jetson devices are aarch64). More on Jetson devices here: https://www.nvidia.com/en-us/autonomous-machines/embedded-systems/</p> <p>NOTE: These architectures are only built upon request.</p> <p>Type: one of false, true</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_2cudaflagsdatacudanonjetsongpusmaxcudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_2.cudaFlags.data.cudaNonJetsonGpus.*.maxCudaVersion","text":"<p>The maximum (exclusive) CUDA version that supports this GPU. null means there is no maximum.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_2cudaflagsdatacudanonjetsongpusmincudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_2.cudaFlags.data.cudaNonJetsonGpus.*.minCudaVersion","text":"<p>The minimum (inclusive) CUDA version that supports this GPU.</p> <p>Type: A version number with a major and minor component.</p> <p>Example: <code>\"10.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_2cudaflagsdatacudasupport","title":"cudaPackagesPackageSets.cudaPackages_11_2.cudaFlags.data.cudaSupport","text":"<p>Build packages with CUDA support</p> <p>Type: boolean</p> <p>Default: <code>true</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_2cudaflagsdatadefaultcapabilities","title":"cudaPackagesPackageSets.cudaPackages_11_2.cudaFlags.data.defaultCapabilities","text":"<p>The default compute capabilities for a given CUDA version</p> <p>Type: list of A CUDA capability version.</p> <p>Default:</p> <pre><code>[\n  \"6.0\"\n  \"6.1\"\n  \"7.0\"\n  \"7.5\"\n  \"8.0\"\n  \"8.6\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_2cudaflagsdatadefaultgpus","title":"cudaPackagesPackageSets.cudaPackages_11_2.cudaFlags.data.defaultGpus","text":"<p>The default GPUs for a given CUDA version</p> <p>Type: list of (submodule)</p> <p>Default:</p> <pre><code>[\n  {\n    archName = \"Pascal\";\n    computeCapability = \"6.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Pascal\";\n    computeCapability = \"6.1\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Volta\";\n    computeCapability = \"7.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Turing\";\n    computeCapability = \"7.5\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Ampere\";\n    computeCapability = \"8.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"11.2\";\n  }\n  {\n    archName = \"Ampere\";\n    computeCapability = \"8.6\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"11.2\";\n  }\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_2cudaflagsdatadefaultgpusarchname","title":"cudaPackagesPackageSets.cudaPackages_11_2.cudaFlags.data.defaultGpus.*.archName","text":"<p>Name of the microarchitecture</p> <p>Type: A CUDA architecture name, like Ampere or Ada.</p> <p>Example: <code>\"Kepler\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_2cudaflagsdatadefaultgpuscomputecapability","title":"cudaPackagesPackageSets.cudaPackages_11_2.cudaFlags.data.defaultGpus.*.computeCapability","text":"<p>Compute capability of the GPU</p> <p>Type: A CUDA capability version.</p> <p>Example: <code>\"3.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_2cudaflagsdatadefaultgpusdontdefaultafter","title":"cudaPackagesPackageSets.cudaPackages_11_2.cudaFlags.data.defaultGpus.*.dontDefaultAfter","text":"<p>The CUDA version after which to exclude this GPU from the list of default capabilities we build. null means we always include this GPU in the default capabilities if it is supported.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_2cudaflagsdatadefaultgpusisjetson","title":"cudaPackagesPackageSets.cudaPackages_11_2.cudaFlags.data.defaultGpus.*.isJetson","text":"<p>Whether a GPU is part of NVIDIA\u2019s line of Jetson embedded computers.</p> <p>This field is notable because it tells us what architecture to build for (as Jetson devices are aarch64). More on Jetson devices here: https://www.nvidia.com/en-us/autonomous-machines/embedded-systems/</p> <p>NOTE: These architectures are only built upon request.</p> <p>Type: one of true, false</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_2cudaflagsdatadefaultgpusmaxcudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_2.cudaFlags.data.defaultGpus.*.maxCudaVersion","text":"<p>The maximum (exclusive) CUDA version that supports this GPU. null means there is no maximum.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_2cudaflagsdatadefaultgpusmincudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_2.cudaFlags.data.defaultGpus.*.minCudaVersion","text":"<p>The minimum (inclusive) CUDA version that supports this GPU.</p> <p>Type: A version number with a major and minor component.</p> <p>Example: <code>\"10.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_2cudaflagsdatagencodeargs","title":"cudaPackagesPackageSets.cudaPackages_11_2.cudaFlags.data.gencodeArgs","text":"<p>The gencode arguments to pass to NVCC</p> <p>Type: list of A `gencode` argument for the `nvcc` compiler.</p> <p>Default:</p> <pre><code>[\n  \"-gencode=arch=compute_89,code=sm_89\"\n]\n</code></pre> <p>Example:</p> <pre><code>[\n  \"-gencode=arch=compute_75,code=sm_75\"\n  \"-gencode=arch=compute_86,code=sm_86\"\n  \"-gencode=arch=compute_86,code=compute_86\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_2cudaflagsdatagencodestring","title":"cudaPackagesPackageSets.cudaPackages_11_2.cudaFlags.data.gencodeString","text":"<p>A space-separated string of CUDA gencode arguments to pass to NVCC</p> <p>Type: string</p> <p>Default: <code>\"-gencode=arch=compute_89,code=sm_89\"</code></p> <p>Example: <code>\"-gencode=arch=compute_75,code=sm_75 ... -gencode=arch=compute_86,code=compute_86\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_2cudaflagsdataisjetsonbuild","title":"cudaPackagesPackageSets.cudaPackages_11_2.cudaFlags.data.isJetsonBuild","text":"<p>Whether the build is for a Jetson device.</p> <p>Jetson devices cannot be targeted by the same binaries which target non-Jetson devices. While NVIDIA provides both <code>linux-aarch64</code> and <code>linux-sbsa</code> packages, which both target <code>aarch64</code>, they are built with different settings and cannot be mixed.</p> <p>Type: boolean</p> <p>Default: <code>false</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_2cudaflagsdatarealarches","title":"cudaPackagesPackageSets.cudaPackages_11_2.cudaFlags.data.realArches","text":"<p>The physical architectures to build for</p> <p>Type: list of A real/physical CUDA architecture name.</p> <p>Default:</p> <pre><code>[\n  \"sm_89\"\n]\n</code></pre> <p>Example:</p> <pre><code>[\n  \"sm_75\"\n  \"sm_86\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_2cudaflagsdatasupportedcapabilities","title":"cudaPackagesPackageSets.cudaPackages_11_2.cudaFlags.data.supportedCapabilities","text":"<p>The compute capabilities supported by a given CUDA version</p> <p>Type: list of A CUDA capability version.</p> <p>Default:</p> <pre><code>[\n  \"3.5\"\n  \"3.7\"\n  \"5.0\"\n  \"5.2\"\n  \"5.3\"\n  \"6.0\"\n  \"6.1\"\n  \"6.2\"\n  \"7.0\"\n  \"7.2\"\n  \"7.5\"\n  \"8.0\"\n  \"8.6\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_2cudaflagsdatasupportedgpus","title":"cudaPackagesPackageSets.cudaPackages_11_2.cudaFlags.data.supportedGpus","text":"<p>The GPUs supported by a given CUDA version</p> <p>Type: list of (submodule)</p> <p>Default:</p> <pre><code>[\n  {\n    archName = \"Kepler\";\n    computeCapability = \"3.5\";\n    dontDefaultAfter = \"11.0\";\n    isJetson = false;\n    maxCudaVersion = \"11.8\";\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Kepler\";\n    computeCapability = \"3.7\";\n    dontDefaultAfter = \"11.0\";\n    isJetson = false;\n    maxCudaVersion = \"11.8\";\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Maxwell\";\n    computeCapability = \"5.0\";\n    dontDefaultAfter = \"11.0\";\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Maxwell\";\n    computeCapability = \"5.2\";\n    dontDefaultAfter = \"11.0\";\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Maxwell\";\n    computeCapability = \"5.3\";\n    dontDefaultAfter = null;\n    isJetson = true;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Pascal\";\n    computeCapability = \"6.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Pascal\";\n    computeCapability = \"6.1\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Pascal\";\n    computeCapability = \"6.2\";\n    dontDefaultAfter = null;\n    isJetson = true;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Volta\";\n    computeCapability = \"7.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Volta\";\n    computeCapability = \"7.2\";\n    dontDefaultAfter = null;\n    isJetson = true;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Turing\";\n    computeCapability = \"7.5\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Ampere\";\n    computeCapability = \"8.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"11.2\";\n  }\n  {\n    archName = \"Ampere\";\n    computeCapability = \"8.6\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"11.2\";\n  }\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_2cudaflagsdatasupportedgpusarchname","title":"cudaPackagesPackageSets.cudaPackages_11_2.cudaFlags.data.supportedGpus.*.archName","text":"<p>Name of the microarchitecture</p> <p>Type: A CUDA architecture name, like Ampere or Ada.</p> <p>Example: <code>\"Kepler\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_2cudaflagsdatasupportedgpuscomputecapability","title":"cudaPackagesPackageSets.cudaPackages_11_2.cudaFlags.data.supportedGpus.*.computeCapability","text":"<p>Compute capability of the GPU</p> <p>Type: A CUDA capability version.</p> <p>Example: <code>\"3.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_2cudaflagsdatasupportedgpusdontdefaultafter","title":"cudaPackagesPackageSets.cudaPackages_11_2.cudaFlags.data.supportedGpus.*.dontDefaultAfter","text":"<p>The CUDA version after which to exclude this GPU from the list of default capabilities we build. null means we always include this GPU in the default capabilities if it is supported.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_2cudaflagsdatasupportedgpusisjetson","title":"cudaPackagesPackageSets.cudaPackages_11_2.cudaFlags.data.supportedGpus.*.isJetson","text":"<p>Whether a GPU is part of NVIDIA\u2019s line of Jetson embedded computers.</p> <p>This field is notable because it tells us what architecture to build for (as Jetson devices are aarch64). More on Jetson devices here: https://www.nvidia.com/en-us/autonomous-machines/embedded-systems/</p> <p>NOTE: These architectures are only built upon request.</p> <p>Type: one of true, false</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_2cudaflagsdatasupportedgpusmaxcudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_2.cudaFlags.data.supportedGpus.*.maxCudaVersion","text":"<p>The maximum (exclusive) CUDA version that supports this GPU. null means there is no maximum.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_2cudaflagsdatasupportedgpusmincudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_2.cudaFlags.data.supportedGpus.*.minCudaVersion","text":"<p>The minimum (inclusive) CUDA version that supports this GPU.</p> <p>Type: A version number with a major and minor component.</p> <p>Example: <code>\"10.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_2cudaflagsdatavirtualarches","title":"cudaPackagesPackageSets.cudaPackages_11_2.cudaFlags.data.virtualArches","text":"<p>The virtual architectures to build for. These are typically used for forward compatibility, when trying to support an architecture newer than the CUDA version allows.</p> <p>Type: list of A virtual CUDA architecture name.</p> <p>Default:</p> <pre><code>[\n  \"compute_89\"\n]\n</code></pre> <p>Example:</p> <pre><code>[\n  \"compute_75\"\n  \"compute_86\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_2cudaflagsutilsarchmapper","title":"cudaPackagesPackageSets.cudaPackages_11_2.cudaFlags.utils.archMapper","text":"<p>Maps a feature across a list of compute capabilities to produce a list of architectures.</p> <p>For example, \u201csm\u201d and [ \u201c8.0\u201d \u201c8.6\u201d \u201c8.7\u201d ] yield [ \u201csm_80\u201d \u201csm_86\u201d \u201csm_87\u201d ].</p> <p>Type: function that evaluates to a(n) function that evaluates to a(n) list of string</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_2cudaflagsutilsdropdot","title":"cudaPackagesPackageSets.cudaPackages_11_2.cudaFlags.utils.dropDot","text":"<p>Drops dots from a string.</p> <p>Type: function that evaluates to a(n) string</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_2cudaflagsutilsgencodemapper","title":"cudaPackagesPackageSets.cudaPackages_11_2.cudaFlags.utils.gencodeMapper","text":"<p>Maps a feature across a list of compute capabilities to produce a list of gencode arguments.</p> <p>For example, \u201csm\u201d and [ \u201c8.0\u201d \u201c8.6\u201d \u201c8.7\u201d ] yield [ \u201c-gencode=arch=compute_80,code=sm_80\u201d \u201c-gencode=arch=compute_86,code=sm_86\u201d \u201c-gencode=arch=compute_87,code=sm_87\u201d ].</p> <p>Type: function that evaluates to a(n) function that evaluates to a(n) list of string</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_2cudaflagsutilsgetnixsystem","title":"cudaPackagesPackageSets.cudaPackages_11_2.cudaFlags.utils.getNixSystem","text":"<p>Maps NVIDIA redist arch to Nix system.</p> <p>NOTE: This function will be called by unsupported systems because <code>cudaPackages</code> is part of <code>all-packages.nix</code>, which is evaluated on all systems. As such, we need to handle unsupported systems gracefully.</p> <p>Type: function that evaluates to a(n) (one of \u201cunsupported\u201d, \u201caaarch64-linux\u201d, \u201cx86_64-linux\u201d, \u201cppc64le-linux\u201d, \u201cx86_64-windows\u201d)</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_2cudaflagsutilsgetredistarch","title":"cudaPackagesPackageSets.cudaPackages_11_2.cudaFlags.utils.getRedistArch","text":"<p>Maps Nix system to NVIDIA redist arch.</p> <p>NOTE: We swap out the default <code>linux-sbsa</code> redist (for server-grade ARM chips) with the <code>linux-aarch64</code> redist (which is for Jetson devices) if we\u2019re building any Jetson devices. Since both are based on aarch64, we can only have one or the other, otherwise there\u2019s an ambiguity as to which should be used.</p> <p>NOTE: This function will be called by unsupported systems because <code>cudaPackages</code> is part of <code>all-packages.nix</code>, which is evaluated on all systems. As such, we need to handle unsupported systems gracefully.</p> <p>Type: function that evaluates to a(n) (one of \u201cunsupported\u201d, \u201clinux-aarch64\u201d, \u201clinux-sbsa\u201d, \u201clinux-x86_64\u201d, \u201clinux-ppc64le\u201d, \u201cwindows-x86_64\u201d)</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_2cudaflagsutilsisdefault","title":"cudaPackagesPackageSets.cudaPackages_11_2.cudaFlags.utils.isDefault","text":"<p>Whether a GPU is included in the default capabilities</p> <p>Type: function that evaluates to a(n) boolean</p> <p>Default: <code>&lt;function, args: {dontDefaultAfter, isJetson}&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_2cudaflagsutilsissupported","title":"cudaPackagesPackageSets.cudaPackages_11_2.cudaFlags.utils.isSupported","text":"<p>Whether a CUDA version supports a given GPU</p> <p>Type: function that evaluates to a(n) boolean</p> <p>Default: <code>&lt;function, args: {maxCudaVersion, minCudaVersion}&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_2cudamajorminorversion","title":"cudaPackagesPackageSets.cudaPackages_11_2.cudaMajorMinorVersion","text":"<p>The major and minor version of the CUDA package set</p> <p>Type: string</p> <p>Default: <code>\"11.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_2cudamajorversion","title":"cudaPackagesPackageSets.cudaPackages_11_2.cudaMajorVersion","text":"<p>The major version of the CUDA package set</p> <p>Type: string</p> <p>Default: <code>\"11\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_2cudanewer","title":"cudaPackagesPackageSets.cudaPackages_11_2.cudaNewer","text":"<p>A utility to check if the CUDA version is newer than a given version</p> <p>Type: function that evaluates to a(n) boolean</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_2cudaolder","title":"cudaPackagesPackageSets.cudaPackages_11_2.cudaOlder","text":"<p>A utility to check if the CUDA version is older than a given version</p> <p>Type: function that evaluates to a(n) boolean</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_2cudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_2.cudaVersion","text":"<p>The CUDA version of the package set</p> <p>Type: A version number with a major and minor component.</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_3","title":"cudaPackagesPackageSets.cudaPackages_11_3","text":"<p>A CUDA package set for a particular version of CUDA</p> <p>Type: submodule</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules</p>"},{"location":"#cudapackagespackagesetscudapackages_11_3cudaatleast","title":"cudaPackagesPackageSets.cudaPackages_11_3.cudaAtLeast","text":"<p>A utility to check if the CUDA version is at least a given version</p> <p>Type: function that evaluates to a(n) boolean</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_3cudaatmost","title":"cudaPackagesPackageSets.cudaPackages_11_3.cudaAtMost","text":"<p>A utility to check if the CUDA version is at most a given version</p> <p>Type: function that evaluates to a(n) boolean</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_3cudaflagsdataarchnames","title":"cudaPackagesPackageSets.cudaPackages_11_3.cudaFlags.data.archNames","text":"<p>The names of the architectures to build for</p> <p>Type: list of string</p> <p>Default: <code>[ ]</code></p> <p>Example:</p> <pre><code>[\n  \"Turing\"\n  \"Ampere\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_3cudaflagsdataarches","title":"cudaPackagesPackageSets.cudaPackages_11_3.cudaFlags.data.arches","text":"<p>The architectures to build for. Includes a virtual architecture if forward compatibility is enabled.</p> <p>Type: list of (A real/physical CUDA architecture name. or A virtual CUDA architecture name.)</p> <p>Default:</p> <pre><code>[\n  \"sm_89\"\n]\n</code></pre> <p>Example:</p> <pre><code>[\n  \"sm_75\"\n  \"sm_86\"\n  \"compute_86\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_3cudaflagsdatacudacapabilities","title":"cudaPackagesPackageSets.cudaPackages_11_3.cudaFlags.data.cudaCapabilities","text":"<p>CUDA capabilities (hardware generations) to build for</p> <p>Type: list of A CUDA capability version.</p> <p>Default:</p> <pre><code>[\n  \"8.9\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_3cudaflagsdatacudaforwardcompat","title":"cudaPackagesPackageSets.cudaPackages_11_3.cudaFlags.data.cudaForwardCompat","text":"<p>Build with forward compatibility gencode (+PTX) to support future GPU generations</p> <p>Type: boolean</p> <p>Default: <code>false</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_3cudaflagsdatacudagpus","title":"cudaPackagesPackageSets.cudaPackages_11_3.cudaFlags.data.cudaGpus","text":"<p>CUDA GPUs to build for</p> <p>Type: list of (submodule)</p> <p>Default: <code>[ ]</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_3cudaflagsdatacudagpusarchname","title":"cudaPackagesPackageSets.cudaPackages_11_3.cudaFlags.data.cudaGpus.*.archName","text":"<p>Name of the microarchitecture</p> <p>Type: A CUDA architecture name, like Ampere or Ada.</p> <p>Example: <code>\"Kepler\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_3cudaflagsdatacudagpuscomputecapability","title":"cudaPackagesPackageSets.cudaPackages_11_3.cudaFlags.data.cudaGpus.*.computeCapability","text":"<p>Compute capability of the GPU</p> <p>Type: A CUDA capability version.</p> <p>Example: <code>\"3.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_3cudaflagsdatacudagpusdontdefaultafter","title":"cudaPackagesPackageSets.cudaPackages_11_3.cudaFlags.data.cudaGpus.*.dontDefaultAfter","text":"<p>The CUDA version after which to exclude this GPU from the list of default capabilities we build. null means we always include this GPU in the default capabilities if it is supported.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_3cudaflagsdatacudagpusisjetson","title":"cudaPackagesPackageSets.cudaPackages_11_3.cudaFlags.data.cudaGpus.*.isJetson","text":"<p>Whether a GPU is part of NVIDIA\u2019s line of Jetson embedded computers.</p> <p>This field is notable because it tells us what architecture to build for (as Jetson devices are aarch64). More on Jetson devices here: https://www.nvidia.com/en-us/autonomous-machines/embedded-systems/</p> <p>NOTE: These architectures are only built upon request.</p> <p>Type: one of true, false</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_3cudaflagsdatacudagpusmaxcudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_3.cudaFlags.data.cudaGpus.*.maxCudaVersion","text":"<p>The maximum (exclusive) CUDA version that supports this GPU. null means there is no maximum.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_3cudaflagsdatacudagpusmincudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_3.cudaFlags.data.cudaGpus.*.minCudaVersion","text":"<p>The minimum (inclusive) CUDA version that supports this GPU.</p> <p>Type: A version number with a major and minor component.</p> <p>Example: <code>\"10.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_3cudaflagsdatacudajetsongpus","title":"cudaPackagesPackageSets.cudaPackages_11_3.cudaFlags.data.cudaJetsonGpus","text":"<p>CUDA GPUs to build for, including only Jetson devices</p> <p>Type: list of (submodule)</p> <p>Default: <code>[ ]</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_3cudaflagsdatacudajetsongpusarchname","title":"cudaPackagesPackageSets.cudaPackages_11_3.cudaFlags.data.cudaJetsonGpus.*.archName","text":"<p>Name of the microarchitecture</p> <p>Type: A CUDA architecture name, like Ampere or Ada.</p> <p>Example: <code>\"Kepler\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_3cudaflagsdatacudajetsongpuscomputecapability","title":"cudaPackagesPackageSets.cudaPackages_11_3.cudaFlags.data.cudaJetsonGpus.*.computeCapability","text":"<p>Compute capability of the GPU</p> <p>Type: A CUDA capability version.</p> <p>Example: <code>\"3.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_3cudaflagsdatacudajetsongpusdontdefaultafter","title":"cudaPackagesPackageSets.cudaPackages_11_3.cudaFlags.data.cudaJetsonGpus.*.dontDefaultAfter","text":"<p>The CUDA version after which to exclude this GPU from the list of default capabilities we build. null means we always include this GPU in the default capabilities if it is supported.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_3cudaflagsdatacudajetsongpusisjetson","title":"cudaPackagesPackageSets.cudaPackages_11_3.cudaFlags.data.cudaJetsonGpus.*.isJetson","text":"<p>Whether a GPU is part of NVIDIA\u2019s line of Jetson embedded computers.</p> <p>This field is notable because it tells us what architecture to build for (as Jetson devices are aarch64). More on Jetson devices here: https://www.nvidia.com/en-us/autonomous-machines/embedded-systems/</p> <p>NOTE: These architectures are only built upon request.</p> <p>Type: one of true, false</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_3cudaflagsdatacudajetsongpusmaxcudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_3.cudaFlags.data.cudaJetsonGpus.*.maxCudaVersion","text":"<p>The maximum (exclusive) CUDA version that supports this GPU. null means there is no maximum.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_3cudaflagsdatacudajetsongpusmincudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_3.cudaFlags.data.cudaJetsonGpus.*.minCudaVersion","text":"<p>The minimum (inclusive) CUDA version that supports this GPU.</p> <p>Type: A version number with a major and minor component.</p> <p>Example: <code>\"10.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_3cudaflagsdatacudanonjetsongpus","title":"cudaPackagesPackageSets.cudaPackages_11_3.cudaFlags.data.cudaNonJetsonGpus","text":"<p>CUDA GPUs to build for, excluding Jetson devices</p> <p>Type: list of (submodule)</p> <p>Default: <code>[ ]</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_3cudaflagsdatacudanonjetsongpusarchname","title":"cudaPackagesPackageSets.cudaPackages_11_3.cudaFlags.data.cudaNonJetsonGpus.*.archName","text":"<p>Name of the microarchitecture</p> <p>Type: A CUDA architecture name, like Ampere or Ada.</p> <p>Example: <code>\"Kepler\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_3cudaflagsdatacudanonjetsongpuscomputecapability","title":"cudaPackagesPackageSets.cudaPackages_11_3.cudaFlags.data.cudaNonJetsonGpus.*.computeCapability","text":"<p>Compute capability of the GPU</p> <p>Type: A CUDA capability version.</p> <p>Example: <code>\"3.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_3cudaflagsdatacudanonjetsongpusdontdefaultafter","title":"cudaPackagesPackageSets.cudaPackages_11_3.cudaFlags.data.cudaNonJetsonGpus.*.dontDefaultAfter","text":"<p>The CUDA version after which to exclude this GPU from the list of default capabilities we build. null means we always include this GPU in the default capabilities if it is supported.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_3cudaflagsdatacudanonjetsongpusisjetson","title":"cudaPackagesPackageSets.cudaPackages_11_3.cudaFlags.data.cudaNonJetsonGpus.*.isJetson","text":"<p>Whether a GPU is part of NVIDIA\u2019s line of Jetson embedded computers.</p> <p>This field is notable because it tells us what architecture to build for (as Jetson devices are aarch64). More on Jetson devices here: https://www.nvidia.com/en-us/autonomous-machines/embedded-systems/</p> <p>NOTE: These architectures are only built upon request.</p> <p>Type: one of false, true</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_3cudaflagsdatacudanonjetsongpusmaxcudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_3.cudaFlags.data.cudaNonJetsonGpus.*.maxCudaVersion","text":"<p>The maximum (exclusive) CUDA version that supports this GPU. null means there is no maximum.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_3cudaflagsdatacudanonjetsongpusmincudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_3.cudaFlags.data.cudaNonJetsonGpus.*.minCudaVersion","text":"<p>The minimum (inclusive) CUDA version that supports this GPU.</p> <p>Type: A version number with a major and minor component.</p> <p>Example: <code>\"10.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_3cudaflagsdatacudasupport","title":"cudaPackagesPackageSets.cudaPackages_11_3.cudaFlags.data.cudaSupport","text":"<p>Build packages with CUDA support</p> <p>Type: boolean</p> <p>Default: <code>true</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_3cudaflagsdatadefaultcapabilities","title":"cudaPackagesPackageSets.cudaPackages_11_3.cudaFlags.data.defaultCapabilities","text":"<p>The default compute capabilities for a given CUDA version</p> <p>Type: list of A CUDA capability version.</p> <p>Default:</p> <pre><code>[\n  \"6.0\"\n  \"6.1\"\n  \"7.0\"\n  \"7.5\"\n  \"8.0\"\n  \"8.6\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_3cudaflagsdatadefaultgpus","title":"cudaPackagesPackageSets.cudaPackages_11_3.cudaFlags.data.defaultGpus","text":"<p>The default GPUs for a given CUDA version</p> <p>Type: list of (submodule)</p> <p>Default:</p> <pre><code>[\n  {\n    archName = \"Pascal\";\n    computeCapability = \"6.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Pascal\";\n    computeCapability = \"6.1\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Volta\";\n    computeCapability = \"7.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Turing\";\n    computeCapability = \"7.5\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Ampere\";\n    computeCapability = \"8.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"11.2\";\n  }\n  {\n    archName = \"Ampere\";\n    computeCapability = \"8.6\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"11.2\";\n  }\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_3cudaflagsdatadefaultgpusarchname","title":"cudaPackagesPackageSets.cudaPackages_11_3.cudaFlags.data.defaultGpus.*.archName","text":"<p>Name of the microarchitecture</p> <p>Type: A CUDA architecture name, like Ampere or Ada.</p> <p>Example: <code>\"Kepler\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_3cudaflagsdatadefaultgpuscomputecapability","title":"cudaPackagesPackageSets.cudaPackages_11_3.cudaFlags.data.defaultGpus.*.computeCapability","text":"<p>Compute capability of the GPU</p> <p>Type: A CUDA capability version.</p> <p>Example: <code>\"3.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_3cudaflagsdatadefaultgpusdontdefaultafter","title":"cudaPackagesPackageSets.cudaPackages_11_3.cudaFlags.data.defaultGpus.*.dontDefaultAfter","text":"<p>The CUDA version after which to exclude this GPU from the list of default capabilities we build. null means we always include this GPU in the default capabilities if it is supported.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_3cudaflagsdatadefaultgpusisjetson","title":"cudaPackagesPackageSets.cudaPackages_11_3.cudaFlags.data.defaultGpus.*.isJetson","text":"<p>Whether a GPU is part of NVIDIA\u2019s line of Jetson embedded computers.</p> <p>This field is notable because it tells us what architecture to build for (as Jetson devices are aarch64). More on Jetson devices here: https://www.nvidia.com/en-us/autonomous-machines/embedded-systems/</p> <p>NOTE: These architectures are only built upon request.</p> <p>Type: one of true, false</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_3cudaflagsdatadefaultgpusmaxcudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_3.cudaFlags.data.defaultGpus.*.maxCudaVersion","text":"<p>The maximum (exclusive) CUDA version that supports this GPU. null means there is no maximum.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_3cudaflagsdatadefaultgpusmincudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_3.cudaFlags.data.defaultGpus.*.minCudaVersion","text":"<p>The minimum (inclusive) CUDA version that supports this GPU.</p> <p>Type: A version number with a major and minor component.</p> <p>Example: <code>\"10.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_3cudaflagsdatagencodeargs","title":"cudaPackagesPackageSets.cudaPackages_11_3.cudaFlags.data.gencodeArgs","text":"<p>The gencode arguments to pass to NVCC</p> <p>Type: list of A `gencode` argument for the `nvcc` compiler.</p> <p>Default:</p> <pre><code>[\n  \"-gencode=arch=compute_89,code=sm_89\"\n]\n</code></pre> <p>Example:</p> <pre><code>[\n  \"-gencode=arch=compute_75,code=sm_75\"\n  \"-gencode=arch=compute_86,code=sm_86\"\n  \"-gencode=arch=compute_86,code=compute_86\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_3cudaflagsdatagencodestring","title":"cudaPackagesPackageSets.cudaPackages_11_3.cudaFlags.data.gencodeString","text":"<p>A space-separated string of CUDA gencode arguments to pass to NVCC</p> <p>Type: string</p> <p>Default: <code>\"-gencode=arch=compute_89,code=sm_89\"</code></p> <p>Example: <code>\"-gencode=arch=compute_75,code=sm_75 ... -gencode=arch=compute_86,code=compute_86\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_3cudaflagsdataisjetsonbuild","title":"cudaPackagesPackageSets.cudaPackages_11_3.cudaFlags.data.isJetsonBuild","text":"<p>Whether the build is for a Jetson device.</p> <p>Jetson devices cannot be targeted by the same binaries which target non-Jetson devices. While NVIDIA provides both <code>linux-aarch64</code> and <code>linux-sbsa</code> packages, which both target <code>aarch64</code>, they are built with different settings and cannot be mixed.</p> <p>Type: boolean</p> <p>Default: <code>false</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_3cudaflagsdatarealarches","title":"cudaPackagesPackageSets.cudaPackages_11_3.cudaFlags.data.realArches","text":"<p>The physical architectures to build for</p> <p>Type: list of A real/physical CUDA architecture name.</p> <p>Default:</p> <pre><code>[\n  \"sm_89\"\n]\n</code></pre> <p>Example:</p> <pre><code>[\n  \"sm_75\"\n  \"sm_86\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_3cudaflagsdatasupportedcapabilities","title":"cudaPackagesPackageSets.cudaPackages_11_3.cudaFlags.data.supportedCapabilities","text":"<p>The compute capabilities supported by a given CUDA version</p> <p>Type: list of A CUDA capability version.</p> <p>Default:</p> <pre><code>[\n  \"3.5\"\n  \"3.7\"\n  \"5.0\"\n  \"5.2\"\n  \"5.3\"\n  \"6.0\"\n  \"6.1\"\n  \"6.2\"\n  \"7.0\"\n  \"7.2\"\n  \"7.5\"\n  \"8.0\"\n  \"8.6\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_3cudaflagsdatasupportedgpus","title":"cudaPackagesPackageSets.cudaPackages_11_3.cudaFlags.data.supportedGpus","text":"<p>The GPUs supported by a given CUDA version</p> <p>Type: list of (submodule)</p> <p>Default:</p> <pre><code>[\n  {\n    archName = \"Kepler\";\n    computeCapability = \"3.5\";\n    dontDefaultAfter = \"11.0\";\n    isJetson = false;\n    maxCudaVersion = \"11.8\";\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Kepler\";\n    computeCapability = \"3.7\";\n    dontDefaultAfter = \"11.0\";\n    isJetson = false;\n    maxCudaVersion = \"11.8\";\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Maxwell\";\n    computeCapability = \"5.0\";\n    dontDefaultAfter = \"11.0\";\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Maxwell\";\n    computeCapability = \"5.2\";\n    dontDefaultAfter = \"11.0\";\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Maxwell\";\n    computeCapability = \"5.3\";\n    dontDefaultAfter = null;\n    isJetson = true;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Pascal\";\n    computeCapability = \"6.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Pascal\";\n    computeCapability = \"6.1\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Pascal\";\n    computeCapability = \"6.2\";\n    dontDefaultAfter = null;\n    isJetson = true;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Volta\";\n    computeCapability = \"7.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Volta\";\n    computeCapability = \"7.2\";\n    dontDefaultAfter = null;\n    isJetson = true;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Turing\";\n    computeCapability = \"7.5\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Ampere\";\n    computeCapability = \"8.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"11.2\";\n  }\n  {\n    archName = \"Ampere\";\n    computeCapability = \"8.6\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"11.2\";\n  }\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_3cudaflagsdatasupportedgpusarchname","title":"cudaPackagesPackageSets.cudaPackages_11_3.cudaFlags.data.supportedGpus.*.archName","text":"<p>Name of the microarchitecture</p> <p>Type: A CUDA architecture name, like Ampere or Ada.</p> <p>Example: <code>\"Kepler\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_3cudaflagsdatasupportedgpuscomputecapability","title":"cudaPackagesPackageSets.cudaPackages_11_3.cudaFlags.data.supportedGpus.*.computeCapability","text":"<p>Compute capability of the GPU</p> <p>Type: A CUDA capability version.</p> <p>Example: <code>\"3.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_3cudaflagsdatasupportedgpusdontdefaultafter","title":"cudaPackagesPackageSets.cudaPackages_11_3.cudaFlags.data.supportedGpus.*.dontDefaultAfter","text":"<p>The CUDA version after which to exclude this GPU from the list of default capabilities we build. null means we always include this GPU in the default capabilities if it is supported.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_3cudaflagsdatasupportedgpusisjetson","title":"cudaPackagesPackageSets.cudaPackages_11_3.cudaFlags.data.supportedGpus.*.isJetson","text":"<p>Whether a GPU is part of NVIDIA\u2019s line of Jetson embedded computers.</p> <p>This field is notable because it tells us what architecture to build for (as Jetson devices are aarch64). More on Jetson devices here: https://www.nvidia.com/en-us/autonomous-machines/embedded-systems/</p> <p>NOTE: These architectures are only built upon request.</p> <p>Type: one of true, false</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_3cudaflagsdatasupportedgpusmaxcudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_3.cudaFlags.data.supportedGpus.*.maxCudaVersion","text":"<p>The maximum (exclusive) CUDA version that supports this GPU. null means there is no maximum.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_3cudaflagsdatasupportedgpusmincudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_3.cudaFlags.data.supportedGpus.*.minCudaVersion","text":"<p>The minimum (inclusive) CUDA version that supports this GPU.</p> <p>Type: A version number with a major and minor component.</p> <p>Example: <code>\"10.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_3cudaflagsdatavirtualarches","title":"cudaPackagesPackageSets.cudaPackages_11_3.cudaFlags.data.virtualArches","text":"<p>The virtual architectures to build for. These are typically used for forward compatibility, when trying to support an architecture newer than the CUDA version allows.</p> <p>Type: list of A virtual CUDA architecture name.</p> <p>Default:</p> <pre><code>[\n  \"compute_89\"\n]\n</code></pre> <p>Example:</p> <pre><code>[\n  \"compute_75\"\n  \"compute_86\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_3cudaflagsutilsarchmapper","title":"cudaPackagesPackageSets.cudaPackages_11_3.cudaFlags.utils.archMapper","text":"<p>Maps a feature across a list of compute capabilities to produce a list of architectures.</p> <p>For example, \u201csm\u201d and [ \u201c8.0\u201d \u201c8.6\u201d \u201c8.7\u201d ] yield [ \u201csm_80\u201d \u201csm_86\u201d \u201csm_87\u201d ].</p> <p>Type: function that evaluates to a(n) function that evaluates to a(n) list of string</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_3cudaflagsutilsdropdot","title":"cudaPackagesPackageSets.cudaPackages_11_3.cudaFlags.utils.dropDot","text":"<p>Drops dots from a string.</p> <p>Type: function that evaluates to a(n) string</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_3cudaflagsutilsgencodemapper","title":"cudaPackagesPackageSets.cudaPackages_11_3.cudaFlags.utils.gencodeMapper","text":"<p>Maps a feature across a list of compute capabilities to produce a list of gencode arguments.</p> <p>For example, \u201csm\u201d and [ \u201c8.0\u201d \u201c8.6\u201d \u201c8.7\u201d ] yield [ \u201c-gencode=arch=compute_80,code=sm_80\u201d \u201c-gencode=arch=compute_86,code=sm_86\u201d \u201c-gencode=arch=compute_87,code=sm_87\u201d ].</p> <p>Type: function that evaluates to a(n) function that evaluates to a(n) list of string</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_3cudaflagsutilsgetnixsystem","title":"cudaPackagesPackageSets.cudaPackages_11_3.cudaFlags.utils.getNixSystem","text":"<p>Maps NVIDIA redist arch to Nix system.</p> <p>NOTE: This function will be called by unsupported systems because <code>cudaPackages</code> is part of <code>all-packages.nix</code>, which is evaluated on all systems. As such, we need to handle unsupported systems gracefully.</p> <p>Type: function that evaluates to a(n) (one of \u201cunsupported\u201d, \u201caaarch64-linux\u201d, \u201cx86_64-linux\u201d, \u201cppc64le-linux\u201d, \u201cx86_64-windows\u201d)</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_3cudaflagsutilsgetredistarch","title":"cudaPackagesPackageSets.cudaPackages_11_3.cudaFlags.utils.getRedistArch","text":"<p>Maps Nix system to NVIDIA redist arch.</p> <p>NOTE: We swap out the default <code>linux-sbsa</code> redist (for server-grade ARM chips) with the <code>linux-aarch64</code> redist (which is for Jetson devices) if we\u2019re building any Jetson devices. Since both are based on aarch64, we can only have one or the other, otherwise there\u2019s an ambiguity as to which should be used.</p> <p>NOTE: This function will be called by unsupported systems because <code>cudaPackages</code> is part of <code>all-packages.nix</code>, which is evaluated on all systems. As such, we need to handle unsupported systems gracefully.</p> <p>Type: function that evaluates to a(n) (one of \u201cunsupported\u201d, \u201clinux-aarch64\u201d, \u201clinux-sbsa\u201d, \u201clinux-x86_64\u201d, \u201clinux-ppc64le\u201d, \u201cwindows-x86_64\u201d)</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_3cudaflagsutilsisdefault","title":"cudaPackagesPackageSets.cudaPackages_11_3.cudaFlags.utils.isDefault","text":"<p>Whether a GPU is included in the default capabilities</p> <p>Type: function that evaluates to a(n) boolean</p> <p>Default: <code>&lt;function, args: {dontDefaultAfter, isJetson}&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_3cudaflagsutilsissupported","title":"cudaPackagesPackageSets.cudaPackages_11_3.cudaFlags.utils.isSupported","text":"<p>Whether a CUDA version supports a given GPU</p> <p>Type: function that evaluates to a(n) boolean</p> <p>Default: <code>&lt;function, args: {maxCudaVersion, minCudaVersion}&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_3cudamajorminorversion","title":"cudaPackagesPackageSets.cudaPackages_11_3.cudaMajorMinorVersion","text":"<p>The major and minor version of the CUDA package set</p> <p>Type: string</p> <p>Default: <code>\"11.3\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_3cudamajorversion","title":"cudaPackagesPackageSets.cudaPackages_11_3.cudaMajorVersion","text":"<p>The major version of the CUDA package set</p> <p>Type: string</p> <p>Default: <code>\"11\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_3cudanewer","title":"cudaPackagesPackageSets.cudaPackages_11_3.cudaNewer","text":"<p>A utility to check if the CUDA version is newer than a given version</p> <p>Type: function that evaluates to a(n) boolean</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_3cudaolder","title":"cudaPackagesPackageSets.cudaPackages_11_3.cudaOlder","text":"<p>A utility to check if the CUDA version is older than a given version</p> <p>Type: function that evaluates to a(n) boolean</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_3cudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_3.cudaVersion","text":"<p>The CUDA version of the package set</p> <p>Type: A version number with a major and minor component.</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_4","title":"cudaPackagesPackageSets.cudaPackages_11_4","text":"<p>A CUDA package set for a particular version of CUDA</p> <p>Type: submodule</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules</p>"},{"location":"#cudapackagespackagesetscudapackages_11_4cudaatleast","title":"cudaPackagesPackageSets.cudaPackages_11_4.cudaAtLeast","text":"<p>A utility to check if the CUDA version is at least a given version</p> <p>Type: function that evaluates to a(n) boolean</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_4cudaatmost","title":"cudaPackagesPackageSets.cudaPackages_11_4.cudaAtMost","text":"<p>A utility to check if the CUDA version is at most a given version</p> <p>Type: function that evaluates to a(n) boolean</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_4cudaflagsdataarchnames","title":"cudaPackagesPackageSets.cudaPackages_11_4.cudaFlags.data.archNames","text":"<p>The names of the architectures to build for</p> <p>Type: list of string</p> <p>Default: <code>[ ]</code></p> <p>Example:</p> <pre><code>[\n  \"Turing\"\n  \"Ampere\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_4cudaflagsdataarches","title":"cudaPackagesPackageSets.cudaPackages_11_4.cudaFlags.data.arches","text":"<p>The architectures to build for. Includes a virtual architecture if forward compatibility is enabled.</p> <p>Type: list of (A real/physical CUDA architecture name. or A virtual CUDA architecture name.)</p> <p>Default:</p> <pre><code>[\n  \"sm_89\"\n]\n</code></pre> <p>Example:</p> <pre><code>[\n  \"sm_75\"\n  \"sm_86\"\n  \"compute_86\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_4cudaflagsdatacudacapabilities","title":"cudaPackagesPackageSets.cudaPackages_11_4.cudaFlags.data.cudaCapabilities","text":"<p>CUDA capabilities (hardware generations) to build for</p> <p>Type: list of A CUDA capability version.</p> <p>Default:</p> <pre><code>[\n  \"8.9\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_4cudaflagsdatacudaforwardcompat","title":"cudaPackagesPackageSets.cudaPackages_11_4.cudaFlags.data.cudaForwardCompat","text":"<p>Build with forward compatibility gencode (+PTX) to support future GPU generations</p> <p>Type: boolean</p> <p>Default: <code>false</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_4cudaflagsdatacudagpus","title":"cudaPackagesPackageSets.cudaPackages_11_4.cudaFlags.data.cudaGpus","text":"<p>CUDA GPUs to build for</p> <p>Type: list of (submodule)</p> <p>Default: <code>[ ]</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_4cudaflagsdatacudagpusarchname","title":"cudaPackagesPackageSets.cudaPackages_11_4.cudaFlags.data.cudaGpus.*.archName","text":"<p>Name of the microarchitecture</p> <p>Type: A CUDA architecture name, like Ampere or Ada.</p> <p>Example: <code>\"Kepler\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_4cudaflagsdatacudagpuscomputecapability","title":"cudaPackagesPackageSets.cudaPackages_11_4.cudaFlags.data.cudaGpus.*.computeCapability","text":"<p>Compute capability of the GPU</p> <p>Type: A CUDA capability version.</p> <p>Example: <code>\"3.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_4cudaflagsdatacudagpusdontdefaultafter","title":"cudaPackagesPackageSets.cudaPackages_11_4.cudaFlags.data.cudaGpus.*.dontDefaultAfter","text":"<p>The CUDA version after which to exclude this GPU from the list of default capabilities we build. null means we always include this GPU in the default capabilities if it is supported.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_4cudaflagsdatacudagpusisjetson","title":"cudaPackagesPackageSets.cudaPackages_11_4.cudaFlags.data.cudaGpus.*.isJetson","text":"<p>Whether a GPU is part of NVIDIA\u2019s line of Jetson embedded computers.</p> <p>This field is notable because it tells us what architecture to build for (as Jetson devices are aarch64). More on Jetson devices here: https://www.nvidia.com/en-us/autonomous-machines/embedded-systems/</p> <p>NOTE: These architectures are only built upon request.</p> <p>Type: one of true, false</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_4cudaflagsdatacudagpusmaxcudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_4.cudaFlags.data.cudaGpus.*.maxCudaVersion","text":"<p>The maximum (exclusive) CUDA version that supports this GPU. null means there is no maximum.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_4cudaflagsdatacudagpusmincudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_4.cudaFlags.data.cudaGpus.*.minCudaVersion","text":"<p>The minimum (inclusive) CUDA version that supports this GPU.</p> <p>Type: A version number with a major and minor component.</p> <p>Example: <code>\"10.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_4cudaflagsdatacudajetsongpus","title":"cudaPackagesPackageSets.cudaPackages_11_4.cudaFlags.data.cudaJetsonGpus","text":"<p>CUDA GPUs to build for, including only Jetson devices</p> <p>Type: list of (submodule)</p> <p>Default: <code>[ ]</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_4cudaflagsdatacudajetsongpusarchname","title":"cudaPackagesPackageSets.cudaPackages_11_4.cudaFlags.data.cudaJetsonGpus.*.archName","text":"<p>Name of the microarchitecture</p> <p>Type: A CUDA architecture name, like Ampere or Ada.</p> <p>Example: <code>\"Kepler\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_4cudaflagsdatacudajetsongpuscomputecapability","title":"cudaPackagesPackageSets.cudaPackages_11_4.cudaFlags.data.cudaJetsonGpus.*.computeCapability","text":"<p>Compute capability of the GPU</p> <p>Type: A CUDA capability version.</p> <p>Example: <code>\"3.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_4cudaflagsdatacudajetsongpusdontdefaultafter","title":"cudaPackagesPackageSets.cudaPackages_11_4.cudaFlags.data.cudaJetsonGpus.*.dontDefaultAfter","text":"<p>The CUDA version after which to exclude this GPU from the list of default capabilities we build. null means we always include this GPU in the default capabilities if it is supported.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_4cudaflagsdatacudajetsongpusisjetson","title":"cudaPackagesPackageSets.cudaPackages_11_4.cudaFlags.data.cudaJetsonGpus.*.isJetson","text":"<p>Whether a GPU is part of NVIDIA\u2019s line of Jetson embedded computers.</p> <p>This field is notable because it tells us what architecture to build for (as Jetson devices are aarch64). More on Jetson devices here: https://www.nvidia.com/en-us/autonomous-machines/embedded-systems/</p> <p>NOTE: These architectures are only built upon request.</p> <p>Type: one of true, false</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_4cudaflagsdatacudajetsongpusmaxcudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_4.cudaFlags.data.cudaJetsonGpus.*.maxCudaVersion","text":"<p>The maximum (exclusive) CUDA version that supports this GPU. null means there is no maximum.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_4cudaflagsdatacudajetsongpusmincudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_4.cudaFlags.data.cudaJetsonGpus.*.minCudaVersion","text":"<p>The minimum (inclusive) CUDA version that supports this GPU.</p> <p>Type: A version number with a major and minor component.</p> <p>Example: <code>\"10.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_4cudaflagsdatacudanonjetsongpus","title":"cudaPackagesPackageSets.cudaPackages_11_4.cudaFlags.data.cudaNonJetsonGpus","text":"<p>CUDA GPUs to build for, excluding Jetson devices</p> <p>Type: list of (submodule)</p> <p>Default: <code>[ ]</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_4cudaflagsdatacudanonjetsongpusarchname","title":"cudaPackagesPackageSets.cudaPackages_11_4.cudaFlags.data.cudaNonJetsonGpus.*.archName","text":"<p>Name of the microarchitecture</p> <p>Type: A CUDA architecture name, like Ampere or Ada.</p> <p>Example: <code>\"Kepler\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_4cudaflagsdatacudanonjetsongpuscomputecapability","title":"cudaPackagesPackageSets.cudaPackages_11_4.cudaFlags.data.cudaNonJetsonGpus.*.computeCapability","text":"<p>Compute capability of the GPU</p> <p>Type: A CUDA capability version.</p> <p>Example: <code>\"3.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_4cudaflagsdatacudanonjetsongpusdontdefaultafter","title":"cudaPackagesPackageSets.cudaPackages_11_4.cudaFlags.data.cudaNonJetsonGpus.*.dontDefaultAfter","text":"<p>The CUDA version after which to exclude this GPU from the list of default capabilities we build. null means we always include this GPU in the default capabilities if it is supported.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_4cudaflagsdatacudanonjetsongpusisjetson","title":"cudaPackagesPackageSets.cudaPackages_11_4.cudaFlags.data.cudaNonJetsonGpus.*.isJetson","text":"<p>Whether a GPU is part of NVIDIA\u2019s line of Jetson embedded computers.</p> <p>This field is notable because it tells us what architecture to build for (as Jetson devices are aarch64). More on Jetson devices here: https://www.nvidia.com/en-us/autonomous-machines/embedded-systems/</p> <p>NOTE: These architectures are only built upon request.</p> <p>Type: one of false, true</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_4cudaflagsdatacudanonjetsongpusmaxcudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_4.cudaFlags.data.cudaNonJetsonGpus.*.maxCudaVersion","text":"<p>The maximum (exclusive) CUDA version that supports this GPU. null means there is no maximum.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_4cudaflagsdatacudanonjetsongpusmincudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_4.cudaFlags.data.cudaNonJetsonGpus.*.minCudaVersion","text":"<p>The minimum (inclusive) CUDA version that supports this GPU.</p> <p>Type: A version number with a major and minor component.</p> <p>Example: <code>\"10.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_4cudaflagsdatacudasupport","title":"cudaPackagesPackageSets.cudaPackages_11_4.cudaFlags.data.cudaSupport","text":"<p>Build packages with CUDA support</p> <p>Type: boolean</p> <p>Default: <code>true</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_4cudaflagsdatadefaultcapabilities","title":"cudaPackagesPackageSets.cudaPackages_11_4.cudaFlags.data.defaultCapabilities","text":"<p>The default compute capabilities for a given CUDA version</p> <p>Type: list of A CUDA capability version.</p> <p>Default:</p> <pre><code>[\n  \"6.0\"\n  \"6.1\"\n  \"7.0\"\n  \"7.5\"\n  \"8.0\"\n  \"8.6\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_4cudaflagsdatadefaultgpus","title":"cudaPackagesPackageSets.cudaPackages_11_4.cudaFlags.data.defaultGpus","text":"<p>The default GPUs for a given CUDA version</p> <p>Type: list of (submodule)</p> <p>Default:</p> <pre><code>[\n  {\n    archName = \"Pascal\";\n    computeCapability = \"6.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Pascal\";\n    computeCapability = \"6.1\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Volta\";\n    computeCapability = \"7.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Turing\";\n    computeCapability = \"7.5\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Ampere\";\n    computeCapability = \"8.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"11.2\";\n  }\n  {\n    archName = \"Ampere\";\n    computeCapability = \"8.6\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"11.2\";\n  }\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_4cudaflagsdatadefaultgpusarchname","title":"cudaPackagesPackageSets.cudaPackages_11_4.cudaFlags.data.defaultGpus.*.archName","text":"<p>Name of the microarchitecture</p> <p>Type: A CUDA architecture name, like Ampere or Ada.</p> <p>Example: <code>\"Kepler\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_4cudaflagsdatadefaultgpuscomputecapability","title":"cudaPackagesPackageSets.cudaPackages_11_4.cudaFlags.data.defaultGpus.*.computeCapability","text":"<p>Compute capability of the GPU</p> <p>Type: A CUDA capability version.</p> <p>Example: <code>\"3.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_4cudaflagsdatadefaultgpusdontdefaultafter","title":"cudaPackagesPackageSets.cudaPackages_11_4.cudaFlags.data.defaultGpus.*.dontDefaultAfter","text":"<p>The CUDA version after which to exclude this GPU from the list of default capabilities we build. null means we always include this GPU in the default capabilities if it is supported.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_4cudaflagsdatadefaultgpusisjetson","title":"cudaPackagesPackageSets.cudaPackages_11_4.cudaFlags.data.defaultGpus.*.isJetson","text":"<p>Whether a GPU is part of NVIDIA\u2019s line of Jetson embedded computers.</p> <p>This field is notable because it tells us what architecture to build for (as Jetson devices are aarch64). More on Jetson devices here: https://www.nvidia.com/en-us/autonomous-machines/embedded-systems/</p> <p>NOTE: These architectures are only built upon request.</p> <p>Type: one of true, false</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_4cudaflagsdatadefaultgpusmaxcudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_4.cudaFlags.data.defaultGpus.*.maxCudaVersion","text":"<p>The maximum (exclusive) CUDA version that supports this GPU. null means there is no maximum.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_4cudaflagsdatadefaultgpusmincudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_4.cudaFlags.data.defaultGpus.*.minCudaVersion","text":"<p>The minimum (inclusive) CUDA version that supports this GPU.</p> <p>Type: A version number with a major and minor component.</p> <p>Example: <code>\"10.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_4cudaflagsdatagencodeargs","title":"cudaPackagesPackageSets.cudaPackages_11_4.cudaFlags.data.gencodeArgs","text":"<p>The gencode arguments to pass to NVCC</p> <p>Type: list of A `gencode` argument for the `nvcc` compiler.</p> <p>Default:</p> <pre><code>[\n  \"-gencode=arch=compute_89,code=sm_89\"\n]\n</code></pre> <p>Example:</p> <pre><code>[\n  \"-gencode=arch=compute_75,code=sm_75\"\n  \"-gencode=arch=compute_86,code=sm_86\"\n  \"-gencode=arch=compute_86,code=compute_86\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_4cudaflagsdatagencodestring","title":"cudaPackagesPackageSets.cudaPackages_11_4.cudaFlags.data.gencodeString","text":"<p>A space-separated string of CUDA gencode arguments to pass to NVCC</p> <p>Type: string</p> <p>Default: <code>\"-gencode=arch=compute_89,code=sm_89\"</code></p> <p>Example: <code>\"-gencode=arch=compute_75,code=sm_75 ... -gencode=arch=compute_86,code=compute_86\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_4cudaflagsdataisjetsonbuild","title":"cudaPackagesPackageSets.cudaPackages_11_4.cudaFlags.data.isJetsonBuild","text":"<p>Whether the build is for a Jetson device.</p> <p>Jetson devices cannot be targeted by the same binaries which target non-Jetson devices. While NVIDIA provides both <code>linux-aarch64</code> and <code>linux-sbsa</code> packages, which both target <code>aarch64</code>, they are built with different settings and cannot be mixed.</p> <p>Type: boolean</p> <p>Default: <code>false</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_4cudaflagsdatarealarches","title":"cudaPackagesPackageSets.cudaPackages_11_4.cudaFlags.data.realArches","text":"<p>The physical architectures to build for</p> <p>Type: list of A real/physical CUDA architecture name.</p> <p>Default:</p> <pre><code>[\n  \"sm_89\"\n]\n</code></pre> <p>Example:</p> <pre><code>[\n  \"sm_75\"\n  \"sm_86\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_4cudaflagsdatasupportedcapabilities","title":"cudaPackagesPackageSets.cudaPackages_11_4.cudaFlags.data.supportedCapabilities","text":"<p>The compute capabilities supported by a given CUDA version</p> <p>Type: list of A CUDA capability version.</p> <p>Default:</p> <pre><code>[\n  \"3.5\"\n  \"3.7\"\n  \"5.0\"\n  \"5.2\"\n  \"5.3\"\n  \"6.0\"\n  \"6.1\"\n  \"6.2\"\n  \"7.0\"\n  \"7.2\"\n  \"7.5\"\n  \"8.0\"\n  \"8.6\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_4cudaflagsdatasupportedgpus","title":"cudaPackagesPackageSets.cudaPackages_11_4.cudaFlags.data.supportedGpus","text":"<p>The GPUs supported by a given CUDA version</p> <p>Type: list of (submodule)</p> <p>Default:</p> <pre><code>[\n  {\n    archName = \"Kepler\";\n    computeCapability = \"3.5\";\n    dontDefaultAfter = \"11.0\";\n    isJetson = false;\n    maxCudaVersion = \"11.8\";\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Kepler\";\n    computeCapability = \"3.7\";\n    dontDefaultAfter = \"11.0\";\n    isJetson = false;\n    maxCudaVersion = \"11.8\";\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Maxwell\";\n    computeCapability = \"5.0\";\n    dontDefaultAfter = \"11.0\";\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Maxwell\";\n    computeCapability = \"5.2\";\n    dontDefaultAfter = \"11.0\";\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Maxwell\";\n    computeCapability = \"5.3\";\n    dontDefaultAfter = null;\n    isJetson = true;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Pascal\";\n    computeCapability = \"6.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Pascal\";\n    computeCapability = \"6.1\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Pascal\";\n    computeCapability = \"6.2\";\n    dontDefaultAfter = null;\n    isJetson = true;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Volta\";\n    computeCapability = \"7.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Volta\";\n    computeCapability = \"7.2\";\n    dontDefaultAfter = null;\n    isJetson = true;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Turing\";\n    computeCapability = \"7.5\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Ampere\";\n    computeCapability = \"8.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"11.2\";\n  }\n  {\n    archName = \"Ampere\";\n    computeCapability = \"8.6\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"11.2\";\n  }\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_4cudaflagsdatasupportedgpusarchname","title":"cudaPackagesPackageSets.cudaPackages_11_4.cudaFlags.data.supportedGpus.*.archName","text":"<p>Name of the microarchitecture</p> <p>Type: A CUDA architecture name, like Ampere or Ada.</p> <p>Example: <code>\"Kepler\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_4cudaflagsdatasupportedgpuscomputecapability","title":"cudaPackagesPackageSets.cudaPackages_11_4.cudaFlags.data.supportedGpus.*.computeCapability","text":"<p>Compute capability of the GPU</p> <p>Type: A CUDA capability version.</p> <p>Example: <code>\"3.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_4cudaflagsdatasupportedgpusdontdefaultafter","title":"cudaPackagesPackageSets.cudaPackages_11_4.cudaFlags.data.supportedGpus.*.dontDefaultAfter","text":"<p>The CUDA version after which to exclude this GPU from the list of default capabilities we build. null means we always include this GPU in the default capabilities if it is supported.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_4cudaflagsdatasupportedgpusisjetson","title":"cudaPackagesPackageSets.cudaPackages_11_4.cudaFlags.data.supportedGpus.*.isJetson","text":"<p>Whether a GPU is part of NVIDIA\u2019s line of Jetson embedded computers.</p> <p>This field is notable because it tells us what architecture to build for (as Jetson devices are aarch64). More on Jetson devices here: https://www.nvidia.com/en-us/autonomous-machines/embedded-systems/</p> <p>NOTE: These architectures are only built upon request.</p> <p>Type: one of true, false</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_4cudaflagsdatasupportedgpusmaxcudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_4.cudaFlags.data.supportedGpus.*.maxCudaVersion","text":"<p>The maximum (exclusive) CUDA version that supports this GPU. null means there is no maximum.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_4cudaflagsdatasupportedgpusmincudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_4.cudaFlags.data.supportedGpus.*.minCudaVersion","text":"<p>The minimum (inclusive) CUDA version that supports this GPU.</p> <p>Type: A version number with a major and minor component.</p> <p>Example: <code>\"10.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_4cudaflagsdatavirtualarches","title":"cudaPackagesPackageSets.cudaPackages_11_4.cudaFlags.data.virtualArches","text":"<p>The virtual architectures to build for. These are typically used for forward compatibility, when trying to support an architecture newer than the CUDA version allows.</p> <p>Type: list of A virtual CUDA architecture name.</p> <p>Default:</p> <pre><code>[\n  \"compute_89\"\n]\n</code></pre> <p>Example:</p> <pre><code>[\n  \"compute_75\"\n  \"compute_86\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_4cudaflagsutilsarchmapper","title":"cudaPackagesPackageSets.cudaPackages_11_4.cudaFlags.utils.archMapper","text":"<p>Maps a feature across a list of compute capabilities to produce a list of architectures.</p> <p>For example, \u201csm\u201d and [ \u201c8.0\u201d \u201c8.6\u201d \u201c8.7\u201d ] yield [ \u201csm_80\u201d \u201csm_86\u201d \u201csm_87\u201d ].</p> <p>Type: function that evaluates to a(n) function that evaluates to a(n) list of string</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_4cudaflagsutilsdropdot","title":"cudaPackagesPackageSets.cudaPackages_11_4.cudaFlags.utils.dropDot","text":"<p>Drops dots from a string.</p> <p>Type: function that evaluates to a(n) string</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_4cudaflagsutilsgencodemapper","title":"cudaPackagesPackageSets.cudaPackages_11_4.cudaFlags.utils.gencodeMapper","text":"<p>Maps a feature across a list of compute capabilities to produce a list of gencode arguments.</p> <p>For example, \u201csm\u201d and [ \u201c8.0\u201d \u201c8.6\u201d \u201c8.7\u201d ] yield [ \u201c-gencode=arch=compute_80,code=sm_80\u201d \u201c-gencode=arch=compute_86,code=sm_86\u201d \u201c-gencode=arch=compute_87,code=sm_87\u201d ].</p> <p>Type: function that evaluates to a(n) function that evaluates to a(n) list of string</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_4cudaflagsutilsgetnixsystem","title":"cudaPackagesPackageSets.cudaPackages_11_4.cudaFlags.utils.getNixSystem","text":"<p>Maps NVIDIA redist arch to Nix system.</p> <p>NOTE: This function will be called by unsupported systems because <code>cudaPackages</code> is part of <code>all-packages.nix</code>, which is evaluated on all systems. As such, we need to handle unsupported systems gracefully.</p> <p>Type: function that evaluates to a(n) (one of \u201cunsupported\u201d, \u201caaarch64-linux\u201d, \u201cx86_64-linux\u201d, \u201cppc64le-linux\u201d, \u201cx86_64-windows\u201d)</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_4cudaflagsutilsgetredistarch","title":"cudaPackagesPackageSets.cudaPackages_11_4.cudaFlags.utils.getRedistArch","text":"<p>Maps Nix system to NVIDIA redist arch.</p> <p>NOTE: We swap out the default <code>linux-sbsa</code> redist (for server-grade ARM chips) with the <code>linux-aarch64</code> redist (which is for Jetson devices) if we\u2019re building any Jetson devices. Since both are based on aarch64, we can only have one or the other, otherwise there\u2019s an ambiguity as to which should be used.</p> <p>NOTE: This function will be called by unsupported systems because <code>cudaPackages</code> is part of <code>all-packages.nix</code>, which is evaluated on all systems. As such, we need to handle unsupported systems gracefully.</p> <p>Type: function that evaluates to a(n) (one of \u201cunsupported\u201d, \u201clinux-aarch64\u201d, \u201clinux-sbsa\u201d, \u201clinux-x86_64\u201d, \u201clinux-ppc64le\u201d, \u201cwindows-x86_64\u201d)</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_4cudaflagsutilsisdefault","title":"cudaPackagesPackageSets.cudaPackages_11_4.cudaFlags.utils.isDefault","text":"<p>Whether a GPU is included in the default capabilities</p> <p>Type: function that evaluates to a(n) boolean</p> <p>Default: <code>&lt;function, args: {dontDefaultAfter, isJetson}&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_4cudaflagsutilsissupported","title":"cudaPackagesPackageSets.cudaPackages_11_4.cudaFlags.utils.isSupported","text":"<p>Whether a CUDA version supports a given GPU</p> <p>Type: function that evaluates to a(n) boolean</p> <p>Default: <code>&lt;function, args: {maxCudaVersion, minCudaVersion}&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_4cudamajorminorversion","title":"cudaPackagesPackageSets.cudaPackages_11_4.cudaMajorMinorVersion","text":"<p>The major and minor version of the CUDA package set</p> <p>Type: string</p> <p>Default: <code>\"11.4\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_4cudamajorversion","title":"cudaPackagesPackageSets.cudaPackages_11_4.cudaMajorVersion","text":"<p>The major version of the CUDA package set</p> <p>Type: string</p> <p>Default: <code>\"11\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_4cudanewer","title":"cudaPackagesPackageSets.cudaPackages_11_4.cudaNewer","text":"<p>A utility to check if the CUDA version is newer than a given version</p> <p>Type: function that evaluates to a(n) boolean</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_4cudaolder","title":"cudaPackagesPackageSets.cudaPackages_11_4.cudaOlder","text":"<p>A utility to check if the CUDA version is older than a given version</p> <p>Type: function that evaluates to a(n) boolean</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_4cudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_4.cudaVersion","text":"<p>The CUDA version of the package set</p> <p>Type: A version number with a major and minor component.</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_5","title":"cudaPackagesPackageSets.cudaPackages_11_5","text":"<p>A CUDA package set for a particular version of CUDA</p> <p>Type: submodule</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules</p>"},{"location":"#cudapackagespackagesetscudapackages_11_5cudaatleast","title":"cudaPackagesPackageSets.cudaPackages_11_5.cudaAtLeast","text":"<p>A utility to check if the CUDA version is at least a given version</p> <p>Type: function that evaluates to a(n) boolean</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_5cudaatmost","title":"cudaPackagesPackageSets.cudaPackages_11_5.cudaAtMost","text":"<p>A utility to check if the CUDA version is at most a given version</p> <p>Type: function that evaluates to a(n) boolean</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_5cudaflagsdataarchnames","title":"cudaPackagesPackageSets.cudaPackages_11_5.cudaFlags.data.archNames","text":"<p>The names of the architectures to build for</p> <p>Type: list of string</p> <p>Default: <code>[ ]</code></p> <p>Example:</p> <pre><code>[\n  \"Turing\"\n  \"Ampere\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_5cudaflagsdataarches","title":"cudaPackagesPackageSets.cudaPackages_11_5.cudaFlags.data.arches","text":"<p>The architectures to build for. Includes a virtual architecture if forward compatibility is enabled.</p> <p>Type: list of (A real/physical CUDA architecture name. or A virtual CUDA architecture name.)</p> <p>Default:</p> <pre><code>[\n  \"sm_89\"\n]\n</code></pre> <p>Example:</p> <pre><code>[\n  \"sm_75\"\n  \"sm_86\"\n  \"compute_86\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_5cudaflagsdatacudacapabilities","title":"cudaPackagesPackageSets.cudaPackages_11_5.cudaFlags.data.cudaCapabilities","text":"<p>CUDA capabilities (hardware generations) to build for</p> <p>Type: list of A CUDA capability version.</p> <p>Default:</p> <pre><code>[\n  \"8.9\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_5cudaflagsdatacudaforwardcompat","title":"cudaPackagesPackageSets.cudaPackages_11_5.cudaFlags.data.cudaForwardCompat","text":"<p>Build with forward compatibility gencode (+PTX) to support future GPU generations</p> <p>Type: boolean</p> <p>Default: <code>false</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_5cudaflagsdatacudagpus","title":"cudaPackagesPackageSets.cudaPackages_11_5.cudaFlags.data.cudaGpus","text":"<p>CUDA GPUs to build for</p> <p>Type: list of (submodule)</p> <p>Default: <code>[ ]</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_5cudaflagsdatacudagpusarchname","title":"cudaPackagesPackageSets.cudaPackages_11_5.cudaFlags.data.cudaGpus.*.archName","text":"<p>Name of the microarchitecture</p> <p>Type: A CUDA architecture name, like Ampere or Ada.</p> <p>Example: <code>\"Kepler\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_5cudaflagsdatacudagpuscomputecapability","title":"cudaPackagesPackageSets.cudaPackages_11_5.cudaFlags.data.cudaGpus.*.computeCapability","text":"<p>Compute capability of the GPU</p> <p>Type: A CUDA capability version.</p> <p>Example: <code>\"3.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_5cudaflagsdatacudagpusdontdefaultafter","title":"cudaPackagesPackageSets.cudaPackages_11_5.cudaFlags.data.cudaGpus.*.dontDefaultAfter","text":"<p>The CUDA version after which to exclude this GPU from the list of default capabilities we build. null means we always include this GPU in the default capabilities if it is supported.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_5cudaflagsdatacudagpusisjetson","title":"cudaPackagesPackageSets.cudaPackages_11_5.cudaFlags.data.cudaGpus.*.isJetson","text":"<p>Whether a GPU is part of NVIDIA\u2019s line of Jetson embedded computers.</p> <p>This field is notable because it tells us what architecture to build for (as Jetson devices are aarch64). More on Jetson devices here: https://www.nvidia.com/en-us/autonomous-machines/embedded-systems/</p> <p>NOTE: These architectures are only built upon request.</p> <p>Type: one of true, false</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_5cudaflagsdatacudagpusmaxcudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_5.cudaFlags.data.cudaGpus.*.maxCudaVersion","text":"<p>The maximum (exclusive) CUDA version that supports this GPU. null means there is no maximum.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_5cudaflagsdatacudagpusmincudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_5.cudaFlags.data.cudaGpus.*.minCudaVersion","text":"<p>The minimum (inclusive) CUDA version that supports this GPU.</p> <p>Type: A version number with a major and minor component.</p> <p>Example: <code>\"10.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_5cudaflagsdatacudajetsongpus","title":"cudaPackagesPackageSets.cudaPackages_11_5.cudaFlags.data.cudaJetsonGpus","text":"<p>CUDA GPUs to build for, including only Jetson devices</p> <p>Type: list of (submodule)</p> <p>Default: <code>[ ]</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_5cudaflagsdatacudajetsongpusarchname","title":"cudaPackagesPackageSets.cudaPackages_11_5.cudaFlags.data.cudaJetsonGpus.*.archName","text":"<p>Name of the microarchitecture</p> <p>Type: A CUDA architecture name, like Ampere or Ada.</p> <p>Example: <code>\"Kepler\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_5cudaflagsdatacudajetsongpuscomputecapability","title":"cudaPackagesPackageSets.cudaPackages_11_5.cudaFlags.data.cudaJetsonGpus.*.computeCapability","text":"<p>Compute capability of the GPU</p> <p>Type: A CUDA capability version.</p> <p>Example: <code>\"3.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_5cudaflagsdatacudajetsongpusdontdefaultafter","title":"cudaPackagesPackageSets.cudaPackages_11_5.cudaFlags.data.cudaJetsonGpus.*.dontDefaultAfter","text":"<p>The CUDA version after which to exclude this GPU from the list of default capabilities we build. null means we always include this GPU in the default capabilities if it is supported.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_5cudaflagsdatacudajetsongpusisjetson","title":"cudaPackagesPackageSets.cudaPackages_11_5.cudaFlags.data.cudaJetsonGpus.*.isJetson","text":"<p>Whether a GPU is part of NVIDIA\u2019s line of Jetson embedded computers.</p> <p>This field is notable because it tells us what architecture to build for (as Jetson devices are aarch64). More on Jetson devices here: https://www.nvidia.com/en-us/autonomous-machines/embedded-systems/</p> <p>NOTE: These architectures are only built upon request.</p> <p>Type: one of true, false</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_5cudaflagsdatacudajetsongpusmaxcudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_5.cudaFlags.data.cudaJetsonGpus.*.maxCudaVersion","text":"<p>The maximum (exclusive) CUDA version that supports this GPU. null means there is no maximum.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_5cudaflagsdatacudajetsongpusmincudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_5.cudaFlags.data.cudaJetsonGpus.*.minCudaVersion","text":"<p>The minimum (inclusive) CUDA version that supports this GPU.</p> <p>Type: A version number with a major and minor component.</p> <p>Example: <code>\"10.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_5cudaflagsdatacudanonjetsongpus","title":"cudaPackagesPackageSets.cudaPackages_11_5.cudaFlags.data.cudaNonJetsonGpus","text":"<p>CUDA GPUs to build for, excluding Jetson devices</p> <p>Type: list of (submodule)</p> <p>Default: <code>[ ]</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_5cudaflagsdatacudanonjetsongpusarchname","title":"cudaPackagesPackageSets.cudaPackages_11_5.cudaFlags.data.cudaNonJetsonGpus.*.archName","text":"<p>Name of the microarchitecture</p> <p>Type: A CUDA architecture name, like Ampere or Ada.</p> <p>Example: <code>\"Kepler\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_5cudaflagsdatacudanonjetsongpuscomputecapability","title":"cudaPackagesPackageSets.cudaPackages_11_5.cudaFlags.data.cudaNonJetsonGpus.*.computeCapability","text":"<p>Compute capability of the GPU</p> <p>Type: A CUDA capability version.</p> <p>Example: <code>\"3.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_5cudaflagsdatacudanonjetsongpusdontdefaultafter","title":"cudaPackagesPackageSets.cudaPackages_11_5.cudaFlags.data.cudaNonJetsonGpus.*.dontDefaultAfter","text":"<p>The CUDA version after which to exclude this GPU from the list of default capabilities we build. null means we always include this GPU in the default capabilities if it is supported.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_5cudaflagsdatacudanonjetsongpusisjetson","title":"cudaPackagesPackageSets.cudaPackages_11_5.cudaFlags.data.cudaNonJetsonGpus.*.isJetson","text":"<p>Whether a GPU is part of NVIDIA\u2019s line of Jetson embedded computers.</p> <p>This field is notable because it tells us what architecture to build for (as Jetson devices are aarch64). More on Jetson devices here: https://www.nvidia.com/en-us/autonomous-machines/embedded-systems/</p> <p>NOTE: These architectures are only built upon request.</p> <p>Type: one of false, true</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_5cudaflagsdatacudanonjetsongpusmaxcudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_5.cudaFlags.data.cudaNonJetsonGpus.*.maxCudaVersion","text":"<p>The maximum (exclusive) CUDA version that supports this GPU. null means there is no maximum.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_5cudaflagsdatacudanonjetsongpusmincudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_5.cudaFlags.data.cudaNonJetsonGpus.*.minCudaVersion","text":"<p>The minimum (inclusive) CUDA version that supports this GPU.</p> <p>Type: A version number with a major and minor component.</p> <p>Example: <code>\"10.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_5cudaflagsdatacudasupport","title":"cudaPackagesPackageSets.cudaPackages_11_5.cudaFlags.data.cudaSupport","text":"<p>Build packages with CUDA support</p> <p>Type: boolean</p> <p>Default: <code>true</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_5cudaflagsdatadefaultcapabilities","title":"cudaPackagesPackageSets.cudaPackages_11_5.cudaFlags.data.defaultCapabilities","text":"<p>The default compute capabilities for a given CUDA version</p> <p>Type: list of A CUDA capability version.</p> <p>Default:</p> <pre><code>[\n  \"6.0\"\n  \"6.1\"\n  \"7.0\"\n  \"7.5\"\n  \"8.0\"\n  \"8.6\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_5cudaflagsdatadefaultgpus","title":"cudaPackagesPackageSets.cudaPackages_11_5.cudaFlags.data.defaultGpus","text":"<p>The default GPUs for a given CUDA version</p> <p>Type: list of (submodule)</p> <p>Default:</p> <pre><code>[\n  {\n    archName = \"Pascal\";\n    computeCapability = \"6.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Pascal\";\n    computeCapability = \"6.1\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Volta\";\n    computeCapability = \"7.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Turing\";\n    computeCapability = \"7.5\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Ampere\";\n    computeCapability = \"8.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"11.2\";\n  }\n  {\n    archName = \"Ampere\";\n    computeCapability = \"8.6\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"11.2\";\n  }\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_5cudaflagsdatadefaultgpusarchname","title":"cudaPackagesPackageSets.cudaPackages_11_5.cudaFlags.data.defaultGpus.*.archName","text":"<p>Name of the microarchitecture</p> <p>Type: A CUDA architecture name, like Ampere or Ada.</p> <p>Example: <code>\"Kepler\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_5cudaflagsdatadefaultgpuscomputecapability","title":"cudaPackagesPackageSets.cudaPackages_11_5.cudaFlags.data.defaultGpus.*.computeCapability","text":"<p>Compute capability of the GPU</p> <p>Type: A CUDA capability version.</p> <p>Example: <code>\"3.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_5cudaflagsdatadefaultgpusdontdefaultafter","title":"cudaPackagesPackageSets.cudaPackages_11_5.cudaFlags.data.defaultGpus.*.dontDefaultAfter","text":"<p>The CUDA version after which to exclude this GPU from the list of default capabilities we build. null means we always include this GPU in the default capabilities if it is supported.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_5cudaflagsdatadefaultgpusisjetson","title":"cudaPackagesPackageSets.cudaPackages_11_5.cudaFlags.data.defaultGpus.*.isJetson","text":"<p>Whether a GPU is part of NVIDIA\u2019s line of Jetson embedded computers.</p> <p>This field is notable because it tells us what architecture to build for (as Jetson devices are aarch64). More on Jetson devices here: https://www.nvidia.com/en-us/autonomous-machines/embedded-systems/</p> <p>NOTE: These architectures are only built upon request.</p> <p>Type: one of true, false</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_5cudaflagsdatadefaultgpusmaxcudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_5.cudaFlags.data.defaultGpus.*.maxCudaVersion","text":"<p>The maximum (exclusive) CUDA version that supports this GPU. null means there is no maximum.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_5cudaflagsdatadefaultgpusmincudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_5.cudaFlags.data.defaultGpus.*.minCudaVersion","text":"<p>The minimum (inclusive) CUDA version that supports this GPU.</p> <p>Type: A version number with a major and minor component.</p> <p>Example: <code>\"10.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_5cudaflagsdatagencodeargs","title":"cudaPackagesPackageSets.cudaPackages_11_5.cudaFlags.data.gencodeArgs","text":"<p>The gencode arguments to pass to NVCC</p> <p>Type: list of A `gencode` argument for the `nvcc` compiler.</p> <p>Default:</p> <pre><code>[\n  \"-gencode=arch=compute_89,code=sm_89\"\n]\n</code></pre> <p>Example:</p> <pre><code>[\n  \"-gencode=arch=compute_75,code=sm_75\"\n  \"-gencode=arch=compute_86,code=sm_86\"\n  \"-gencode=arch=compute_86,code=compute_86\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_5cudaflagsdatagencodestring","title":"cudaPackagesPackageSets.cudaPackages_11_5.cudaFlags.data.gencodeString","text":"<p>A space-separated string of CUDA gencode arguments to pass to NVCC</p> <p>Type: string</p> <p>Default: <code>\"-gencode=arch=compute_89,code=sm_89\"</code></p> <p>Example: <code>\"-gencode=arch=compute_75,code=sm_75 ... -gencode=arch=compute_86,code=compute_86\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_5cudaflagsdataisjetsonbuild","title":"cudaPackagesPackageSets.cudaPackages_11_5.cudaFlags.data.isJetsonBuild","text":"<p>Whether the build is for a Jetson device.</p> <p>Jetson devices cannot be targeted by the same binaries which target non-Jetson devices. While NVIDIA provides both <code>linux-aarch64</code> and <code>linux-sbsa</code> packages, which both target <code>aarch64</code>, they are built with different settings and cannot be mixed.</p> <p>Type: boolean</p> <p>Default: <code>false</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_5cudaflagsdatarealarches","title":"cudaPackagesPackageSets.cudaPackages_11_5.cudaFlags.data.realArches","text":"<p>The physical architectures to build for</p> <p>Type: list of A real/physical CUDA architecture name.</p> <p>Default:</p> <pre><code>[\n  \"sm_89\"\n]\n</code></pre> <p>Example:</p> <pre><code>[\n  \"sm_75\"\n  \"sm_86\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_5cudaflagsdatasupportedcapabilities","title":"cudaPackagesPackageSets.cudaPackages_11_5.cudaFlags.data.supportedCapabilities","text":"<p>The compute capabilities supported by a given CUDA version</p> <p>Type: list of A CUDA capability version.</p> <p>Default:</p> <pre><code>[\n  \"3.5\"\n  \"3.7\"\n  \"5.0\"\n  \"5.2\"\n  \"5.3\"\n  \"6.0\"\n  \"6.1\"\n  \"6.2\"\n  \"7.0\"\n  \"7.2\"\n  \"7.5\"\n  \"8.0\"\n  \"8.6\"\n  \"8.7\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_5cudaflagsdatasupportedgpus","title":"cudaPackagesPackageSets.cudaPackages_11_5.cudaFlags.data.supportedGpus","text":"<p>The GPUs supported by a given CUDA version</p> <p>Type: list of (submodule)</p> <p>Default:</p> <pre><code>[\n  {\n    archName = \"Kepler\";\n    computeCapability = \"3.5\";\n    dontDefaultAfter = \"11.0\";\n    isJetson = false;\n    maxCudaVersion = \"11.8\";\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Kepler\";\n    computeCapability = \"3.7\";\n    dontDefaultAfter = \"11.0\";\n    isJetson = false;\n    maxCudaVersion = \"11.8\";\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Maxwell\";\n    computeCapability = \"5.0\";\n    dontDefaultAfter = \"11.0\";\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Maxwell\";\n    computeCapability = \"5.2\";\n    dontDefaultAfter = \"11.0\";\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Maxwell\";\n    computeCapability = \"5.3\";\n    dontDefaultAfter = null;\n    isJetson = true;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Pascal\";\n    computeCapability = \"6.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Pascal\";\n    computeCapability = \"6.1\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Pascal\";\n    computeCapability = \"6.2\";\n    dontDefaultAfter = null;\n    isJetson = true;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Volta\";\n    computeCapability = \"7.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Volta\";\n    computeCapability = \"7.2\";\n    dontDefaultAfter = null;\n    isJetson = true;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Turing\";\n    computeCapability = \"7.5\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Ampere\";\n    computeCapability = \"8.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"11.2\";\n  }\n  {\n    archName = \"Ampere\";\n    computeCapability = \"8.6\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"11.2\";\n  }\n  {\n    archName = \"Ampere\";\n    computeCapability = \"8.7\";\n    dontDefaultAfter = null;\n    isJetson = true;\n    maxCudaVersion = null;\n    minCudaVersion = \"11.5\";\n  }\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_5cudaflagsdatasupportedgpusarchname","title":"cudaPackagesPackageSets.cudaPackages_11_5.cudaFlags.data.supportedGpus.*.archName","text":"<p>Name of the microarchitecture</p> <p>Type: A CUDA architecture name, like Ampere or Ada.</p> <p>Example: <code>\"Kepler\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_5cudaflagsdatasupportedgpuscomputecapability","title":"cudaPackagesPackageSets.cudaPackages_11_5.cudaFlags.data.supportedGpus.*.computeCapability","text":"<p>Compute capability of the GPU</p> <p>Type: A CUDA capability version.</p> <p>Example: <code>\"3.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_5cudaflagsdatasupportedgpusdontdefaultafter","title":"cudaPackagesPackageSets.cudaPackages_11_5.cudaFlags.data.supportedGpus.*.dontDefaultAfter","text":"<p>The CUDA version after which to exclude this GPU from the list of default capabilities we build. null means we always include this GPU in the default capabilities if it is supported.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_5cudaflagsdatasupportedgpusisjetson","title":"cudaPackagesPackageSets.cudaPackages_11_5.cudaFlags.data.supportedGpus.*.isJetson","text":"<p>Whether a GPU is part of NVIDIA\u2019s line of Jetson embedded computers.</p> <p>This field is notable because it tells us what architecture to build for (as Jetson devices are aarch64). More on Jetson devices here: https://www.nvidia.com/en-us/autonomous-machines/embedded-systems/</p> <p>NOTE: These architectures are only built upon request.</p> <p>Type: one of true, false</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_5cudaflagsdatasupportedgpusmaxcudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_5.cudaFlags.data.supportedGpus.*.maxCudaVersion","text":"<p>The maximum (exclusive) CUDA version that supports this GPU. null means there is no maximum.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_5cudaflagsdatasupportedgpusmincudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_5.cudaFlags.data.supportedGpus.*.minCudaVersion","text":"<p>The minimum (inclusive) CUDA version that supports this GPU.</p> <p>Type: A version number with a major and minor component.</p> <p>Example: <code>\"10.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_5cudaflagsdatavirtualarches","title":"cudaPackagesPackageSets.cudaPackages_11_5.cudaFlags.data.virtualArches","text":"<p>The virtual architectures to build for. These are typically used for forward compatibility, when trying to support an architecture newer than the CUDA version allows.</p> <p>Type: list of A virtual CUDA architecture name.</p> <p>Default:</p> <pre><code>[\n  \"compute_89\"\n]\n</code></pre> <p>Example:</p> <pre><code>[\n  \"compute_75\"\n  \"compute_86\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_5cudaflagsutilsarchmapper","title":"cudaPackagesPackageSets.cudaPackages_11_5.cudaFlags.utils.archMapper","text":"<p>Maps a feature across a list of compute capabilities to produce a list of architectures.</p> <p>For example, \u201csm\u201d and [ \u201c8.0\u201d \u201c8.6\u201d \u201c8.7\u201d ] yield [ \u201csm_80\u201d \u201csm_86\u201d \u201csm_87\u201d ].</p> <p>Type: function that evaluates to a(n) function that evaluates to a(n) list of string</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_5cudaflagsutilsdropdot","title":"cudaPackagesPackageSets.cudaPackages_11_5.cudaFlags.utils.dropDot","text":"<p>Drops dots from a string.</p> <p>Type: function that evaluates to a(n) string</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_5cudaflagsutilsgencodemapper","title":"cudaPackagesPackageSets.cudaPackages_11_5.cudaFlags.utils.gencodeMapper","text":"<p>Maps a feature across a list of compute capabilities to produce a list of gencode arguments.</p> <p>For example, \u201csm\u201d and [ \u201c8.0\u201d \u201c8.6\u201d \u201c8.7\u201d ] yield [ \u201c-gencode=arch=compute_80,code=sm_80\u201d \u201c-gencode=arch=compute_86,code=sm_86\u201d \u201c-gencode=arch=compute_87,code=sm_87\u201d ].</p> <p>Type: function that evaluates to a(n) function that evaluates to a(n) list of string</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_5cudaflagsutilsgetnixsystem","title":"cudaPackagesPackageSets.cudaPackages_11_5.cudaFlags.utils.getNixSystem","text":"<p>Maps NVIDIA redist arch to Nix system.</p> <p>NOTE: This function will be called by unsupported systems because <code>cudaPackages</code> is part of <code>all-packages.nix</code>, which is evaluated on all systems. As such, we need to handle unsupported systems gracefully.</p> <p>Type: function that evaluates to a(n) (one of \u201cunsupported\u201d, \u201caaarch64-linux\u201d, \u201cx86_64-linux\u201d, \u201cppc64le-linux\u201d, \u201cx86_64-windows\u201d)</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_5cudaflagsutilsgetredistarch","title":"cudaPackagesPackageSets.cudaPackages_11_5.cudaFlags.utils.getRedistArch","text":"<p>Maps Nix system to NVIDIA redist arch.</p> <p>NOTE: We swap out the default <code>linux-sbsa</code> redist (for server-grade ARM chips) with the <code>linux-aarch64</code> redist (which is for Jetson devices) if we\u2019re building any Jetson devices. Since both are based on aarch64, we can only have one or the other, otherwise there\u2019s an ambiguity as to which should be used.</p> <p>NOTE: This function will be called by unsupported systems because <code>cudaPackages</code> is part of <code>all-packages.nix</code>, which is evaluated on all systems. As such, we need to handle unsupported systems gracefully.</p> <p>Type: function that evaluates to a(n) (one of \u201cunsupported\u201d, \u201clinux-aarch64\u201d, \u201clinux-sbsa\u201d, \u201clinux-x86_64\u201d, \u201clinux-ppc64le\u201d, \u201cwindows-x86_64\u201d)</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_5cudaflagsutilsisdefault","title":"cudaPackagesPackageSets.cudaPackages_11_5.cudaFlags.utils.isDefault","text":"<p>Whether a GPU is included in the default capabilities</p> <p>Type: function that evaluates to a(n) boolean</p> <p>Default: <code>&lt;function, args: {dontDefaultAfter, isJetson}&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_5cudaflagsutilsissupported","title":"cudaPackagesPackageSets.cudaPackages_11_5.cudaFlags.utils.isSupported","text":"<p>Whether a CUDA version supports a given GPU</p> <p>Type: function that evaluates to a(n) boolean</p> <p>Default: <code>&lt;function, args: {maxCudaVersion, minCudaVersion}&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_5cudamajorminorversion","title":"cudaPackagesPackageSets.cudaPackages_11_5.cudaMajorMinorVersion","text":"<p>The major and minor version of the CUDA package set</p> <p>Type: string</p> <p>Default: <code>\"11.5\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_5cudamajorversion","title":"cudaPackagesPackageSets.cudaPackages_11_5.cudaMajorVersion","text":"<p>The major version of the CUDA package set</p> <p>Type: string</p> <p>Default: <code>\"11\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_5cudanewer","title":"cudaPackagesPackageSets.cudaPackages_11_5.cudaNewer","text":"<p>A utility to check if the CUDA version is newer than a given version</p> <p>Type: function that evaluates to a(n) boolean</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_5cudaolder","title":"cudaPackagesPackageSets.cudaPackages_11_5.cudaOlder","text":"<p>A utility to check if the CUDA version is older than a given version</p> <p>Type: function that evaluates to a(n) boolean</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_5cudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_5.cudaVersion","text":"<p>The CUDA version of the package set</p> <p>Type: A version number with a major and minor component.</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_6","title":"cudaPackagesPackageSets.cudaPackages_11_6","text":"<p>A CUDA package set for a particular version of CUDA</p> <p>Type: submodule</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules</p>"},{"location":"#cudapackagespackagesetscudapackages_11_6cudaatleast","title":"cudaPackagesPackageSets.cudaPackages_11_6.cudaAtLeast","text":"<p>A utility to check if the CUDA version is at least a given version</p> <p>Type: function that evaluates to a(n) boolean</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_6cudaatmost","title":"cudaPackagesPackageSets.cudaPackages_11_6.cudaAtMost","text":"<p>A utility to check if the CUDA version is at most a given version</p> <p>Type: function that evaluates to a(n) boolean</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_6cudaflagsdataarchnames","title":"cudaPackagesPackageSets.cudaPackages_11_6.cudaFlags.data.archNames","text":"<p>The names of the architectures to build for</p> <p>Type: list of string</p> <p>Default: <code>[ ]</code></p> <p>Example:</p> <pre><code>[\n  \"Turing\"\n  \"Ampere\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_6cudaflagsdataarches","title":"cudaPackagesPackageSets.cudaPackages_11_6.cudaFlags.data.arches","text":"<p>The architectures to build for. Includes a virtual architecture if forward compatibility is enabled.</p> <p>Type: list of (A real/physical CUDA architecture name. or A virtual CUDA architecture name.)</p> <p>Default:</p> <pre><code>[\n  \"sm_89\"\n]\n</code></pre> <p>Example:</p> <pre><code>[\n  \"sm_75\"\n  \"sm_86\"\n  \"compute_86\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_6cudaflagsdatacudacapabilities","title":"cudaPackagesPackageSets.cudaPackages_11_6.cudaFlags.data.cudaCapabilities","text":"<p>CUDA capabilities (hardware generations) to build for</p> <p>Type: list of A CUDA capability version.</p> <p>Default:</p> <pre><code>[\n  \"8.9\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_6cudaflagsdatacudaforwardcompat","title":"cudaPackagesPackageSets.cudaPackages_11_6.cudaFlags.data.cudaForwardCompat","text":"<p>Build with forward compatibility gencode (+PTX) to support future GPU generations</p> <p>Type: boolean</p> <p>Default: <code>false</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_6cudaflagsdatacudagpus","title":"cudaPackagesPackageSets.cudaPackages_11_6.cudaFlags.data.cudaGpus","text":"<p>CUDA GPUs to build for</p> <p>Type: list of (submodule)</p> <p>Default: <code>[ ]</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_6cudaflagsdatacudagpusarchname","title":"cudaPackagesPackageSets.cudaPackages_11_6.cudaFlags.data.cudaGpus.*.archName","text":"<p>Name of the microarchitecture</p> <p>Type: A CUDA architecture name, like Ampere or Ada.</p> <p>Example: <code>\"Kepler\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_6cudaflagsdatacudagpuscomputecapability","title":"cudaPackagesPackageSets.cudaPackages_11_6.cudaFlags.data.cudaGpus.*.computeCapability","text":"<p>Compute capability of the GPU</p> <p>Type: A CUDA capability version.</p> <p>Example: <code>\"3.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_6cudaflagsdatacudagpusdontdefaultafter","title":"cudaPackagesPackageSets.cudaPackages_11_6.cudaFlags.data.cudaGpus.*.dontDefaultAfter","text":"<p>The CUDA version after which to exclude this GPU from the list of default capabilities we build. null means we always include this GPU in the default capabilities if it is supported.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_6cudaflagsdatacudagpusisjetson","title":"cudaPackagesPackageSets.cudaPackages_11_6.cudaFlags.data.cudaGpus.*.isJetson","text":"<p>Whether a GPU is part of NVIDIA\u2019s line of Jetson embedded computers.</p> <p>This field is notable because it tells us what architecture to build for (as Jetson devices are aarch64). More on Jetson devices here: https://www.nvidia.com/en-us/autonomous-machines/embedded-systems/</p> <p>NOTE: These architectures are only built upon request.</p> <p>Type: one of true, false</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_6cudaflagsdatacudagpusmaxcudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_6.cudaFlags.data.cudaGpus.*.maxCudaVersion","text":"<p>The maximum (exclusive) CUDA version that supports this GPU. null means there is no maximum.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_6cudaflagsdatacudagpusmincudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_6.cudaFlags.data.cudaGpus.*.minCudaVersion","text":"<p>The minimum (inclusive) CUDA version that supports this GPU.</p> <p>Type: A version number with a major and minor component.</p> <p>Example: <code>\"10.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_6cudaflagsdatacudajetsongpus","title":"cudaPackagesPackageSets.cudaPackages_11_6.cudaFlags.data.cudaJetsonGpus","text":"<p>CUDA GPUs to build for, including only Jetson devices</p> <p>Type: list of (submodule)</p> <p>Default: <code>[ ]</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_6cudaflagsdatacudajetsongpusarchname","title":"cudaPackagesPackageSets.cudaPackages_11_6.cudaFlags.data.cudaJetsonGpus.*.archName","text":"<p>Name of the microarchitecture</p> <p>Type: A CUDA architecture name, like Ampere or Ada.</p> <p>Example: <code>\"Kepler\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_6cudaflagsdatacudajetsongpuscomputecapability","title":"cudaPackagesPackageSets.cudaPackages_11_6.cudaFlags.data.cudaJetsonGpus.*.computeCapability","text":"<p>Compute capability of the GPU</p> <p>Type: A CUDA capability version.</p> <p>Example: <code>\"3.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_6cudaflagsdatacudajetsongpusdontdefaultafter","title":"cudaPackagesPackageSets.cudaPackages_11_6.cudaFlags.data.cudaJetsonGpus.*.dontDefaultAfter","text":"<p>The CUDA version after which to exclude this GPU from the list of default capabilities we build. null means we always include this GPU in the default capabilities if it is supported.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_6cudaflagsdatacudajetsongpusisjetson","title":"cudaPackagesPackageSets.cudaPackages_11_6.cudaFlags.data.cudaJetsonGpus.*.isJetson","text":"<p>Whether a GPU is part of NVIDIA\u2019s line of Jetson embedded computers.</p> <p>This field is notable because it tells us what architecture to build for (as Jetson devices are aarch64). More on Jetson devices here: https://www.nvidia.com/en-us/autonomous-machines/embedded-systems/</p> <p>NOTE: These architectures are only built upon request.</p> <p>Type: one of true, false</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_6cudaflagsdatacudajetsongpusmaxcudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_6.cudaFlags.data.cudaJetsonGpus.*.maxCudaVersion","text":"<p>The maximum (exclusive) CUDA version that supports this GPU. null means there is no maximum.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_6cudaflagsdatacudajetsongpusmincudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_6.cudaFlags.data.cudaJetsonGpus.*.minCudaVersion","text":"<p>The minimum (inclusive) CUDA version that supports this GPU.</p> <p>Type: A version number with a major and minor component.</p> <p>Example: <code>\"10.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_6cudaflagsdatacudanonjetsongpus","title":"cudaPackagesPackageSets.cudaPackages_11_6.cudaFlags.data.cudaNonJetsonGpus","text":"<p>CUDA GPUs to build for, excluding Jetson devices</p> <p>Type: list of (submodule)</p> <p>Default: <code>[ ]</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_6cudaflagsdatacudanonjetsongpusarchname","title":"cudaPackagesPackageSets.cudaPackages_11_6.cudaFlags.data.cudaNonJetsonGpus.*.archName","text":"<p>Name of the microarchitecture</p> <p>Type: A CUDA architecture name, like Ampere or Ada.</p> <p>Example: <code>\"Kepler\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_6cudaflagsdatacudanonjetsongpuscomputecapability","title":"cudaPackagesPackageSets.cudaPackages_11_6.cudaFlags.data.cudaNonJetsonGpus.*.computeCapability","text":"<p>Compute capability of the GPU</p> <p>Type: A CUDA capability version.</p> <p>Example: <code>\"3.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_6cudaflagsdatacudanonjetsongpusdontdefaultafter","title":"cudaPackagesPackageSets.cudaPackages_11_6.cudaFlags.data.cudaNonJetsonGpus.*.dontDefaultAfter","text":"<p>The CUDA version after which to exclude this GPU from the list of default capabilities we build. null means we always include this GPU in the default capabilities if it is supported.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_6cudaflagsdatacudanonjetsongpusisjetson","title":"cudaPackagesPackageSets.cudaPackages_11_6.cudaFlags.data.cudaNonJetsonGpus.*.isJetson","text":"<p>Whether a GPU is part of NVIDIA\u2019s line of Jetson embedded computers.</p> <p>This field is notable because it tells us what architecture to build for (as Jetson devices are aarch64). More on Jetson devices here: https://www.nvidia.com/en-us/autonomous-machines/embedded-systems/</p> <p>NOTE: These architectures are only built upon request.</p> <p>Type: one of false, true</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_6cudaflagsdatacudanonjetsongpusmaxcudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_6.cudaFlags.data.cudaNonJetsonGpus.*.maxCudaVersion","text":"<p>The maximum (exclusive) CUDA version that supports this GPU. null means there is no maximum.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_6cudaflagsdatacudanonjetsongpusmincudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_6.cudaFlags.data.cudaNonJetsonGpus.*.minCudaVersion","text":"<p>The minimum (inclusive) CUDA version that supports this GPU.</p> <p>Type: A version number with a major and minor component.</p> <p>Example: <code>\"10.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_6cudaflagsdatacudasupport","title":"cudaPackagesPackageSets.cudaPackages_11_6.cudaFlags.data.cudaSupport","text":"<p>Build packages with CUDA support</p> <p>Type: boolean</p> <p>Default: <code>true</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_6cudaflagsdatadefaultcapabilities","title":"cudaPackagesPackageSets.cudaPackages_11_6.cudaFlags.data.defaultCapabilities","text":"<p>The default compute capabilities for a given CUDA version</p> <p>Type: list of A CUDA capability version.</p> <p>Default:</p> <pre><code>[\n  \"6.0\"\n  \"6.1\"\n  \"7.0\"\n  \"7.5\"\n  \"8.0\"\n  \"8.6\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_6cudaflagsdatadefaultgpus","title":"cudaPackagesPackageSets.cudaPackages_11_6.cudaFlags.data.defaultGpus","text":"<p>The default GPUs for a given CUDA version</p> <p>Type: list of (submodule)</p> <p>Default:</p> <pre><code>[\n  {\n    archName = \"Pascal\";\n    computeCapability = \"6.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Pascal\";\n    computeCapability = \"6.1\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Volta\";\n    computeCapability = \"7.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Turing\";\n    computeCapability = \"7.5\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Ampere\";\n    computeCapability = \"8.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"11.2\";\n  }\n  {\n    archName = \"Ampere\";\n    computeCapability = \"8.6\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"11.2\";\n  }\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_6cudaflagsdatadefaultgpusarchname","title":"cudaPackagesPackageSets.cudaPackages_11_6.cudaFlags.data.defaultGpus.*.archName","text":"<p>Name of the microarchitecture</p> <p>Type: A CUDA architecture name, like Ampere or Ada.</p> <p>Example: <code>\"Kepler\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_6cudaflagsdatadefaultgpuscomputecapability","title":"cudaPackagesPackageSets.cudaPackages_11_6.cudaFlags.data.defaultGpus.*.computeCapability","text":"<p>Compute capability of the GPU</p> <p>Type: A CUDA capability version.</p> <p>Example: <code>\"3.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_6cudaflagsdatadefaultgpusdontdefaultafter","title":"cudaPackagesPackageSets.cudaPackages_11_6.cudaFlags.data.defaultGpus.*.dontDefaultAfter","text":"<p>The CUDA version after which to exclude this GPU from the list of default capabilities we build. null means we always include this GPU in the default capabilities if it is supported.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_6cudaflagsdatadefaultgpusisjetson","title":"cudaPackagesPackageSets.cudaPackages_11_6.cudaFlags.data.defaultGpus.*.isJetson","text":"<p>Whether a GPU is part of NVIDIA\u2019s line of Jetson embedded computers.</p> <p>This field is notable because it tells us what architecture to build for (as Jetson devices are aarch64). More on Jetson devices here: https://www.nvidia.com/en-us/autonomous-machines/embedded-systems/</p> <p>NOTE: These architectures are only built upon request.</p> <p>Type: one of true, false</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_6cudaflagsdatadefaultgpusmaxcudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_6.cudaFlags.data.defaultGpus.*.maxCudaVersion","text":"<p>The maximum (exclusive) CUDA version that supports this GPU. null means there is no maximum.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_6cudaflagsdatadefaultgpusmincudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_6.cudaFlags.data.defaultGpus.*.minCudaVersion","text":"<p>The minimum (inclusive) CUDA version that supports this GPU.</p> <p>Type: A version number with a major and minor component.</p> <p>Example: <code>\"10.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_6cudaflagsdatagencodeargs","title":"cudaPackagesPackageSets.cudaPackages_11_6.cudaFlags.data.gencodeArgs","text":"<p>The gencode arguments to pass to NVCC</p> <p>Type: list of A `gencode` argument for the `nvcc` compiler.</p> <p>Default:</p> <pre><code>[\n  \"-gencode=arch=compute_89,code=sm_89\"\n]\n</code></pre> <p>Example:</p> <pre><code>[\n  \"-gencode=arch=compute_75,code=sm_75\"\n  \"-gencode=arch=compute_86,code=sm_86\"\n  \"-gencode=arch=compute_86,code=compute_86\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_6cudaflagsdatagencodestring","title":"cudaPackagesPackageSets.cudaPackages_11_6.cudaFlags.data.gencodeString","text":"<p>A space-separated string of CUDA gencode arguments to pass to NVCC</p> <p>Type: string</p> <p>Default: <code>\"-gencode=arch=compute_89,code=sm_89\"</code></p> <p>Example: <code>\"-gencode=arch=compute_75,code=sm_75 ... -gencode=arch=compute_86,code=compute_86\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_6cudaflagsdataisjetsonbuild","title":"cudaPackagesPackageSets.cudaPackages_11_6.cudaFlags.data.isJetsonBuild","text":"<p>Whether the build is for a Jetson device.</p> <p>Jetson devices cannot be targeted by the same binaries which target non-Jetson devices. While NVIDIA provides both <code>linux-aarch64</code> and <code>linux-sbsa</code> packages, which both target <code>aarch64</code>, they are built with different settings and cannot be mixed.</p> <p>Type: boolean</p> <p>Default: <code>false</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_6cudaflagsdatarealarches","title":"cudaPackagesPackageSets.cudaPackages_11_6.cudaFlags.data.realArches","text":"<p>The physical architectures to build for</p> <p>Type: list of A real/physical CUDA architecture name.</p> <p>Default:</p> <pre><code>[\n  \"sm_89\"\n]\n</code></pre> <p>Example:</p> <pre><code>[\n  \"sm_75\"\n  \"sm_86\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_6cudaflagsdatasupportedcapabilities","title":"cudaPackagesPackageSets.cudaPackages_11_6.cudaFlags.data.supportedCapabilities","text":"<p>The compute capabilities supported by a given CUDA version</p> <p>Type: list of A CUDA capability version.</p> <p>Default:</p> <pre><code>[\n  \"3.5\"\n  \"3.7\"\n  \"5.0\"\n  \"5.2\"\n  \"5.3\"\n  \"6.0\"\n  \"6.1\"\n  \"6.2\"\n  \"7.0\"\n  \"7.2\"\n  \"7.5\"\n  \"8.0\"\n  \"8.6\"\n  \"8.7\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_6cudaflagsdatasupportedgpus","title":"cudaPackagesPackageSets.cudaPackages_11_6.cudaFlags.data.supportedGpus","text":"<p>The GPUs supported by a given CUDA version</p> <p>Type: list of (submodule)</p> <p>Default:</p> <pre><code>[\n  {\n    archName = \"Kepler\";\n    computeCapability = \"3.5\";\n    dontDefaultAfter = \"11.0\";\n    isJetson = false;\n    maxCudaVersion = \"11.8\";\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Kepler\";\n    computeCapability = \"3.7\";\n    dontDefaultAfter = \"11.0\";\n    isJetson = false;\n    maxCudaVersion = \"11.8\";\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Maxwell\";\n    computeCapability = \"5.0\";\n    dontDefaultAfter = \"11.0\";\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Maxwell\";\n    computeCapability = \"5.2\";\n    dontDefaultAfter = \"11.0\";\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Maxwell\";\n    computeCapability = \"5.3\";\n    dontDefaultAfter = null;\n    isJetson = true;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Pascal\";\n    computeCapability = \"6.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Pascal\";\n    computeCapability = \"6.1\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Pascal\";\n    computeCapability = \"6.2\";\n    dontDefaultAfter = null;\n    isJetson = true;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Volta\";\n    computeCapability = \"7.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Volta\";\n    computeCapability = \"7.2\";\n    dontDefaultAfter = null;\n    isJetson = true;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Turing\";\n    computeCapability = \"7.5\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Ampere\";\n    computeCapability = \"8.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"11.2\";\n  }\n  {\n    archName = \"Ampere\";\n    computeCapability = \"8.6\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"11.2\";\n  }\n  {\n    archName = \"Ampere\";\n    computeCapability = \"8.7\";\n    dontDefaultAfter = null;\n    isJetson = true;\n    maxCudaVersion = null;\n    minCudaVersion = \"11.5\";\n  }\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_6cudaflagsdatasupportedgpusarchname","title":"cudaPackagesPackageSets.cudaPackages_11_6.cudaFlags.data.supportedGpus.*.archName","text":"<p>Name of the microarchitecture</p> <p>Type: A CUDA architecture name, like Ampere or Ada.</p> <p>Example: <code>\"Kepler\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_6cudaflagsdatasupportedgpuscomputecapability","title":"cudaPackagesPackageSets.cudaPackages_11_6.cudaFlags.data.supportedGpus.*.computeCapability","text":"<p>Compute capability of the GPU</p> <p>Type: A CUDA capability version.</p> <p>Example: <code>\"3.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_6cudaflagsdatasupportedgpusdontdefaultafter","title":"cudaPackagesPackageSets.cudaPackages_11_6.cudaFlags.data.supportedGpus.*.dontDefaultAfter","text":"<p>The CUDA version after which to exclude this GPU from the list of default capabilities we build. null means we always include this GPU in the default capabilities if it is supported.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_6cudaflagsdatasupportedgpusisjetson","title":"cudaPackagesPackageSets.cudaPackages_11_6.cudaFlags.data.supportedGpus.*.isJetson","text":"<p>Whether a GPU is part of NVIDIA\u2019s line of Jetson embedded computers.</p> <p>This field is notable because it tells us what architecture to build for (as Jetson devices are aarch64). More on Jetson devices here: https://www.nvidia.com/en-us/autonomous-machines/embedded-systems/</p> <p>NOTE: These architectures are only built upon request.</p> <p>Type: one of true, false</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_6cudaflagsdatasupportedgpusmaxcudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_6.cudaFlags.data.supportedGpus.*.maxCudaVersion","text":"<p>The maximum (exclusive) CUDA version that supports this GPU. null means there is no maximum.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_6cudaflagsdatasupportedgpusmincudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_6.cudaFlags.data.supportedGpus.*.minCudaVersion","text":"<p>The minimum (inclusive) CUDA version that supports this GPU.</p> <p>Type: A version number with a major and minor component.</p> <p>Example: <code>\"10.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_6cudaflagsdatavirtualarches","title":"cudaPackagesPackageSets.cudaPackages_11_6.cudaFlags.data.virtualArches","text":"<p>The virtual architectures to build for. These are typically used for forward compatibility, when trying to support an architecture newer than the CUDA version allows.</p> <p>Type: list of A virtual CUDA architecture name.</p> <p>Default:</p> <pre><code>[\n  \"compute_89\"\n]\n</code></pre> <p>Example:</p> <pre><code>[\n  \"compute_75\"\n  \"compute_86\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_6cudaflagsutilsarchmapper","title":"cudaPackagesPackageSets.cudaPackages_11_6.cudaFlags.utils.archMapper","text":"<p>Maps a feature across a list of compute capabilities to produce a list of architectures.</p> <p>For example, \u201csm\u201d and [ \u201c8.0\u201d \u201c8.6\u201d \u201c8.7\u201d ] yield [ \u201csm_80\u201d \u201csm_86\u201d \u201csm_87\u201d ].</p> <p>Type: function that evaluates to a(n) function that evaluates to a(n) list of string</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_6cudaflagsutilsdropdot","title":"cudaPackagesPackageSets.cudaPackages_11_6.cudaFlags.utils.dropDot","text":"<p>Drops dots from a string.</p> <p>Type: function that evaluates to a(n) string</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_6cudaflagsutilsgencodemapper","title":"cudaPackagesPackageSets.cudaPackages_11_6.cudaFlags.utils.gencodeMapper","text":"<p>Maps a feature across a list of compute capabilities to produce a list of gencode arguments.</p> <p>For example, \u201csm\u201d and [ \u201c8.0\u201d \u201c8.6\u201d \u201c8.7\u201d ] yield [ \u201c-gencode=arch=compute_80,code=sm_80\u201d \u201c-gencode=arch=compute_86,code=sm_86\u201d \u201c-gencode=arch=compute_87,code=sm_87\u201d ].</p> <p>Type: function that evaluates to a(n) function that evaluates to a(n) list of string</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_6cudaflagsutilsgetnixsystem","title":"cudaPackagesPackageSets.cudaPackages_11_6.cudaFlags.utils.getNixSystem","text":"<p>Maps NVIDIA redist arch to Nix system.</p> <p>NOTE: This function will be called by unsupported systems because <code>cudaPackages</code> is part of <code>all-packages.nix</code>, which is evaluated on all systems. As such, we need to handle unsupported systems gracefully.</p> <p>Type: function that evaluates to a(n) (one of \u201cunsupported\u201d, \u201caaarch64-linux\u201d, \u201cx86_64-linux\u201d, \u201cppc64le-linux\u201d, \u201cx86_64-windows\u201d)</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_6cudaflagsutilsgetredistarch","title":"cudaPackagesPackageSets.cudaPackages_11_6.cudaFlags.utils.getRedistArch","text":"<p>Maps Nix system to NVIDIA redist arch.</p> <p>NOTE: We swap out the default <code>linux-sbsa</code> redist (for server-grade ARM chips) with the <code>linux-aarch64</code> redist (which is for Jetson devices) if we\u2019re building any Jetson devices. Since both are based on aarch64, we can only have one or the other, otherwise there\u2019s an ambiguity as to which should be used.</p> <p>NOTE: This function will be called by unsupported systems because <code>cudaPackages</code> is part of <code>all-packages.nix</code>, which is evaluated on all systems. As such, we need to handle unsupported systems gracefully.</p> <p>Type: function that evaluates to a(n) (one of \u201cunsupported\u201d, \u201clinux-aarch64\u201d, \u201clinux-sbsa\u201d, \u201clinux-x86_64\u201d, \u201clinux-ppc64le\u201d, \u201cwindows-x86_64\u201d)</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_6cudaflagsutilsisdefault","title":"cudaPackagesPackageSets.cudaPackages_11_6.cudaFlags.utils.isDefault","text":"<p>Whether a GPU is included in the default capabilities</p> <p>Type: function that evaluates to a(n) boolean</p> <p>Default: <code>&lt;function, args: {dontDefaultAfter, isJetson}&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_6cudaflagsutilsissupported","title":"cudaPackagesPackageSets.cudaPackages_11_6.cudaFlags.utils.isSupported","text":"<p>Whether a CUDA version supports a given GPU</p> <p>Type: function that evaluates to a(n) boolean</p> <p>Default: <code>&lt;function, args: {maxCudaVersion, minCudaVersion}&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_6cudamajorminorversion","title":"cudaPackagesPackageSets.cudaPackages_11_6.cudaMajorMinorVersion","text":"<p>The major and minor version of the CUDA package set</p> <p>Type: string</p> <p>Default: <code>\"11.6\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_6cudamajorversion","title":"cudaPackagesPackageSets.cudaPackages_11_6.cudaMajorVersion","text":"<p>The major version of the CUDA package set</p> <p>Type: string</p> <p>Default: <code>\"11\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_6cudanewer","title":"cudaPackagesPackageSets.cudaPackages_11_6.cudaNewer","text":"<p>A utility to check if the CUDA version is newer than a given version</p> <p>Type: function that evaluates to a(n) boolean</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_6cudaolder","title":"cudaPackagesPackageSets.cudaPackages_11_6.cudaOlder","text":"<p>A utility to check if the CUDA version is older than a given version</p> <p>Type: function that evaluates to a(n) boolean</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_6cudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_6.cudaVersion","text":"<p>The CUDA version of the package set</p> <p>Type: A version number with a major and minor component.</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_7","title":"cudaPackagesPackageSets.cudaPackages_11_7","text":"<p>A CUDA package set for a particular version of CUDA</p> <p>Type: submodule</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules</p>"},{"location":"#cudapackagespackagesetscudapackages_11_7cudaatleast","title":"cudaPackagesPackageSets.cudaPackages_11_7.cudaAtLeast","text":"<p>A utility to check if the CUDA version is at least a given version</p> <p>Type: function that evaluates to a(n) boolean</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_7cudaatmost","title":"cudaPackagesPackageSets.cudaPackages_11_7.cudaAtMost","text":"<p>A utility to check if the CUDA version is at most a given version</p> <p>Type: function that evaluates to a(n) boolean</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_7cudaflagsdataarchnames","title":"cudaPackagesPackageSets.cudaPackages_11_7.cudaFlags.data.archNames","text":"<p>The names of the architectures to build for</p> <p>Type: list of string</p> <p>Default: <code>[ ]</code></p> <p>Example:</p> <pre><code>[\n  \"Turing\"\n  \"Ampere\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_7cudaflagsdataarches","title":"cudaPackagesPackageSets.cudaPackages_11_7.cudaFlags.data.arches","text":"<p>The architectures to build for. Includes a virtual architecture if forward compatibility is enabled.</p> <p>Type: list of (A real/physical CUDA architecture name. or A virtual CUDA architecture name.)</p> <p>Default:</p> <pre><code>[\n  \"sm_89\"\n]\n</code></pre> <p>Example:</p> <pre><code>[\n  \"sm_75\"\n  \"sm_86\"\n  \"compute_86\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_7cudaflagsdatacudacapabilities","title":"cudaPackagesPackageSets.cudaPackages_11_7.cudaFlags.data.cudaCapabilities","text":"<p>CUDA capabilities (hardware generations) to build for</p> <p>Type: list of A CUDA capability version.</p> <p>Default:</p> <pre><code>[\n  \"8.9\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_7cudaflagsdatacudaforwardcompat","title":"cudaPackagesPackageSets.cudaPackages_11_7.cudaFlags.data.cudaForwardCompat","text":"<p>Build with forward compatibility gencode (+PTX) to support future GPU generations</p> <p>Type: boolean</p> <p>Default: <code>false</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_7cudaflagsdatacudagpus","title":"cudaPackagesPackageSets.cudaPackages_11_7.cudaFlags.data.cudaGpus","text":"<p>CUDA GPUs to build for</p> <p>Type: list of (submodule)</p> <p>Default: <code>[ ]</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_7cudaflagsdatacudagpusarchname","title":"cudaPackagesPackageSets.cudaPackages_11_7.cudaFlags.data.cudaGpus.*.archName","text":"<p>Name of the microarchitecture</p> <p>Type: A CUDA architecture name, like Ampere or Ada.</p> <p>Example: <code>\"Kepler\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_7cudaflagsdatacudagpuscomputecapability","title":"cudaPackagesPackageSets.cudaPackages_11_7.cudaFlags.data.cudaGpus.*.computeCapability","text":"<p>Compute capability of the GPU</p> <p>Type: A CUDA capability version.</p> <p>Example: <code>\"3.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_7cudaflagsdatacudagpusdontdefaultafter","title":"cudaPackagesPackageSets.cudaPackages_11_7.cudaFlags.data.cudaGpus.*.dontDefaultAfter","text":"<p>The CUDA version after which to exclude this GPU from the list of default capabilities we build. null means we always include this GPU in the default capabilities if it is supported.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_7cudaflagsdatacudagpusisjetson","title":"cudaPackagesPackageSets.cudaPackages_11_7.cudaFlags.data.cudaGpus.*.isJetson","text":"<p>Whether a GPU is part of NVIDIA\u2019s line of Jetson embedded computers.</p> <p>This field is notable because it tells us what architecture to build for (as Jetson devices are aarch64). More on Jetson devices here: https://www.nvidia.com/en-us/autonomous-machines/embedded-systems/</p> <p>NOTE: These architectures are only built upon request.</p> <p>Type: one of true, false</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_7cudaflagsdatacudagpusmaxcudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_7.cudaFlags.data.cudaGpus.*.maxCudaVersion","text":"<p>The maximum (exclusive) CUDA version that supports this GPU. null means there is no maximum.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_7cudaflagsdatacudagpusmincudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_7.cudaFlags.data.cudaGpus.*.minCudaVersion","text":"<p>The minimum (inclusive) CUDA version that supports this GPU.</p> <p>Type: A version number with a major and minor component.</p> <p>Example: <code>\"10.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_7cudaflagsdatacudajetsongpus","title":"cudaPackagesPackageSets.cudaPackages_11_7.cudaFlags.data.cudaJetsonGpus","text":"<p>CUDA GPUs to build for, including only Jetson devices</p> <p>Type: list of (submodule)</p> <p>Default: <code>[ ]</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_7cudaflagsdatacudajetsongpusarchname","title":"cudaPackagesPackageSets.cudaPackages_11_7.cudaFlags.data.cudaJetsonGpus.*.archName","text":"<p>Name of the microarchitecture</p> <p>Type: A CUDA architecture name, like Ampere or Ada.</p> <p>Example: <code>\"Kepler\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_7cudaflagsdatacudajetsongpuscomputecapability","title":"cudaPackagesPackageSets.cudaPackages_11_7.cudaFlags.data.cudaJetsonGpus.*.computeCapability","text":"<p>Compute capability of the GPU</p> <p>Type: A CUDA capability version.</p> <p>Example: <code>\"3.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_7cudaflagsdatacudajetsongpusdontdefaultafter","title":"cudaPackagesPackageSets.cudaPackages_11_7.cudaFlags.data.cudaJetsonGpus.*.dontDefaultAfter","text":"<p>The CUDA version after which to exclude this GPU from the list of default capabilities we build. null means we always include this GPU in the default capabilities if it is supported.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_7cudaflagsdatacudajetsongpusisjetson","title":"cudaPackagesPackageSets.cudaPackages_11_7.cudaFlags.data.cudaJetsonGpus.*.isJetson","text":"<p>Whether a GPU is part of NVIDIA\u2019s line of Jetson embedded computers.</p> <p>This field is notable because it tells us what architecture to build for (as Jetson devices are aarch64). More on Jetson devices here: https://www.nvidia.com/en-us/autonomous-machines/embedded-systems/</p> <p>NOTE: These architectures are only built upon request.</p> <p>Type: one of true, false</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_7cudaflagsdatacudajetsongpusmaxcudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_7.cudaFlags.data.cudaJetsonGpus.*.maxCudaVersion","text":"<p>The maximum (exclusive) CUDA version that supports this GPU. null means there is no maximum.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_7cudaflagsdatacudajetsongpusmincudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_7.cudaFlags.data.cudaJetsonGpus.*.minCudaVersion","text":"<p>The minimum (inclusive) CUDA version that supports this GPU.</p> <p>Type: A version number with a major and minor component.</p> <p>Example: <code>\"10.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_7cudaflagsdatacudanonjetsongpus","title":"cudaPackagesPackageSets.cudaPackages_11_7.cudaFlags.data.cudaNonJetsonGpus","text":"<p>CUDA GPUs to build for, excluding Jetson devices</p> <p>Type: list of (submodule)</p> <p>Default: <code>[ ]</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_7cudaflagsdatacudanonjetsongpusarchname","title":"cudaPackagesPackageSets.cudaPackages_11_7.cudaFlags.data.cudaNonJetsonGpus.*.archName","text":"<p>Name of the microarchitecture</p> <p>Type: A CUDA architecture name, like Ampere or Ada.</p> <p>Example: <code>\"Kepler\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_7cudaflagsdatacudanonjetsongpuscomputecapability","title":"cudaPackagesPackageSets.cudaPackages_11_7.cudaFlags.data.cudaNonJetsonGpus.*.computeCapability","text":"<p>Compute capability of the GPU</p> <p>Type: A CUDA capability version.</p> <p>Example: <code>\"3.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_7cudaflagsdatacudanonjetsongpusdontdefaultafter","title":"cudaPackagesPackageSets.cudaPackages_11_7.cudaFlags.data.cudaNonJetsonGpus.*.dontDefaultAfter","text":"<p>The CUDA version after which to exclude this GPU from the list of default capabilities we build. null means we always include this GPU in the default capabilities if it is supported.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_7cudaflagsdatacudanonjetsongpusisjetson","title":"cudaPackagesPackageSets.cudaPackages_11_7.cudaFlags.data.cudaNonJetsonGpus.*.isJetson","text":"<p>Whether a GPU is part of NVIDIA\u2019s line of Jetson embedded computers.</p> <p>This field is notable because it tells us what architecture to build for (as Jetson devices are aarch64). More on Jetson devices here: https://www.nvidia.com/en-us/autonomous-machines/embedded-systems/</p> <p>NOTE: These architectures are only built upon request.</p> <p>Type: one of false, true</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_7cudaflagsdatacudanonjetsongpusmaxcudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_7.cudaFlags.data.cudaNonJetsonGpus.*.maxCudaVersion","text":"<p>The maximum (exclusive) CUDA version that supports this GPU. null means there is no maximum.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_7cudaflagsdatacudanonjetsongpusmincudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_7.cudaFlags.data.cudaNonJetsonGpus.*.minCudaVersion","text":"<p>The minimum (inclusive) CUDA version that supports this GPU.</p> <p>Type: A version number with a major and minor component.</p> <p>Example: <code>\"10.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_7cudaflagsdatacudasupport","title":"cudaPackagesPackageSets.cudaPackages_11_7.cudaFlags.data.cudaSupport","text":"<p>Build packages with CUDA support</p> <p>Type: boolean</p> <p>Default: <code>true</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_7cudaflagsdatadefaultcapabilities","title":"cudaPackagesPackageSets.cudaPackages_11_7.cudaFlags.data.defaultCapabilities","text":"<p>The default compute capabilities for a given CUDA version</p> <p>Type: list of A CUDA capability version.</p> <p>Default:</p> <pre><code>[\n  \"6.0\"\n  \"6.1\"\n  \"7.0\"\n  \"7.5\"\n  \"8.0\"\n  \"8.6\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_7cudaflagsdatadefaultgpus","title":"cudaPackagesPackageSets.cudaPackages_11_7.cudaFlags.data.defaultGpus","text":"<p>The default GPUs for a given CUDA version</p> <p>Type: list of (submodule)</p> <p>Default:</p> <pre><code>[\n  {\n    archName = \"Pascal\";\n    computeCapability = \"6.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Pascal\";\n    computeCapability = \"6.1\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Volta\";\n    computeCapability = \"7.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Turing\";\n    computeCapability = \"7.5\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Ampere\";\n    computeCapability = \"8.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"11.2\";\n  }\n  {\n    archName = \"Ampere\";\n    computeCapability = \"8.6\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"11.2\";\n  }\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_7cudaflagsdatadefaultgpusarchname","title":"cudaPackagesPackageSets.cudaPackages_11_7.cudaFlags.data.defaultGpus.*.archName","text":"<p>Name of the microarchitecture</p> <p>Type: A CUDA architecture name, like Ampere or Ada.</p> <p>Example: <code>\"Kepler\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_7cudaflagsdatadefaultgpuscomputecapability","title":"cudaPackagesPackageSets.cudaPackages_11_7.cudaFlags.data.defaultGpus.*.computeCapability","text":"<p>Compute capability of the GPU</p> <p>Type: A CUDA capability version.</p> <p>Example: <code>\"3.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_7cudaflagsdatadefaultgpusdontdefaultafter","title":"cudaPackagesPackageSets.cudaPackages_11_7.cudaFlags.data.defaultGpus.*.dontDefaultAfter","text":"<p>The CUDA version after which to exclude this GPU from the list of default capabilities we build. null means we always include this GPU in the default capabilities if it is supported.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_7cudaflagsdatadefaultgpusisjetson","title":"cudaPackagesPackageSets.cudaPackages_11_7.cudaFlags.data.defaultGpus.*.isJetson","text":"<p>Whether a GPU is part of NVIDIA\u2019s line of Jetson embedded computers.</p> <p>This field is notable because it tells us what architecture to build for (as Jetson devices are aarch64). More on Jetson devices here: https://www.nvidia.com/en-us/autonomous-machines/embedded-systems/</p> <p>NOTE: These architectures are only built upon request.</p> <p>Type: one of true, false</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_7cudaflagsdatadefaultgpusmaxcudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_7.cudaFlags.data.defaultGpus.*.maxCudaVersion","text":"<p>The maximum (exclusive) CUDA version that supports this GPU. null means there is no maximum.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_7cudaflagsdatadefaultgpusmincudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_7.cudaFlags.data.defaultGpus.*.minCudaVersion","text":"<p>The minimum (inclusive) CUDA version that supports this GPU.</p> <p>Type: A version number with a major and minor component.</p> <p>Example: <code>\"10.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_7cudaflagsdatagencodeargs","title":"cudaPackagesPackageSets.cudaPackages_11_7.cudaFlags.data.gencodeArgs","text":"<p>The gencode arguments to pass to NVCC</p> <p>Type: list of A `gencode` argument for the `nvcc` compiler.</p> <p>Default:</p> <pre><code>[\n  \"-gencode=arch=compute_89,code=sm_89\"\n]\n</code></pre> <p>Example:</p> <pre><code>[\n  \"-gencode=arch=compute_75,code=sm_75\"\n  \"-gencode=arch=compute_86,code=sm_86\"\n  \"-gencode=arch=compute_86,code=compute_86\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_7cudaflagsdatagencodestring","title":"cudaPackagesPackageSets.cudaPackages_11_7.cudaFlags.data.gencodeString","text":"<p>A space-separated string of CUDA gencode arguments to pass to NVCC</p> <p>Type: string</p> <p>Default: <code>\"-gencode=arch=compute_89,code=sm_89\"</code></p> <p>Example: <code>\"-gencode=arch=compute_75,code=sm_75 ... -gencode=arch=compute_86,code=compute_86\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_7cudaflagsdataisjetsonbuild","title":"cudaPackagesPackageSets.cudaPackages_11_7.cudaFlags.data.isJetsonBuild","text":"<p>Whether the build is for a Jetson device.</p> <p>Jetson devices cannot be targeted by the same binaries which target non-Jetson devices. While NVIDIA provides both <code>linux-aarch64</code> and <code>linux-sbsa</code> packages, which both target <code>aarch64</code>, they are built with different settings and cannot be mixed.</p> <p>Type: boolean</p> <p>Default: <code>false</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_7cudaflagsdatarealarches","title":"cudaPackagesPackageSets.cudaPackages_11_7.cudaFlags.data.realArches","text":"<p>The physical architectures to build for</p> <p>Type: list of A real/physical CUDA architecture name.</p> <p>Default:</p> <pre><code>[\n  \"sm_89\"\n]\n</code></pre> <p>Example:</p> <pre><code>[\n  \"sm_75\"\n  \"sm_86\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_7cudaflagsdatasupportedcapabilities","title":"cudaPackagesPackageSets.cudaPackages_11_7.cudaFlags.data.supportedCapabilities","text":"<p>The compute capabilities supported by a given CUDA version</p> <p>Type: list of A CUDA capability version.</p> <p>Default:</p> <pre><code>[\n  \"3.5\"\n  \"3.7\"\n  \"5.0\"\n  \"5.2\"\n  \"5.3\"\n  \"6.0\"\n  \"6.1\"\n  \"6.2\"\n  \"7.0\"\n  \"7.2\"\n  \"7.5\"\n  \"8.0\"\n  \"8.6\"\n  \"8.7\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_7cudaflagsdatasupportedgpus","title":"cudaPackagesPackageSets.cudaPackages_11_7.cudaFlags.data.supportedGpus","text":"<p>The GPUs supported by a given CUDA version</p> <p>Type: list of (submodule)</p> <p>Default:</p> <pre><code>[\n  {\n    archName = \"Kepler\";\n    computeCapability = \"3.5\";\n    dontDefaultAfter = \"11.0\";\n    isJetson = false;\n    maxCudaVersion = \"11.8\";\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Kepler\";\n    computeCapability = \"3.7\";\n    dontDefaultAfter = \"11.0\";\n    isJetson = false;\n    maxCudaVersion = \"11.8\";\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Maxwell\";\n    computeCapability = \"5.0\";\n    dontDefaultAfter = \"11.0\";\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Maxwell\";\n    computeCapability = \"5.2\";\n    dontDefaultAfter = \"11.0\";\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Maxwell\";\n    computeCapability = \"5.3\";\n    dontDefaultAfter = null;\n    isJetson = true;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Pascal\";\n    computeCapability = \"6.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Pascal\";\n    computeCapability = \"6.1\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Pascal\";\n    computeCapability = \"6.2\";\n    dontDefaultAfter = null;\n    isJetson = true;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Volta\";\n    computeCapability = \"7.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Volta\";\n    computeCapability = \"7.2\";\n    dontDefaultAfter = null;\n    isJetson = true;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Turing\";\n    computeCapability = \"7.5\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Ampere\";\n    computeCapability = \"8.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"11.2\";\n  }\n  {\n    archName = \"Ampere\";\n    computeCapability = \"8.6\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"11.2\";\n  }\n  {\n    archName = \"Ampere\";\n    computeCapability = \"8.7\";\n    dontDefaultAfter = null;\n    isJetson = true;\n    maxCudaVersion = null;\n    minCudaVersion = \"11.5\";\n  }\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_7cudaflagsdatasupportedgpusarchname","title":"cudaPackagesPackageSets.cudaPackages_11_7.cudaFlags.data.supportedGpus.*.archName","text":"<p>Name of the microarchitecture</p> <p>Type: A CUDA architecture name, like Ampere or Ada.</p> <p>Example: <code>\"Kepler\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_7cudaflagsdatasupportedgpuscomputecapability","title":"cudaPackagesPackageSets.cudaPackages_11_7.cudaFlags.data.supportedGpus.*.computeCapability","text":"<p>Compute capability of the GPU</p> <p>Type: A CUDA capability version.</p> <p>Example: <code>\"3.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_7cudaflagsdatasupportedgpusdontdefaultafter","title":"cudaPackagesPackageSets.cudaPackages_11_7.cudaFlags.data.supportedGpus.*.dontDefaultAfter","text":"<p>The CUDA version after which to exclude this GPU from the list of default capabilities we build. null means we always include this GPU in the default capabilities if it is supported.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_7cudaflagsdatasupportedgpusisjetson","title":"cudaPackagesPackageSets.cudaPackages_11_7.cudaFlags.data.supportedGpus.*.isJetson","text":"<p>Whether a GPU is part of NVIDIA\u2019s line of Jetson embedded computers.</p> <p>This field is notable because it tells us what architecture to build for (as Jetson devices are aarch64). More on Jetson devices here: https://www.nvidia.com/en-us/autonomous-machines/embedded-systems/</p> <p>NOTE: These architectures are only built upon request.</p> <p>Type: one of true, false</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_7cudaflagsdatasupportedgpusmaxcudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_7.cudaFlags.data.supportedGpus.*.maxCudaVersion","text":"<p>The maximum (exclusive) CUDA version that supports this GPU. null means there is no maximum.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_7cudaflagsdatasupportedgpusmincudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_7.cudaFlags.data.supportedGpus.*.minCudaVersion","text":"<p>The minimum (inclusive) CUDA version that supports this GPU.</p> <p>Type: A version number with a major and minor component.</p> <p>Example: <code>\"10.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_7cudaflagsdatavirtualarches","title":"cudaPackagesPackageSets.cudaPackages_11_7.cudaFlags.data.virtualArches","text":"<p>The virtual architectures to build for. These are typically used for forward compatibility, when trying to support an architecture newer than the CUDA version allows.</p> <p>Type: list of A virtual CUDA architecture name.</p> <p>Default:</p> <pre><code>[\n  \"compute_89\"\n]\n</code></pre> <p>Example:</p> <pre><code>[\n  \"compute_75\"\n  \"compute_86\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_7cudaflagsutilsarchmapper","title":"cudaPackagesPackageSets.cudaPackages_11_7.cudaFlags.utils.archMapper","text":"<p>Maps a feature across a list of compute capabilities to produce a list of architectures.</p> <p>For example, \u201csm\u201d and [ \u201c8.0\u201d \u201c8.6\u201d \u201c8.7\u201d ] yield [ \u201csm_80\u201d \u201csm_86\u201d \u201csm_87\u201d ].</p> <p>Type: function that evaluates to a(n) function that evaluates to a(n) list of string</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_7cudaflagsutilsdropdot","title":"cudaPackagesPackageSets.cudaPackages_11_7.cudaFlags.utils.dropDot","text":"<p>Drops dots from a string.</p> <p>Type: function that evaluates to a(n) string</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_7cudaflagsutilsgencodemapper","title":"cudaPackagesPackageSets.cudaPackages_11_7.cudaFlags.utils.gencodeMapper","text":"<p>Maps a feature across a list of compute capabilities to produce a list of gencode arguments.</p> <p>For example, \u201csm\u201d and [ \u201c8.0\u201d \u201c8.6\u201d \u201c8.7\u201d ] yield [ \u201c-gencode=arch=compute_80,code=sm_80\u201d \u201c-gencode=arch=compute_86,code=sm_86\u201d \u201c-gencode=arch=compute_87,code=sm_87\u201d ].</p> <p>Type: function that evaluates to a(n) function that evaluates to a(n) list of string</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_7cudaflagsutilsgetnixsystem","title":"cudaPackagesPackageSets.cudaPackages_11_7.cudaFlags.utils.getNixSystem","text":"<p>Maps NVIDIA redist arch to Nix system.</p> <p>NOTE: This function will be called by unsupported systems because <code>cudaPackages</code> is part of <code>all-packages.nix</code>, which is evaluated on all systems. As such, we need to handle unsupported systems gracefully.</p> <p>Type: function that evaluates to a(n) (one of \u201cunsupported\u201d, \u201caaarch64-linux\u201d, \u201cx86_64-linux\u201d, \u201cppc64le-linux\u201d, \u201cx86_64-windows\u201d)</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_7cudaflagsutilsgetredistarch","title":"cudaPackagesPackageSets.cudaPackages_11_7.cudaFlags.utils.getRedistArch","text":"<p>Maps Nix system to NVIDIA redist arch.</p> <p>NOTE: We swap out the default <code>linux-sbsa</code> redist (for server-grade ARM chips) with the <code>linux-aarch64</code> redist (which is for Jetson devices) if we\u2019re building any Jetson devices. Since both are based on aarch64, we can only have one or the other, otherwise there\u2019s an ambiguity as to which should be used.</p> <p>NOTE: This function will be called by unsupported systems because <code>cudaPackages</code> is part of <code>all-packages.nix</code>, which is evaluated on all systems. As such, we need to handle unsupported systems gracefully.</p> <p>Type: function that evaluates to a(n) (one of \u201cunsupported\u201d, \u201clinux-aarch64\u201d, \u201clinux-sbsa\u201d, \u201clinux-x86_64\u201d, \u201clinux-ppc64le\u201d, \u201cwindows-x86_64\u201d)</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_7cudaflagsutilsisdefault","title":"cudaPackagesPackageSets.cudaPackages_11_7.cudaFlags.utils.isDefault","text":"<p>Whether a GPU is included in the default capabilities</p> <p>Type: function that evaluates to a(n) boolean</p> <p>Default: <code>&lt;function, args: {dontDefaultAfter, isJetson}&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_7cudaflagsutilsissupported","title":"cudaPackagesPackageSets.cudaPackages_11_7.cudaFlags.utils.isSupported","text":"<p>Whether a CUDA version supports a given GPU</p> <p>Type: function that evaluates to a(n) boolean</p> <p>Default: <code>&lt;function, args: {maxCudaVersion, minCudaVersion}&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_7cudamajorminorversion","title":"cudaPackagesPackageSets.cudaPackages_11_7.cudaMajorMinorVersion","text":"<p>The major and minor version of the CUDA package set</p> <p>Type: string</p> <p>Default: <code>\"11.7\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_7cudamajorversion","title":"cudaPackagesPackageSets.cudaPackages_11_7.cudaMajorVersion","text":"<p>The major version of the CUDA package set</p> <p>Type: string</p> <p>Default: <code>\"11\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_7cudanewer","title":"cudaPackagesPackageSets.cudaPackages_11_7.cudaNewer","text":"<p>A utility to check if the CUDA version is newer than a given version</p> <p>Type: function that evaluates to a(n) boolean</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_7cudaolder","title":"cudaPackagesPackageSets.cudaPackages_11_7.cudaOlder","text":"<p>A utility to check if the CUDA version is older than a given version</p> <p>Type: function that evaluates to a(n) boolean</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_7cudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_7.cudaVersion","text":"<p>The CUDA version of the package set</p> <p>Type: A version number with a major and minor component.</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_8","title":"cudaPackagesPackageSets.cudaPackages_11_8","text":"<p>A CUDA package set for a particular version of CUDA</p> <p>Type: submodule</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules</p>"},{"location":"#cudapackagespackagesetscudapackages_11_8cudaatleast","title":"cudaPackagesPackageSets.cudaPackages_11_8.cudaAtLeast","text":"<p>A utility to check if the CUDA version is at least a given version</p> <p>Type: function that evaluates to a(n) boolean</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_8cudaatmost","title":"cudaPackagesPackageSets.cudaPackages_11_8.cudaAtMost","text":"<p>A utility to check if the CUDA version is at most a given version</p> <p>Type: function that evaluates to a(n) boolean</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_8cudaflagsdataarchnames","title":"cudaPackagesPackageSets.cudaPackages_11_8.cudaFlags.data.archNames","text":"<p>The names of the architectures to build for</p> <p>Type: list of string</p> <p>Default:</p> <pre><code>[\n  \"Ada\"\n]\n</code></pre> <p>Example:</p> <pre><code>[\n  \"Turing\"\n  \"Ampere\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_8cudaflagsdataarches","title":"cudaPackagesPackageSets.cudaPackages_11_8.cudaFlags.data.arches","text":"<p>The architectures to build for. Includes a virtual architecture if forward compatibility is enabled.</p> <p>Type: list of (A real/physical CUDA architecture name. or A virtual CUDA architecture name.)</p> <p>Default:</p> <pre><code>[\n  \"sm_89\"\n]\n</code></pre> <p>Example:</p> <pre><code>[\n  \"sm_75\"\n  \"sm_86\"\n  \"compute_86\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_8cudaflagsdatacudacapabilities","title":"cudaPackagesPackageSets.cudaPackages_11_8.cudaFlags.data.cudaCapabilities","text":"<p>CUDA capabilities (hardware generations) to build for</p> <p>Type: list of A CUDA capability version.</p> <p>Default:</p> <pre><code>[\n  \"8.9\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_8cudaflagsdatacudaforwardcompat","title":"cudaPackagesPackageSets.cudaPackages_11_8.cudaFlags.data.cudaForwardCompat","text":"<p>Build with forward compatibility gencode (+PTX) to support future GPU generations</p> <p>Type: boolean</p> <p>Default: <code>false</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_8cudaflagsdatacudagpus","title":"cudaPackagesPackageSets.cudaPackages_11_8.cudaFlags.data.cudaGpus","text":"<p>CUDA GPUs to build for</p> <p>Type: list of (submodule)</p> <p>Default:</p> <pre><code>[\n  {\n    archName = \"Ada\";\n    computeCapability = \"8.9\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"11.8\";\n  }\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_8cudaflagsdatacudagpusarchname","title":"cudaPackagesPackageSets.cudaPackages_11_8.cudaFlags.data.cudaGpus.*.archName","text":"<p>Name of the microarchitecture</p> <p>Type: A CUDA architecture name, like Ampere or Ada.</p> <p>Example: <code>\"Kepler\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_8cudaflagsdatacudagpuscomputecapability","title":"cudaPackagesPackageSets.cudaPackages_11_8.cudaFlags.data.cudaGpus.*.computeCapability","text":"<p>Compute capability of the GPU</p> <p>Type: A CUDA capability version.</p> <p>Example: <code>\"3.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_8cudaflagsdatacudagpusdontdefaultafter","title":"cudaPackagesPackageSets.cudaPackages_11_8.cudaFlags.data.cudaGpus.*.dontDefaultAfter","text":"<p>The CUDA version after which to exclude this GPU from the list of default capabilities we build. null means we always include this GPU in the default capabilities if it is supported.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_8cudaflagsdatacudagpusisjetson","title":"cudaPackagesPackageSets.cudaPackages_11_8.cudaFlags.data.cudaGpus.*.isJetson","text":"<p>Whether a GPU is part of NVIDIA\u2019s line of Jetson embedded computers.</p> <p>This field is notable because it tells us what architecture to build for (as Jetson devices are aarch64). More on Jetson devices here: https://www.nvidia.com/en-us/autonomous-machines/embedded-systems/</p> <p>NOTE: These architectures are only built upon request.</p> <p>Type: one of true, false</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_8cudaflagsdatacudagpusmaxcudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_8.cudaFlags.data.cudaGpus.*.maxCudaVersion","text":"<p>The maximum (exclusive) CUDA version that supports this GPU. null means there is no maximum.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_8cudaflagsdatacudagpusmincudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_8.cudaFlags.data.cudaGpus.*.minCudaVersion","text":"<p>The minimum (inclusive) CUDA version that supports this GPU.</p> <p>Type: A version number with a major and minor component.</p> <p>Example: <code>\"10.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_8cudaflagsdatacudajetsongpus","title":"cudaPackagesPackageSets.cudaPackages_11_8.cudaFlags.data.cudaJetsonGpus","text":"<p>CUDA GPUs to build for, including only Jetson devices</p> <p>Type: list of (submodule)</p> <p>Default: <code>[ ]</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_8cudaflagsdatacudajetsongpusarchname","title":"cudaPackagesPackageSets.cudaPackages_11_8.cudaFlags.data.cudaJetsonGpus.*.archName","text":"<p>Name of the microarchitecture</p> <p>Type: A CUDA architecture name, like Ampere or Ada.</p> <p>Example: <code>\"Kepler\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_8cudaflagsdatacudajetsongpuscomputecapability","title":"cudaPackagesPackageSets.cudaPackages_11_8.cudaFlags.data.cudaJetsonGpus.*.computeCapability","text":"<p>Compute capability of the GPU</p> <p>Type: A CUDA capability version.</p> <p>Example: <code>\"3.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_8cudaflagsdatacudajetsongpusdontdefaultafter","title":"cudaPackagesPackageSets.cudaPackages_11_8.cudaFlags.data.cudaJetsonGpus.*.dontDefaultAfter","text":"<p>The CUDA version after which to exclude this GPU from the list of default capabilities we build. null means we always include this GPU in the default capabilities if it is supported.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_8cudaflagsdatacudajetsongpusisjetson","title":"cudaPackagesPackageSets.cudaPackages_11_8.cudaFlags.data.cudaJetsonGpus.*.isJetson","text":"<p>Whether a GPU is part of NVIDIA\u2019s line of Jetson embedded computers.</p> <p>This field is notable because it tells us what architecture to build for (as Jetson devices are aarch64). More on Jetson devices here: https://www.nvidia.com/en-us/autonomous-machines/embedded-systems/</p> <p>NOTE: These architectures are only built upon request.</p> <p>Type: one of true, false</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_8cudaflagsdatacudajetsongpusmaxcudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_8.cudaFlags.data.cudaJetsonGpus.*.maxCudaVersion","text":"<p>The maximum (exclusive) CUDA version that supports this GPU. null means there is no maximum.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_8cudaflagsdatacudajetsongpusmincudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_8.cudaFlags.data.cudaJetsonGpus.*.minCudaVersion","text":"<p>The minimum (inclusive) CUDA version that supports this GPU.</p> <p>Type: A version number with a major and minor component.</p> <p>Example: <code>\"10.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_8cudaflagsdatacudanonjetsongpus","title":"cudaPackagesPackageSets.cudaPackages_11_8.cudaFlags.data.cudaNonJetsonGpus","text":"<p>CUDA GPUs to build for, excluding Jetson devices</p> <p>Type: list of (submodule)</p> <p>Default:</p> <pre><code>[\n  {\n    archName = \"Ada\";\n    computeCapability = \"8.9\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"11.8\";\n  }\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_8cudaflagsdatacudanonjetsongpusarchname","title":"cudaPackagesPackageSets.cudaPackages_11_8.cudaFlags.data.cudaNonJetsonGpus.*.archName","text":"<p>Name of the microarchitecture</p> <p>Type: A CUDA architecture name, like Ampere or Ada.</p> <p>Example: <code>\"Kepler\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_8cudaflagsdatacudanonjetsongpuscomputecapability","title":"cudaPackagesPackageSets.cudaPackages_11_8.cudaFlags.data.cudaNonJetsonGpus.*.computeCapability","text":"<p>Compute capability of the GPU</p> <p>Type: A CUDA capability version.</p> <p>Example: <code>\"3.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_8cudaflagsdatacudanonjetsongpusdontdefaultafter","title":"cudaPackagesPackageSets.cudaPackages_11_8.cudaFlags.data.cudaNonJetsonGpus.*.dontDefaultAfter","text":"<p>The CUDA version after which to exclude this GPU from the list of default capabilities we build. null means we always include this GPU in the default capabilities if it is supported.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_8cudaflagsdatacudanonjetsongpusisjetson","title":"cudaPackagesPackageSets.cudaPackages_11_8.cudaFlags.data.cudaNonJetsonGpus.*.isJetson","text":"<p>Whether a GPU is part of NVIDIA\u2019s line of Jetson embedded computers.</p> <p>This field is notable because it tells us what architecture to build for (as Jetson devices are aarch64). More on Jetson devices here: https://www.nvidia.com/en-us/autonomous-machines/embedded-systems/</p> <p>NOTE: These architectures are only built upon request.</p> <p>Type: one of false, true</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_8cudaflagsdatacudanonjetsongpusmaxcudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_8.cudaFlags.data.cudaNonJetsonGpus.*.maxCudaVersion","text":"<p>The maximum (exclusive) CUDA version that supports this GPU. null means there is no maximum.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_8cudaflagsdatacudanonjetsongpusmincudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_8.cudaFlags.data.cudaNonJetsonGpus.*.minCudaVersion","text":"<p>The minimum (inclusive) CUDA version that supports this GPU.</p> <p>Type: A version number with a major and minor component.</p> <p>Example: <code>\"10.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_8cudaflagsdatacudasupport","title":"cudaPackagesPackageSets.cudaPackages_11_8.cudaFlags.data.cudaSupport","text":"<p>Build packages with CUDA support</p> <p>Type: boolean</p> <p>Default: <code>true</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_8cudaflagsdatadefaultcapabilities","title":"cudaPackagesPackageSets.cudaPackages_11_8.cudaFlags.data.defaultCapabilities","text":"<p>The default compute capabilities for a given CUDA version</p> <p>Type: list of A CUDA capability version.</p> <p>Default:</p> <pre><code>[\n  \"6.0\"\n  \"6.1\"\n  \"7.0\"\n  \"7.5\"\n  \"8.0\"\n  \"8.6\"\n  \"8.9\"\n  \"9.0\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_8cudaflagsdatadefaultgpus","title":"cudaPackagesPackageSets.cudaPackages_11_8.cudaFlags.data.defaultGpus","text":"<p>The default GPUs for a given CUDA version</p> <p>Type: list of (submodule)</p> <p>Default:</p> <pre><code>[\n  {\n    archName = \"Pascal\";\n    computeCapability = \"6.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Pascal\";\n    computeCapability = \"6.1\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Volta\";\n    computeCapability = \"7.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Turing\";\n    computeCapability = \"7.5\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Ampere\";\n    computeCapability = \"8.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"11.2\";\n  }\n  {\n    archName = \"Ampere\";\n    computeCapability = \"8.6\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"11.2\";\n  }\n  {\n    archName = \"Ada\";\n    computeCapability = \"8.9\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"11.8\";\n  }\n  {\n    archName = \"Hopper\";\n    computeCapability = \"9.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"11.8\";\n  }\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_8cudaflagsdatadefaultgpusarchname","title":"cudaPackagesPackageSets.cudaPackages_11_8.cudaFlags.data.defaultGpus.*.archName","text":"<p>Name of the microarchitecture</p> <p>Type: A CUDA architecture name, like Ampere or Ada.</p> <p>Example: <code>\"Kepler\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_8cudaflagsdatadefaultgpuscomputecapability","title":"cudaPackagesPackageSets.cudaPackages_11_8.cudaFlags.data.defaultGpus.*.computeCapability","text":"<p>Compute capability of the GPU</p> <p>Type: A CUDA capability version.</p> <p>Example: <code>\"3.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_8cudaflagsdatadefaultgpusdontdefaultafter","title":"cudaPackagesPackageSets.cudaPackages_11_8.cudaFlags.data.defaultGpus.*.dontDefaultAfter","text":"<p>The CUDA version after which to exclude this GPU from the list of default capabilities we build. null means we always include this GPU in the default capabilities if it is supported.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_8cudaflagsdatadefaultgpusisjetson","title":"cudaPackagesPackageSets.cudaPackages_11_8.cudaFlags.data.defaultGpus.*.isJetson","text":"<p>Whether a GPU is part of NVIDIA\u2019s line of Jetson embedded computers.</p> <p>This field is notable because it tells us what architecture to build for (as Jetson devices are aarch64). More on Jetson devices here: https://www.nvidia.com/en-us/autonomous-machines/embedded-systems/</p> <p>NOTE: These architectures are only built upon request.</p> <p>Type: one of true, false</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_8cudaflagsdatadefaultgpusmaxcudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_8.cudaFlags.data.defaultGpus.*.maxCudaVersion","text":"<p>The maximum (exclusive) CUDA version that supports this GPU. null means there is no maximum.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_8cudaflagsdatadefaultgpusmincudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_8.cudaFlags.data.defaultGpus.*.minCudaVersion","text":"<p>The minimum (inclusive) CUDA version that supports this GPU.</p> <p>Type: A version number with a major and minor component.</p> <p>Example: <code>\"10.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_8cudaflagsdatagencodeargs","title":"cudaPackagesPackageSets.cudaPackages_11_8.cudaFlags.data.gencodeArgs","text":"<p>The gencode arguments to pass to NVCC</p> <p>Type: list of A `gencode` argument for the `nvcc` compiler.</p> <p>Default:</p> <pre><code>[\n  \"-gencode=arch=compute_89,code=sm_89\"\n]\n</code></pre> <p>Example:</p> <pre><code>[\n  \"-gencode=arch=compute_75,code=sm_75\"\n  \"-gencode=arch=compute_86,code=sm_86\"\n  \"-gencode=arch=compute_86,code=compute_86\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_8cudaflagsdatagencodestring","title":"cudaPackagesPackageSets.cudaPackages_11_8.cudaFlags.data.gencodeString","text":"<p>A space-separated string of CUDA gencode arguments to pass to NVCC</p> <p>Type: string</p> <p>Default: <code>\"-gencode=arch=compute_89,code=sm_89\"</code></p> <p>Example: <code>\"-gencode=arch=compute_75,code=sm_75 ... -gencode=arch=compute_86,code=compute_86\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_8cudaflagsdataisjetsonbuild","title":"cudaPackagesPackageSets.cudaPackages_11_8.cudaFlags.data.isJetsonBuild","text":"<p>Whether the build is for a Jetson device.</p> <p>Jetson devices cannot be targeted by the same binaries which target non-Jetson devices. While NVIDIA provides both <code>linux-aarch64</code> and <code>linux-sbsa</code> packages, which both target <code>aarch64</code>, they are built with different settings and cannot be mixed.</p> <p>Type: boolean</p> <p>Default: <code>false</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_8cudaflagsdatarealarches","title":"cudaPackagesPackageSets.cudaPackages_11_8.cudaFlags.data.realArches","text":"<p>The physical architectures to build for</p> <p>Type: list of A real/physical CUDA architecture name.</p> <p>Default:</p> <pre><code>[\n  \"sm_89\"\n]\n</code></pre> <p>Example:</p> <pre><code>[\n  \"sm_75\"\n  \"sm_86\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_8cudaflagsdatasupportedcapabilities","title":"cudaPackagesPackageSets.cudaPackages_11_8.cudaFlags.data.supportedCapabilities","text":"<p>The compute capabilities supported by a given CUDA version</p> <p>Type: list of A CUDA capability version.</p> <p>Default:</p> <pre><code>[\n  \"3.5\"\n  \"3.7\"\n  \"5.0\"\n  \"5.2\"\n  \"5.3\"\n  \"6.0\"\n  \"6.1\"\n  \"6.2\"\n  \"7.0\"\n  \"7.2\"\n  \"7.5\"\n  \"8.0\"\n  \"8.6\"\n  \"8.7\"\n  \"8.9\"\n  \"9.0\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_8cudaflagsdatasupportedgpus","title":"cudaPackagesPackageSets.cudaPackages_11_8.cudaFlags.data.supportedGpus","text":"<p>The GPUs supported by a given CUDA version</p> <p>Type: list of (submodule)</p> <p>Default:</p> <pre><code>[\n  {\n    archName = \"Kepler\";\n    computeCapability = \"3.5\";\n    dontDefaultAfter = \"11.0\";\n    isJetson = false;\n    maxCudaVersion = \"11.8\";\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Kepler\";\n    computeCapability = \"3.7\";\n    dontDefaultAfter = \"11.0\";\n    isJetson = false;\n    maxCudaVersion = \"11.8\";\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Maxwell\";\n    computeCapability = \"5.0\";\n    dontDefaultAfter = \"11.0\";\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Maxwell\";\n    computeCapability = \"5.2\";\n    dontDefaultAfter = \"11.0\";\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Maxwell\";\n    computeCapability = \"5.3\";\n    dontDefaultAfter = null;\n    isJetson = true;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Pascal\";\n    computeCapability = \"6.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Pascal\";\n    computeCapability = \"6.1\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Pascal\";\n    computeCapability = \"6.2\";\n    dontDefaultAfter = null;\n    isJetson = true;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Volta\";\n    computeCapability = \"7.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Volta\";\n    computeCapability = \"7.2\";\n    dontDefaultAfter = null;\n    isJetson = true;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Turing\";\n    computeCapability = \"7.5\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Ampere\";\n    computeCapability = \"8.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"11.2\";\n  }\n  {\n    archName = \"Ampere\";\n    computeCapability = \"8.6\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"11.2\";\n  }\n  {\n    archName = \"Ampere\";\n    computeCapability = \"8.7\";\n    dontDefaultAfter = null;\n    isJetson = true;\n    maxCudaVersion = null;\n    minCudaVersion = \"11.5\";\n  }\n  {\n    archName = \"Ada\";\n    computeCapability = \"8.9\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"11.8\";\n  }\n  {\n    archName = \"Hopper\";\n    computeCapability = \"9.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"11.8\";\n  }\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_8cudaflagsdatasupportedgpusarchname","title":"cudaPackagesPackageSets.cudaPackages_11_8.cudaFlags.data.supportedGpus.*.archName","text":"<p>Name of the microarchitecture</p> <p>Type: A CUDA architecture name, like Ampere or Ada.</p> <p>Example: <code>\"Kepler\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_8cudaflagsdatasupportedgpuscomputecapability","title":"cudaPackagesPackageSets.cudaPackages_11_8.cudaFlags.data.supportedGpus.*.computeCapability","text":"<p>Compute capability of the GPU</p> <p>Type: A CUDA capability version.</p> <p>Example: <code>\"3.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_8cudaflagsdatasupportedgpusdontdefaultafter","title":"cudaPackagesPackageSets.cudaPackages_11_8.cudaFlags.data.supportedGpus.*.dontDefaultAfter","text":"<p>The CUDA version after which to exclude this GPU from the list of default capabilities we build. null means we always include this GPU in the default capabilities if it is supported.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_8cudaflagsdatasupportedgpusisjetson","title":"cudaPackagesPackageSets.cudaPackages_11_8.cudaFlags.data.supportedGpus.*.isJetson","text":"<p>Whether a GPU is part of NVIDIA\u2019s line of Jetson embedded computers.</p> <p>This field is notable because it tells us what architecture to build for (as Jetson devices are aarch64). More on Jetson devices here: https://www.nvidia.com/en-us/autonomous-machines/embedded-systems/</p> <p>NOTE: These architectures are only built upon request.</p> <p>Type: one of true, false</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_8cudaflagsdatasupportedgpusmaxcudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_8.cudaFlags.data.supportedGpus.*.maxCudaVersion","text":"<p>The maximum (exclusive) CUDA version that supports this GPU. null means there is no maximum.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_8cudaflagsdatasupportedgpusmincudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_8.cudaFlags.data.supportedGpus.*.minCudaVersion","text":"<p>The minimum (inclusive) CUDA version that supports this GPU.</p> <p>Type: A version number with a major and minor component.</p> <p>Example: <code>\"10.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_8cudaflagsdatavirtualarches","title":"cudaPackagesPackageSets.cudaPackages_11_8.cudaFlags.data.virtualArches","text":"<p>The virtual architectures to build for. These are typically used for forward compatibility, when trying to support an architecture newer than the CUDA version allows.</p> <p>Type: list of A virtual CUDA architecture name.</p> <p>Default:</p> <pre><code>[\n  \"compute_89\"\n]\n</code></pre> <p>Example:</p> <pre><code>[\n  \"compute_75\"\n  \"compute_86\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_8cudaflagsutilsarchmapper","title":"cudaPackagesPackageSets.cudaPackages_11_8.cudaFlags.utils.archMapper","text":"<p>Maps a feature across a list of compute capabilities to produce a list of architectures.</p> <p>For example, \u201csm\u201d and [ \u201c8.0\u201d \u201c8.6\u201d \u201c8.7\u201d ] yield [ \u201csm_80\u201d \u201csm_86\u201d \u201csm_87\u201d ].</p> <p>Type: function that evaluates to a(n) function that evaluates to a(n) list of string</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_8cudaflagsutilsdropdot","title":"cudaPackagesPackageSets.cudaPackages_11_8.cudaFlags.utils.dropDot","text":"<p>Drops dots from a string.</p> <p>Type: function that evaluates to a(n) string</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_8cudaflagsutilsgencodemapper","title":"cudaPackagesPackageSets.cudaPackages_11_8.cudaFlags.utils.gencodeMapper","text":"<p>Maps a feature across a list of compute capabilities to produce a list of gencode arguments.</p> <p>For example, \u201csm\u201d and [ \u201c8.0\u201d \u201c8.6\u201d \u201c8.7\u201d ] yield [ \u201c-gencode=arch=compute_80,code=sm_80\u201d \u201c-gencode=arch=compute_86,code=sm_86\u201d \u201c-gencode=arch=compute_87,code=sm_87\u201d ].</p> <p>Type: function that evaluates to a(n) function that evaluates to a(n) list of string</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_8cudaflagsutilsgetnixsystem","title":"cudaPackagesPackageSets.cudaPackages_11_8.cudaFlags.utils.getNixSystem","text":"<p>Maps NVIDIA redist arch to Nix system.</p> <p>NOTE: This function will be called by unsupported systems because <code>cudaPackages</code> is part of <code>all-packages.nix</code>, which is evaluated on all systems. As such, we need to handle unsupported systems gracefully.</p> <p>Type: function that evaluates to a(n) (one of \u201cunsupported\u201d, \u201caaarch64-linux\u201d, \u201cx86_64-linux\u201d, \u201cppc64le-linux\u201d, \u201cx86_64-windows\u201d)</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_8cudaflagsutilsgetredistarch","title":"cudaPackagesPackageSets.cudaPackages_11_8.cudaFlags.utils.getRedistArch","text":"<p>Maps Nix system to NVIDIA redist arch.</p> <p>NOTE: We swap out the default <code>linux-sbsa</code> redist (for server-grade ARM chips) with the <code>linux-aarch64</code> redist (which is for Jetson devices) if we\u2019re building any Jetson devices. Since both are based on aarch64, we can only have one or the other, otherwise there\u2019s an ambiguity as to which should be used.</p> <p>NOTE: This function will be called by unsupported systems because <code>cudaPackages</code> is part of <code>all-packages.nix</code>, which is evaluated on all systems. As such, we need to handle unsupported systems gracefully.</p> <p>Type: function that evaluates to a(n) (one of \u201cunsupported\u201d, \u201clinux-aarch64\u201d, \u201clinux-sbsa\u201d, \u201clinux-x86_64\u201d, \u201clinux-ppc64le\u201d, \u201cwindows-x86_64\u201d)</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_8cudaflagsutilsisdefault","title":"cudaPackagesPackageSets.cudaPackages_11_8.cudaFlags.utils.isDefault","text":"<p>Whether a GPU is included in the default capabilities</p> <p>Type: function that evaluates to a(n) boolean</p> <p>Default: <code>&lt;function, args: {dontDefaultAfter, isJetson}&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_8cudaflagsutilsissupported","title":"cudaPackagesPackageSets.cudaPackages_11_8.cudaFlags.utils.isSupported","text":"<p>Whether a CUDA version supports a given GPU</p> <p>Type: function that evaluates to a(n) boolean</p> <p>Default: <code>&lt;function, args: {maxCudaVersion, minCudaVersion}&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_8cudamajorminorversion","title":"cudaPackagesPackageSets.cudaPackages_11_8.cudaMajorMinorVersion","text":"<p>The major and minor version of the CUDA package set</p> <p>Type: string</p> <p>Default: <code>\"11.8\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_8cudamajorversion","title":"cudaPackagesPackageSets.cudaPackages_11_8.cudaMajorVersion","text":"<p>The major version of the CUDA package set</p> <p>Type: string</p> <p>Default: <code>\"11\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_8cudanewer","title":"cudaPackagesPackageSets.cudaPackages_11_8.cudaNewer","text":"<p>A utility to check if the CUDA version is newer than a given version</p> <p>Type: function that evaluates to a(n) boolean</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_8cudaolder","title":"cudaPackagesPackageSets.cudaPackages_11_8.cudaOlder","text":"<p>A utility to check if the CUDA version is older than a given version</p> <p>Type: function that evaluates to a(n) boolean</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_11_8cudaversion","title":"cudaPackagesPackageSets.cudaPackages_11_8.cudaVersion","text":"<p>The CUDA version of the package set</p> <p>Type: A version number with a major and minor component.</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_0","title":"cudaPackagesPackageSets.cudaPackages_12_0","text":"<p>A CUDA package set for a particular version of CUDA</p> <p>Type: submodule</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules</p>"},{"location":"#cudapackagespackagesetscudapackages_12_0cudaatleast","title":"cudaPackagesPackageSets.cudaPackages_12_0.cudaAtLeast","text":"<p>A utility to check if the CUDA version is at least a given version</p> <p>Type: function that evaluates to a(n) boolean</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_0cudaatmost","title":"cudaPackagesPackageSets.cudaPackages_12_0.cudaAtMost","text":"<p>A utility to check if the CUDA version is at most a given version</p> <p>Type: function that evaluates to a(n) boolean</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_0cudaflagsdataarchnames","title":"cudaPackagesPackageSets.cudaPackages_12_0.cudaFlags.data.archNames","text":"<p>The names of the architectures to build for</p> <p>Type: list of string</p> <p>Default:</p> <pre><code>[\n  \"Ada\"\n]\n</code></pre> <p>Example:</p> <pre><code>[\n  \"Turing\"\n  \"Ampere\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_0cudaflagsdataarches","title":"cudaPackagesPackageSets.cudaPackages_12_0.cudaFlags.data.arches","text":"<p>The architectures to build for. Includes a virtual architecture if forward compatibility is enabled.</p> <p>Type: list of (A real/physical CUDA architecture name. or A virtual CUDA architecture name.)</p> <p>Default:</p> <pre><code>[\n  \"sm_89\"\n]\n</code></pre> <p>Example:</p> <pre><code>[\n  \"sm_75\"\n  \"sm_86\"\n  \"compute_86\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_0cudaflagsdatacudacapabilities","title":"cudaPackagesPackageSets.cudaPackages_12_0.cudaFlags.data.cudaCapabilities","text":"<p>CUDA capabilities (hardware generations) to build for</p> <p>Type: list of A CUDA capability version.</p> <p>Default:</p> <pre><code>[\n  \"8.9\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_0cudaflagsdatacudaforwardcompat","title":"cudaPackagesPackageSets.cudaPackages_12_0.cudaFlags.data.cudaForwardCompat","text":"<p>Build with forward compatibility gencode (+PTX) to support future GPU generations</p> <p>Type: boolean</p> <p>Default: <code>false</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_0cudaflagsdatacudagpus","title":"cudaPackagesPackageSets.cudaPackages_12_0.cudaFlags.data.cudaGpus","text":"<p>CUDA GPUs to build for</p> <p>Type: list of (submodule)</p> <p>Default:</p> <pre><code>[\n  {\n    archName = \"Ada\";\n    computeCapability = \"8.9\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"11.8\";\n  }\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_0cudaflagsdatacudagpusarchname","title":"cudaPackagesPackageSets.cudaPackages_12_0.cudaFlags.data.cudaGpus.*.archName","text":"<p>Name of the microarchitecture</p> <p>Type: A CUDA architecture name, like Ampere or Ada.</p> <p>Example: <code>\"Kepler\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_0cudaflagsdatacudagpuscomputecapability","title":"cudaPackagesPackageSets.cudaPackages_12_0.cudaFlags.data.cudaGpus.*.computeCapability","text":"<p>Compute capability of the GPU</p> <p>Type: A CUDA capability version.</p> <p>Example: <code>\"3.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_0cudaflagsdatacudagpusdontdefaultafter","title":"cudaPackagesPackageSets.cudaPackages_12_0.cudaFlags.data.cudaGpus.*.dontDefaultAfter","text":"<p>The CUDA version after which to exclude this GPU from the list of default capabilities we build. null means we always include this GPU in the default capabilities if it is supported.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_0cudaflagsdatacudagpusisjetson","title":"cudaPackagesPackageSets.cudaPackages_12_0.cudaFlags.data.cudaGpus.*.isJetson","text":"<p>Whether a GPU is part of NVIDIA\u2019s line of Jetson embedded computers.</p> <p>This field is notable because it tells us what architecture to build for (as Jetson devices are aarch64). More on Jetson devices here: https://www.nvidia.com/en-us/autonomous-machines/embedded-systems/</p> <p>NOTE: These architectures are only built upon request.</p> <p>Type: one of true, false</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_0cudaflagsdatacudagpusmaxcudaversion","title":"cudaPackagesPackageSets.cudaPackages_12_0.cudaFlags.data.cudaGpus.*.maxCudaVersion","text":"<p>The maximum (exclusive) CUDA version that supports this GPU. null means there is no maximum.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_0cudaflagsdatacudagpusmincudaversion","title":"cudaPackagesPackageSets.cudaPackages_12_0.cudaFlags.data.cudaGpus.*.minCudaVersion","text":"<p>The minimum (inclusive) CUDA version that supports this GPU.</p> <p>Type: A version number with a major and minor component.</p> <p>Example: <code>\"10.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_0cudaflagsdatacudajetsongpus","title":"cudaPackagesPackageSets.cudaPackages_12_0.cudaFlags.data.cudaJetsonGpus","text":"<p>CUDA GPUs to build for, including only Jetson devices</p> <p>Type: list of (submodule)</p> <p>Default: <code>[ ]</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_0cudaflagsdatacudajetsongpusarchname","title":"cudaPackagesPackageSets.cudaPackages_12_0.cudaFlags.data.cudaJetsonGpus.*.archName","text":"<p>Name of the microarchitecture</p> <p>Type: A CUDA architecture name, like Ampere or Ada.</p> <p>Example: <code>\"Kepler\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_0cudaflagsdatacudajetsongpuscomputecapability","title":"cudaPackagesPackageSets.cudaPackages_12_0.cudaFlags.data.cudaJetsonGpus.*.computeCapability","text":"<p>Compute capability of the GPU</p> <p>Type: A CUDA capability version.</p> <p>Example: <code>\"3.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_0cudaflagsdatacudajetsongpusdontdefaultafter","title":"cudaPackagesPackageSets.cudaPackages_12_0.cudaFlags.data.cudaJetsonGpus.*.dontDefaultAfter","text":"<p>The CUDA version after which to exclude this GPU from the list of default capabilities we build. null means we always include this GPU in the default capabilities if it is supported.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_0cudaflagsdatacudajetsongpusisjetson","title":"cudaPackagesPackageSets.cudaPackages_12_0.cudaFlags.data.cudaJetsonGpus.*.isJetson","text":"<p>Whether a GPU is part of NVIDIA\u2019s line of Jetson embedded computers.</p> <p>This field is notable because it tells us what architecture to build for (as Jetson devices are aarch64). More on Jetson devices here: https://www.nvidia.com/en-us/autonomous-machines/embedded-systems/</p> <p>NOTE: These architectures are only built upon request.</p> <p>Type: one of true, false</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_0cudaflagsdatacudajetsongpusmaxcudaversion","title":"cudaPackagesPackageSets.cudaPackages_12_0.cudaFlags.data.cudaJetsonGpus.*.maxCudaVersion","text":"<p>The maximum (exclusive) CUDA version that supports this GPU. null means there is no maximum.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_0cudaflagsdatacudajetsongpusmincudaversion","title":"cudaPackagesPackageSets.cudaPackages_12_0.cudaFlags.data.cudaJetsonGpus.*.minCudaVersion","text":"<p>The minimum (inclusive) CUDA version that supports this GPU.</p> <p>Type: A version number with a major and minor component.</p> <p>Example: <code>\"10.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_0cudaflagsdatacudanonjetsongpus","title":"cudaPackagesPackageSets.cudaPackages_12_0.cudaFlags.data.cudaNonJetsonGpus","text":"<p>CUDA GPUs to build for, excluding Jetson devices</p> <p>Type: list of (submodule)</p> <p>Default:</p> <pre><code>[\n  {\n    archName = \"Ada\";\n    computeCapability = \"8.9\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"11.8\";\n  }\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_0cudaflagsdatacudanonjetsongpusarchname","title":"cudaPackagesPackageSets.cudaPackages_12_0.cudaFlags.data.cudaNonJetsonGpus.*.archName","text":"<p>Name of the microarchitecture</p> <p>Type: A CUDA architecture name, like Ampere or Ada.</p> <p>Example: <code>\"Kepler\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_0cudaflagsdatacudanonjetsongpuscomputecapability","title":"cudaPackagesPackageSets.cudaPackages_12_0.cudaFlags.data.cudaNonJetsonGpus.*.computeCapability","text":"<p>Compute capability of the GPU</p> <p>Type: A CUDA capability version.</p> <p>Example: <code>\"3.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_0cudaflagsdatacudanonjetsongpusdontdefaultafter","title":"cudaPackagesPackageSets.cudaPackages_12_0.cudaFlags.data.cudaNonJetsonGpus.*.dontDefaultAfter","text":"<p>The CUDA version after which to exclude this GPU from the list of default capabilities we build. null means we always include this GPU in the default capabilities if it is supported.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_0cudaflagsdatacudanonjetsongpusisjetson","title":"cudaPackagesPackageSets.cudaPackages_12_0.cudaFlags.data.cudaNonJetsonGpus.*.isJetson","text":"<p>Whether a GPU is part of NVIDIA\u2019s line of Jetson embedded computers.</p> <p>This field is notable because it tells us what architecture to build for (as Jetson devices are aarch64). More on Jetson devices here: https://www.nvidia.com/en-us/autonomous-machines/embedded-systems/</p> <p>NOTE: These architectures are only built upon request.</p> <p>Type: one of false, true</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_0cudaflagsdatacudanonjetsongpusmaxcudaversion","title":"cudaPackagesPackageSets.cudaPackages_12_0.cudaFlags.data.cudaNonJetsonGpus.*.maxCudaVersion","text":"<p>The maximum (exclusive) CUDA version that supports this GPU. null means there is no maximum.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_0cudaflagsdatacudanonjetsongpusmincudaversion","title":"cudaPackagesPackageSets.cudaPackages_12_0.cudaFlags.data.cudaNonJetsonGpus.*.minCudaVersion","text":"<p>The minimum (inclusive) CUDA version that supports this GPU.</p> <p>Type: A version number with a major and minor component.</p> <p>Example: <code>\"10.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_0cudaflagsdatacudasupport","title":"cudaPackagesPackageSets.cudaPackages_12_0.cudaFlags.data.cudaSupport","text":"<p>Build packages with CUDA support</p> <p>Type: boolean</p> <p>Default: <code>true</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_0cudaflagsdatadefaultcapabilities","title":"cudaPackagesPackageSets.cudaPackages_12_0.cudaFlags.data.defaultCapabilities","text":"<p>The default compute capabilities for a given CUDA version</p> <p>Type: list of A CUDA capability version.</p> <p>Default:</p> <pre><code>[\n  \"6.0\"\n  \"6.1\"\n  \"7.0\"\n  \"7.5\"\n  \"8.0\"\n  \"8.6\"\n  \"8.9\"\n  \"9.0\"\n  \"9.0a\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_0cudaflagsdatadefaultgpus","title":"cudaPackagesPackageSets.cudaPackages_12_0.cudaFlags.data.defaultGpus","text":"<p>The default GPUs for a given CUDA version</p> <p>Type: list of (submodule)</p> <p>Default:</p> <pre><code>[\n  {\n    archName = \"Pascal\";\n    computeCapability = \"6.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Pascal\";\n    computeCapability = \"6.1\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Volta\";\n    computeCapability = \"7.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Turing\";\n    computeCapability = \"7.5\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Ampere\";\n    computeCapability = \"8.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"11.2\";\n  }\n  {\n    archName = \"Ampere\";\n    computeCapability = \"8.6\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"11.2\";\n  }\n  {\n    archName = \"Ada\";\n    computeCapability = \"8.9\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"11.8\";\n  }\n  {\n    archName = \"Hopper\";\n    computeCapability = \"9.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"11.8\";\n  }\n  {\n    archName = \"Hopper\";\n    computeCapability = \"9.0a\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"12.0\";\n  }\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_0cudaflagsdatadefaultgpusarchname","title":"cudaPackagesPackageSets.cudaPackages_12_0.cudaFlags.data.defaultGpus.*.archName","text":"<p>Name of the microarchitecture</p> <p>Type: A CUDA architecture name, like Ampere or Ada.</p> <p>Example: <code>\"Kepler\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_0cudaflagsdatadefaultgpuscomputecapability","title":"cudaPackagesPackageSets.cudaPackages_12_0.cudaFlags.data.defaultGpus.*.computeCapability","text":"<p>Compute capability of the GPU</p> <p>Type: A CUDA capability version.</p> <p>Example: <code>\"3.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_0cudaflagsdatadefaultgpusdontdefaultafter","title":"cudaPackagesPackageSets.cudaPackages_12_0.cudaFlags.data.defaultGpus.*.dontDefaultAfter","text":"<p>The CUDA version after which to exclude this GPU from the list of default capabilities we build. null means we always include this GPU in the default capabilities if it is supported.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_0cudaflagsdatadefaultgpusisjetson","title":"cudaPackagesPackageSets.cudaPackages_12_0.cudaFlags.data.defaultGpus.*.isJetson","text":"<p>Whether a GPU is part of NVIDIA\u2019s line of Jetson embedded computers.</p> <p>This field is notable because it tells us what architecture to build for (as Jetson devices are aarch64). More on Jetson devices here: https://www.nvidia.com/en-us/autonomous-machines/embedded-systems/</p> <p>NOTE: These architectures are only built upon request.</p> <p>Type: one of true, false</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_0cudaflagsdatadefaultgpusmaxcudaversion","title":"cudaPackagesPackageSets.cudaPackages_12_0.cudaFlags.data.defaultGpus.*.maxCudaVersion","text":"<p>The maximum (exclusive) CUDA version that supports this GPU. null means there is no maximum.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_0cudaflagsdatadefaultgpusmincudaversion","title":"cudaPackagesPackageSets.cudaPackages_12_0.cudaFlags.data.defaultGpus.*.minCudaVersion","text":"<p>The minimum (inclusive) CUDA version that supports this GPU.</p> <p>Type: A version number with a major and minor component.</p> <p>Example: <code>\"10.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_0cudaflagsdatagencodeargs","title":"cudaPackagesPackageSets.cudaPackages_12_0.cudaFlags.data.gencodeArgs","text":"<p>The gencode arguments to pass to NVCC</p> <p>Type: list of A `gencode` argument for the `nvcc` compiler.</p> <p>Default:</p> <pre><code>[\n  \"-gencode=arch=compute_89,code=sm_89\"\n]\n</code></pre> <p>Example:</p> <pre><code>[\n  \"-gencode=arch=compute_75,code=sm_75\"\n  \"-gencode=arch=compute_86,code=sm_86\"\n  \"-gencode=arch=compute_86,code=compute_86\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_0cudaflagsdatagencodestring","title":"cudaPackagesPackageSets.cudaPackages_12_0.cudaFlags.data.gencodeString","text":"<p>A space-separated string of CUDA gencode arguments to pass to NVCC</p> <p>Type: string</p> <p>Default: <code>\"-gencode=arch=compute_89,code=sm_89\"</code></p> <p>Example: <code>\"-gencode=arch=compute_75,code=sm_75 ... -gencode=arch=compute_86,code=compute_86\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_0cudaflagsdataisjetsonbuild","title":"cudaPackagesPackageSets.cudaPackages_12_0.cudaFlags.data.isJetsonBuild","text":"<p>Whether the build is for a Jetson device.</p> <p>Jetson devices cannot be targeted by the same binaries which target non-Jetson devices. While NVIDIA provides both <code>linux-aarch64</code> and <code>linux-sbsa</code> packages, which both target <code>aarch64</code>, they are built with different settings and cannot be mixed.</p> <p>Type: boolean</p> <p>Default: <code>false</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_0cudaflagsdatarealarches","title":"cudaPackagesPackageSets.cudaPackages_12_0.cudaFlags.data.realArches","text":"<p>The physical architectures to build for</p> <p>Type: list of A real/physical CUDA architecture name.</p> <p>Default:</p> <pre><code>[\n  \"sm_89\"\n]\n</code></pre> <p>Example:</p> <pre><code>[\n  \"sm_75\"\n  \"sm_86\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_0cudaflagsdatasupportedcapabilities","title":"cudaPackagesPackageSets.cudaPackages_12_0.cudaFlags.data.supportedCapabilities","text":"<p>The compute capabilities supported by a given CUDA version</p> <p>Type: list of A CUDA capability version.</p> <p>Default:</p> <pre><code>[\n  \"5.0\"\n  \"5.2\"\n  \"5.3\"\n  \"6.0\"\n  \"6.1\"\n  \"6.2\"\n  \"7.0\"\n  \"7.2\"\n  \"7.5\"\n  \"8.0\"\n  \"8.6\"\n  \"8.7\"\n  \"8.9\"\n  \"9.0\"\n  \"9.0a\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_0cudaflagsdatasupportedgpus","title":"cudaPackagesPackageSets.cudaPackages_12_0.cudaFlags.data.supportedGpus","text":"<p>The GPUs supported by a given CUDA version</p> <p>Type: list of (submodule)</p> <p>Default:</p> <pre><code>[\n  {\n    archName = \"Maxwell\";\n    computeCapability = \"5.0\";\n    dontDefaultAfter = \"11.0\";\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Maxwell\";\n    computeCapability = \"5.2\";\n    dontDefaultAfter = \"11.0\";\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Maxwell\";\n    computeCapability = \"5.3\";\n    dontDefaultAfter = null;\n    isJetson = true;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Pascal\";\n    computeCapability = \"6.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Pascal\";\n    computeCapability = \"6.1\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Pascal\";\n    computeCapability = \"6.2\";\n    dontDefaultAfter = null;\n    isJetson = true;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Volta\";\n    computeCapability = \"7.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Volta\";\n    computeCapability = \"7.2\";\n    dontDefaultAfter = null;\n    isJetson = true;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Turing\";\n    computeCapability = \"7.5\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Ampere\";\n    computeCapability = \"8.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"11.2\";\n  }\n  {\n    archName = \"Ampere\";\n    computeCapability = \"8.6\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"11.2\";\n  }\n  {\n    archName = \"Ampere\";\n    computeCapability = \"8.7\";\n    dontDefaultAfter = null;\n    isJetson = true;\n    maxCudaVersion = null;\n    minCudaVersion = \"11.5\";\n  }\n  {\n    archName = \"Ada\";\n    computeCapability = \"8.9\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"11.8\";\n  }\n  {\n    archName = \"Hopper\";\n    computeCapability = \"9.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"11.8\";\n  }\n  {\n    archName = \"Hopper\";\n    computeCapability = \"9.0a\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"12.0\";\n  }\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_0cudaflagsdatasupportedgpusarchname","title":"cudaPackagesPackageSets.cudaPackages_12_0.cudaFlags.data.supportedGpus.*.archName","text":"<p>Name of the microarchitecture</p> <p>Type: A CUDA architecture name, like Ampere or Ada.</p> <p>Example: <code>\"Kepler\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_0cudaflagsdatasupportedgpuscomputecapability","title":"cudaPackagesPackageSets.cudaPackages_12_0.cudaFlags.data.supportedGpus.*.computeCapability","text":"<p>Compute capability of the GPU</p> <p>Type: A CUDA capability version.</p> <p>Example: <code>\"3.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_0cudaflagsdatasupportedgpusdontdefaultafter","title":"cudaPackagesPackageSets.cudaPackages_12_0.cudaFlags.data.supportedGpus.*.dontDefaultAfter","text":"<p>The CUDA version after which to exclude this GPU from the list of default capabilities we build. null means we always include this GPU in the default capabilities if it is supported.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_0cudaflagsdatasupportedgpusisjetson","title":"cudaPackagesPackageSets.cudaPackages_12_0.cudaFlags.data.supportedGpus.*.isJetson","text":"<p>Whether a GPU is part of NVIDIA\u2019s line of Jetson embedded computers.</p> <p>This field is notable because it tells us what architecture to build for (as Jetson devices are aarch64). More on Jetson devices here: https://www.nvidia.com/en-us/autonomous-machines/embedded-systems/</p> <p>NOTE: These architectures are only built upon request.</p> <p>Type: one of true, false</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_0cudaflagsdatasupportedgpusmaxcudaversion","title":"cudaPackagesPackageSets.cudaPackages_12_0.cudaFlags.data.supportedGpus.*.maxCudaVersion","text":"<p>The maximum (exclusive) CUDA version that supports this GPU. null means there is no maximum.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_0cudaflagsdatasupportedgpusmincudaversion","title":"cudaPackagesPackageSets.cudaPackages_12_0.cudaFlags.data.supportedGpus.*.minCudaVersion","text":"<p>The minimum (inclusive) CUDA version that supports this GPU.</p> <p>Type: A version number with a major and minor component.</p> <p>Example: <code>\"10.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_0cudaflagsdatavirtualarches","title":"cudaPackagesPackageSets.cudaPackages_12_0.cudaFlags.data.virtualArches","text":"<p>The virtual architectures to build for. These are typically used for forward compatibility, when trying to support an architecture newer than the CUDA version allows.</p> <p>Type: list of A virtual CUDA architecture name.</p> <p>Default:</p> <pre><code>[\n  \"compute_89\"\n]\n</code></pre> <p>Example:</p> <pre><code>[\n  \"compute_75\"\n  \"compute_86\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_0cudaflagsutilsarchmapper","title":"cudaPackagesPackageSets.cudaPackages_12_0.cudaFlags.utils.archMapper","text":"<p>Maps a feature across a list of compute capabilities to produce a list of architectures.</p> <p>For example, \u201csm\u201d and [ \u201c8.0\u201d \u201c8.6\u201d \u201c8.7\u201d ] yield [ \u201csm_80\u201d \u201csm_86\u201d \u201csm_87\u201d ].</p> <p>Type: function that evaluates to a(n) function that evaluates to a(n) list of string</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_0cudaflagsutilsdropdot","title":"cudaPackagesPackageSets.cudaPackages_12_0.cudaFlags.utils.dropDot","text":"<p>Drops dots from a string.</p> <p>Type: function that evaluates to a(n) string</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_0cudaflagsutilsgencodemapper","title":"cudaPackagesPackageSets.cudaPackages_12_0.cudaFlags.utils.gencodeMapper","text":"<p>Maps a feature across a list of compute capabilities to produce a list of gencode arguments.</p> <p>For example, \u201csm\u201d and [ \u201c8.0\u201d \u201c8.6\u201d \u201c8.7\u201d ] yield [ \u201c-gencode=arch=compute_80,code=sm_80\u201d \u201c-gencode=arch=compute_86,code=sm_86\u201d \u201c-gencode=arch=compute_87,code=sm_87\u201d ].</p> <p>Type: function that evaluates to a(n) function that evaluates to a(n) list of string</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_0cudaflagsutilsgetnixsystem","title":"cudaPackagesPackageSets.cudaPackages_12_0.cudaFlags.utils.getNixSystem","text":"<p>Maps NVIDIA redist arch to Nix system.</p> <p>NOTE: This function will be called by unsupported systems because <code>cudaPackages</code> is part of <code>all-packages.nix</code>, which is evaluated on all systems. As such, we need to handle unsupported systems gracefully.</p> <p>Type: function that evaluates to a(n) (one of \u201cunsupported\u201d, \u201caaarch64-linux\u201d, \u201cx86_64-linux\u201d, \u201cppc64le-linux\u201d, \u201cx86_64-windows\u201d)</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_0cudaflagsutilsgetredistarch","title":"cudaPackagesPackageSets.cudaPackages_12_0.cudaFlags.utils.getRedistArch","text":"<p>Maps Nix system to NVIDIA redist arch.</p> <p>NOTE: We swap out the default <code>linux-sbsa</code> redist (for server-grade ARM chips) with the <code>linux-aarch64</code> redist (which is for Jetson devices) if we\u2019re building any Jetson devices. Since both are based on aarch64, we can only have one or the other, otherwise there\u2019s an ambiguity as to which should be used.</p> <p>NOTE: This function will be called by unsupported systems because <code>cudaPackages</code> is part of <code>all-packages.nix</code>, which is evaluated on all systems. As such, we need to handle unsupported systems gracefully.</p> <p>Type: function that evaluates to a(n) (one of \u201cunsupported\u201d, \u201clinux-aarch64\u201d, \u201clinux-sbsa\u201d, \u201clinux-x86_64\u201d, \u201clinux-ppc64le\u201d, \u201cwindows-x86_64\u201d)</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_0cudaflagsutilsisdefault","title":"cudaPackagesPackageSets.cudaPackages_12_0.cudaFlags.utils.isDefault","text":"<p>Whether a GPU is included in the default capabilities</p> <p>Type: function that evaluates to a(n) boolean</p> <p>Default: <code>&lt;function, args: {dontDefaultAfter, isJetson}&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_0cudaflagsutilsissupported","title":"cudaPackagesPackageSets.cudaPackages_12_0.cudaFlags.utils.isSupported","text":"<p>Whether a CUDA version supports a given GPU</p> <p>Type: function that evaluates to a(n) boolean</p> <p>Default: <code>&lt;function, args: {maxCudaVersion, minCudaVersion}&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_0cudamajorminorversion","title":"cudaPackagesPackageSets.cudaPackages_12_0.cudaMajorMinorVersion","text":"<p>The major and minor version of the CUDA package set</p> <p>Type: string</p> <p>Default: <code>\"12.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_0cudamajorversion","title":"cudaPackagesPackageSets.cudaPackages_12_0.cudaMajorVersion","text":"<p>The major version of the CUDA package set</p> <p>Type: string</p> <p>Default: <code>\"12\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_0cudanewer","title":"cudaPackagesPackageSets.cudaPackages_12_0.cudaNewer","text":"<p>A utility to check if the CUDA version is newer than a given version</p> <p>Type: function that evaluates to a(n) boolean</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_0cudaolder","title":"cudaPackagesPackageSets.cudaPackages_12_0.cudaOlder","text":"<p>A utility to check if the CUDA version is older than a given version</p> <p>Type: function that evaluates to a(n) boolean</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_0cudaversion","title":"cudaPackagesPackageSets.cudaPackages_12_0.cudaVersion","text":"<p>The CUDA version of the package set</p> <p>Type: A version number with a major and minor component.</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_1","title":"cudaPackagesPackageSets.cudaPackages_12_1","text":"<p>A CUDA package set for a particular version of CUDA</p> <p>Type: submodule</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules</p>"},{"location":"#cudapackagespackagesetscudapackages_12_1cudaatleast","title":"cudaPackagesPackageSets.cudaPackages_12_1.cudaAtLeast","text":"<p>A utility to check if the CUDA version is at least a given version</p> <p>Type: function that evaluates to a(n) boolean</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_1cudaatmost","title":"cudaPackagesPackageSets.cudaPackages_12_1.cudaAtMost","text":"<p>A utility to check if the CUDA version is at most a given version</p> <p>Type: function that evaluates to a(n) boolean</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_1cudaflagsdataarchnames","title":"cudaPackagesPackageSets.cudaPackages_12_1.cudaFlags.data.archNames","text":"<p>The names of the architectures to build for</p> <p>Type: list of string</p> <p>Default:</p> <pre><code>[\n  \"Ada\"\n]\n</code></pre> <p>Example:</p> <pre><code>[\n  \"Turing\"\n  \"Ampere\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_1cudaflagsdataarches","title":"cudaPackagesPackageSets.cudaPackages_12_1.cudaFlags.data.arches","text":"<p>The architectures to build for. Includes a virtual architecture if forward compatibility is enabled.</p> <p>Type: list of (A real/physical CUDA architecture name. or A virtual CUDA architecture name.)</p> <p>Default:</p> <pre><code>[\n  \"sm_89\"\n]\n</code></pre> <p>Example:</p> <pre><code>[\n  \"sm_75\"\n  \"sm_86\"\n  \"compute_86\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_1cudaflagsdatacudacapabilities","title":"cudaPackagesPackageSets.cudaPackages_12_1.cudaFlags.data.cudaCapabilities","text":"<p>CUDA capabilities (hardware generations) to build for</p> <p>Type: list of A CUDA capability version.</p> <p>Default:</p> <pre><code>[\n  \"8.9\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_1cudaflagsdatacudaforwardcompat","title":"cudaPackagesPackageSets.cudaPackages_12_1.cudaFlags.data.cudaForwardCompat","text":"<p>Build with forward compatibility gencode (+PTX) to support future GPU generations</p> <p>Type: boolean</p> <p>Default: <code>false</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_1cudaflagsdatacudagpus","title":"cudaPackagesPackageSets.cudaPackages_12_1.cudaFlags.data.cudaGpus","text":"<p>CUDA GPUs to build for</p> <p>Type: list of (submodule)</p> <p>Default:</p> <pre><code>[\n  {\n    archName = \"Ada\";\n    computeCapability = \"8.9\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"11.8\";\n  }\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_1cudaflagsdatacudagpusarchname","title":"cudaPackagesPackageSets.cudaPackages_12_1.cudaFlags.data.cudaGpus.*.archName","text":"<p>Name of the microarchitecture</p> <p>Type: A CUDA architecture name, like Ampere or Ada.</p> <p>Example: <code>\"Kepler\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_1cudaflagsdatacudagpuscomputecapability","title":"cudaPackagesPackageSets.cudaPackages_12_1.cudaFlags.data.cudaGpus.*.computeCapability","text":"<p>Compute capability of the GPU</p> <p>Type: A CUDA capability version.</p> <p>Example: <code>\"3.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_1cudaflagsdatacudagpusdontdefaultafter","title":"cudaPackagesPackageSets.cudaPackages_12_1.cudaFlags.data.cudaGpus.*.dontDefaultAfter","text":"<p>The CUDA version after which to exclude this GPU from the list of default capabilities we build. null means we always include this GPU in the default capabilities if it is supported.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_1cudaflagsdatacudagpusisjetson","title":"cudaPackagesPackageSets.cudaPackages_12_1.cudaFlags.data.cudaGpus.*.isJetson","text":"<p>Whether a GPU is part of NVIDIA\u2019s line of Jetson embedded computers.</p> <p>This field is notable because it tells us what architecture to build for (as Jetson devices are aarch64). More on Jetson devices here: https://www.nvidia.com/en-us/autonomous-machines/embedded-systems/</p> <p>NOTE: These architectures are only built upon request.</p> <p>Type: one of true, false</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_1cudaflagsdatacudagpusmaxcudaversion","title":"cudaPackagesPackageSets.cudaPackages_12_1.cudaFlags.data.cudaGpus.*.maxCudaVersion","text":"<p>The maximum (exclusive) CUDA version that supports this GPU. null means there is no maximum.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_1cudaflagsdatacudagpusmincudaversion","title":"cudaPackagesPackageSets.cudaPackages_12_1.cudaFlags.data.cudaGpus.*.minCudaVersion","text":"<p>The minimum (inclusive) CUDA version that supports this GPU.</p> <p>Type: A version number with a major and minor component.</p> <p>Example: <code>\"10.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_1cudaflagsdatacudajetsongpus","title":"cudaPackagesPackageSets.cudaPackages_12_1.cudaFlags.data.cudaJetsonGpus","text":"<p>CUDA GPUs to build for, including only Jetson devices</p> <p>Type: list of (submodule)</p> <p>Default: <code>[ ]</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_1cudaflagsdatacudajetsongpusarchname","title":"cudaPackagesPackageSets.cudaPackages_12_1.cudaFlags.data.cudaJetsonGpus.*.archName","text":"<p>Name of the microarchitecture</p> <p>Type: A CUDA architecture name, like Ampere or Ada.</p> <p>Example: <code>\"Kepler\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_1cudaflagsdatacudajetsongpuscomputecapability","title":"cudaPackagesPackageSets.cudaPackages_12_1.cudaFlags.data.cudaJetsonGpus.*.computeCapability","text":"<p>Compute capability of the GPU</p> <p>Type: A CUDA capability version.</p> <p>Example: <code>\"3.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_1cudaflagsdatacudajetsongpusdontdefaultafter","title":"cudaPackagesPackageSets.cudaPackages_12_1.cudaFlags.data.cudaJetsonGpus.*.dontDefaultAfter","text":"<p>The CUDA version after which to exclude this GPU from the list of default capabilities we build. null means we always include this GPU in the default capabilities if it is supported.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_1cudaflagsdatacudajetsongpusisjetson","title":"cudaPackagesPackageSets.cudaPackages_12_1.cudaFlags.data.cudaJetsonGpus.*.isJetson","text":"<p>Whether a GPU is part of NVIDIA\u2019s line of Jetson embedded computers.</p> <p>This field is notable because it tells us what architecture to build for (as Jetson devices are aarch64). More on Jetson devices here: https://www.nvidia.com/en-us/autonomous-machines/embedded-systems/</p> <p>NOTE: These architectures are only built upon request.</p> <p>Type: one of true, false</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_1cudaflagsdatacudajetsongpusmaxcudaversion","title":"cudaPackagesPackageSets.cudaPackages_12_1.cudaFlags.data.cudaJetsonGpus.*.maxCudaVersion","text":"<p>The maximum (exclusive) CUDA version that supports this GPU. null means there is no maximum.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_1cudaflagsdatacudajetsongpusmincudaversion","title":"cudaPackagesPackageSets.cudaPackages_12_1.cudaFlags.data.cudaJetsonGpus.*.minCudaVersion","text":"<p>The minimum (inclusive) CUDA version that supports this GPU.</p> <p>Type: A version number with a major and minor component.</p> <p>Example: <code>\"10.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_1cudaflagsdatacudanonjetsongpus","title":"cudaPackagesPackageSets.cudaPackages_12_1.cudaFlags.data.cudaNonJetsonGpus","text":"<p>CUDA GPUs to build for, excluding Jetson devices</p> <p>Type: list of (submodule)</p> <p>Default:</p> <pre><code>[\n  {\n    archName = \"Ada\";\n    computeCapability = \"8.9\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"11.8\";\n  }\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_1cudaflagsdatacudanonjetsongpusarchname","title":"cudaPackagesPackageSets.cudaPackages_12_1.cudaFlags.data.cudaNonJetsonGpus.*.archName","text":"<p>Name of the microarchitecture</p> <p>Type: A CUDA architecture name, like Ampere or Ada.</p> <p>Example: <code>\"Kepler\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_1cudaflagsdatacudanonjetsongpuscomputecapability","title":"cudaPackagesPackageSets.cudaPackages_12_1.cudaFlags.data.cudaNonJetsonGpus.*.computeCapability","text":"<p>Compute capability of the GPU</p> <p>Type: A CUDA capability version.</p> <p>Example: <code>\"3.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_1cudaflagsdatacudanonjetsongpusdontdefaultafter","title":"cudaPackagesPackageSets.cudaPackages_12_1.cudaFlags.data.cudaNonJetsonGpus.*.dontDefaultAfter","text":"<p>The CUDA version after which to exclude this GPU from the list of default capabilities we build. null means we always include this GPU in the default capabilities if it is supported.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_1cudaflagsdatacudanonjetsongpusisjetson","title":"cudaPackagesPackageSets.cudaPackages_12_1.cudaFlags.data.cudaNonJetsonGpus.*.isJetson","text":"<p>Whether a GPU is part of NVIDIA\u2019s line of Jetson embedded computers.</p> <p>This field is notable because it tells us what architecture to build for (as Jetson devices are aarch64). More on Jetson devices here: https://www.nvidia.com/en-us/autonomous-machines/embedded-systems/</p> <p>NOTE: These architectures are only built upon request.</p> <p>Type: one of false, true</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_1cudaflagsdatacudanonjetsongpusmaxcudaversion","title":"cudaPackagesPackageSets.cudaPackages_12_1.cudaFlags.data.cudaNonJetsonGpus.*.maxCudaVersion","text":"<p>The maximum (exclusive) CUDA version that supports this GPU. null means there is no maximum.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_1cudaflagsdatacudanonjetsongpusmincudaversion","title":"cudaPackagesPackageSets.cudaPackages_12_1.cudaFlags.data.cudaNonJetsonGpus.*.minCudaVersion","text":"<p>The minimum (inclusive) CUDA version that supports this GPU.</p> <p>Type: A version number with a major and minor component.</p> <p>Example: <code>\"10.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_1cudaflagsdatacudasupport","title":"cudaPackagesPackageSets.cudaPackages_12_1.cudaFlags.data.cudaSupport","text":"<p>Build packages with CUDA support</p> <p>Type: boolean</p> <p>Default: <code>true</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_1cudaflagsdatadefaultcapabilities","title":"cudaPackagesPackageSets.cudaPackages_12_1.cudaFlags.data.defaultCapabilities","text":"<p>The default compute capabilities for a given CUDA version</p> <p>Type: list of A CUDA capability version.</p> <p>Default:</p> <pre><code>[\n  \"6.0\"\n  \"6.1\"\n  \"7.0\"\n  \"7.5\"\n  \"8.0\"\n  \"8.6\"\n  \"8.9\"\n  \"9.0\"\n  \"9.0a\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_1cudaflagsdatadefaultgpus","title":"cudaPackagesPackageSets.cudaPackages_12_1.cudaFlags.data.defaultGpus","text":"<p>The default GPUs for a given CUDA version</p> <p>Type: list of (submodule)</p> <p>Default:</p> <pre><code>[\n  {\n    archName = \"Pascal\";\n    computeCapability = \"6.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Pascal\";\n    computeCapability = \"6.1\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Volta\";\n    computeCapability = \"7.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Turing\";\n    computeCapability = \"7.5\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Ampere\";\n    computeCapability = \"8.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"11.2\";\n  }\n  {\n    archName = \"Ampere\";\n    computeCapability = \"8.6\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"11.2\";\n  }\n  {\n    archName = \"Ada\";\n    computeCapability = \"8.9\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"11.8\";\n  }\n  {\n    archName = \"Hopper\";\n    computeCapability = \"9.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"11.8\";\n  }\n  {\n    archName = \"Hopper\";\n    computeCapability = \"9.0a\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"12.0\";\n  }\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_1cudaflagsdatadefaultgpusarchname","title":"cudaPackagesPackageSets.cudaPackages_12_1.cudaFlags.data.defaultGpus.*.archName","text":"<p>Name of the microarchitecture</p> <p>Type: A CUDA architecture name, like Ampere or Ada.</p> <p>Example: <code>\"Kepler\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_1cudaflagsdatadefaultgpuscomputecapability","title":"cudaPackagesPackageSets.cudaPackages_12_1.cudaFlags.data.defaultGpus.*.computeCapability","text":"<p>Compute capability of the GPU</p> <p>Type: A CUDA capability version.</p> <p>Example: <code>\"3.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_1cudaflagsdatadefaultgpusdontdefaultafter","title":"cudaPackagesPackageSets.cudaPackages_12_1.cudaFlags.data.defaultGpus.*.dontDefaultAfter","text":"<p>The CUDA version after which to exclude this GPU from the list of default capabilities we build. null means we always include this GPU in the default capabilities if it is supported.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_1cudaflagsdatadefaultgpusisjetson","title":"cudaPackagesPackageSets.cudaPackages_12_1.cudaFlags.data.defaultGpus.*.isJetson","text":"<p>Whether a GPU is part of NVIDIA\u2019s line of Jetson embedded computers.</p> <p>This field is notable because it tells us what architecture to build for (as Jetson devices are aarch64). More on Jetson devices here: https://www.nvidia.com/en-us/autonomous-machines/embedded-systems/</p> <p>NOTE: These architectures are only built upon request.</p> <p>Type: one of true, false</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_1cudaflagsdatadefaultgpusmaxcudaversion","title":"cudaPackagesPackageSets.cudaPackages_12_1.cudaFlags.data.defaultGpus.*.maxCudaVersion","text":"<p>The maximum (exclusive) CUDA version that supports this GPU. null means there is no maximum.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_1cudaflagsdatadefaultgpusmincudaversion","title":"cudaPackagesPackageSets.cudaPackages_12_1.cudaFlags.data.defaultGpus.*.minCudaVersion","text":"<p>The minimum (inclusive) CUDA version that supports this GPU.</p> <p>Type: A version number with a major and minor component.</p> <p>Example: <code>\"10.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_1cudaflagsdatagencodeargs","title":"cudaPackagesPackageSets.cudaPackages_12_1.cudaFlags.data.gencodeArgs","text":"<p>The gencode arguments to pass to NVCC</p> <p>Type: list of A `gencode` argument for the `nvcc` compiler.</p> <p>Default:</p> <pre><code>[\n  \"-gencode=arch=compute_89,code=sm_89\"\n]\n</code></pre> <p>Example:</p> <pre><code>[\n  \"-gencode=arch=compute_75,code=sm_75\"\n  \"-gencode=arch=compute_86,code=sm_86\"\n  \"-gencode=arch=compute_86,code=compute_86\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_1cudaflagsdatagencodestring","title":"cudaPackagesPackageSets.cudaPackages_12_1.cudaFlags.data.gencodeString","text":"<p>A space-separated string of CUDA gencode arguments to pass to NVCC</p> <p>Type: string</p> <p>Default: <code>\"-gencode=arch=compute_89,code=sm_89\"</code></p> <p>Example: <code>\"-gencode=arch=compute_75,code=sm_75 ... -gencode=arch=compute_86,code=compute_86\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_1cudaflagsdataisjetsonbuild","title":"cudaPackagesPackageSets.cudaPackages_12_1.cudaFlags.data.isJetsonBuild","text":"<p>Whether the build is for a Jetson device.</p> <p>Jetson devices cannot be targeted by the same binaries which target non-Jetson devices. While NVIDIA provides both <code>linux-aarch64</code> and <code>linux-sbsa</code> packages, which both target <code>aarch64</code>, they are built with different settings and cannot be mixed.</p> <p>Type: boolean</p> <p>Default: <code>false</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_1cudaflagsdatarealarches","title":"cudaPackagesPackageSets.cudaPackages_12_1.cudaFlags.data.realArches","text":"<p>The physical architectures to build for</p> <p>Type: list of A real/physical CUDA architecture name.</p> <p>Default:</p> <pre><code>[\n  \"sm_89\"\n]\n</code></pre> <p>Example:</p> <pre><code>[\n  \"sm_75\"\n  \"sm_86\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_1cudaflagsdatasupportedcapabilities","title":"cudaPackagesPackageSets.cudaPackages_12_1.cudaFlags.data.supportedCapabilities","text":"<p>The compute capabilities supported by a given CUDA version</p> <p>Type: list of A CUDA capability version.</p> <p>Default:</p> <pre><code>[\n  \"5.0\"\n  \"5.2\"\n  \"5.3\"\n  \"6.0\"\n  \"6.1\"\n  \"6.2\"\n  \"7.0\"\n  \"7.2\"\n  \"7.5\"\n  \"8.0\"\n  \"8.6\"\n  \"8.7\"\n  \"8.9\"\n  \"9.0\"\n  \"9.0a\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_1cudaflagsdatasupportedgpus","title":"cudaPackagesPackageSets.cudaPackages_12_1.cudaFlags.data.supportedGpus","text":"<p>The GPUs supported by a given CUDA version</p> <p>Type: list of (submodule)</p> <p>Default:</p> <pre><code>[\n  {\n    archName = \"Maxwell\";\n    computeCapability = \"5.0\";\n    dontDefaultAfter = \"11.0\";\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Maxwell\";\n    computeCapability = \"5.2\";\n    dontDefaultAfter = \"11.0\";\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Maxwell\";\n    computeCapability = \"5.3\";\n    dontDefaultAfter = null;\n    isJetson = true;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Pascal\";\n    computeCapability = \"6.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Pascal\";\n    computeCapability = \"6.1\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Pascal\";\n    computeCapability = \"6.2\";\n    dontDefaultAfter = null;\n    isJetson = true;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Volta\";\n    computeCapability = \"7.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Volta\";\n    computeCapability = \"7.2\";\n    dontDefaultAfter = null;\n    isJetson = true;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Turing\";\n    computeCapability = \"7.5\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Ampere\";\n    computeCapability = \"8.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"11.2\";\n  }\n  {\n    archName = \"Ampere\";\n    computeCapability = \"8.6\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"11.2\";\n  }\n  {\n    archName = \"Ampere\";\n    computeCapability = \"8.7\";\n    dontDefaultAfter = null;\n    isJetson = true;\n    maxCudaVersion = null;\n    minCudaVersion = \"11.5\";\n  }\n  {\n    archName = \"Ada\";\n    computeCapability = \"8.9\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"11.8\";\n  }\n  {\n    archName = \"Hopper\";\n    computeCapability = \"9.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"11.8\";\n  }\n  {\n    archName = \"Hopper\";\n    computeCapability = \"9.0a\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"12.0\";\n  }\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_1cudaflagsdatasupportedgpusarchname","title":"cudaPackagesPackageSets.cudaPackages_12_1.cudaFlags.data.supportedGpus.*.archName","text":"<p>Name of the microarchitecture</p> <p>Type: A CUDA architecture name, like Ampere or Ada.</p> <p>Example: <code>\"Kepler\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_1cudaflagsdatasupportedgpuscomputecapability","title":"cudaPackagesPackageSets.cudaPackages_12_1.cudaFlags.data.supportedGpus.*.computeCapability","text":"<p>Compute capability of the GPU</p> <p>Type: A CUDA capability version.</p> <p>Example: <code>\"3.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_1cudaflagsdatasupportedgpusdontdefaultafter","title":"cudaPackagesPackageSets.cudaPackages_12_1.cudaFlags.data.supportedGpus.*.dontDefaultAfter","text":"<p>The CUDA version after which to exclude this GPU from the list of default capabilities we build. null means we always include this GPU in the default capabilities if it is supported.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_1cudaflagsdatasupportedgpusisjetson","title":"cudaPackagesPackageSets.cudaPackages_12_1.cudaFlags.data.supportedGpus.*.isJetson","text":"<p>Whether a GPU is part of NVIDIA\u2019s line of Jetson embedded computers.</p> <p>This field is notable because it tells us what architecture to build for (as Jetson devices are aarch64). More on Jetson devices here: https://www.nvidia.com/en-us/autonomous-machines/embedded-systems/</p> <p>NOTE: These architectures are only built upon request.</p> <p>Type: one of true, false</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_1cudaflagsdatasupportedgpusmaxcudaversion","title":"cudaPackagesPackageSets.cudaPackages_12_1.cudaFlags.data.supportedGpus.*.maxCudaVersion","text":"<p>The maximum (exclusive) CUDA version that supports this GPU. null means there is no maximum.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_1cudaflagsdatasupportedgpusmincudaversion","title":"cudaPackagesPackageSets.cudaPackages_12_1.cudaFlags.data.supportedGpus.*.minCudaVersion","text":"<p>The minimum (inclusive) CUDA version that supports this GPU.</p> <p>Type: A version number with a major and minor component.</p> <p>Example: <code>\"10.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_1cudaflagsdatavirtualarches","title":"cudaPackagesPackageSets.cudaPackages_12_1.cudaFlags.data.virtualArches","text":"<p>The virtual architectures to build for. These are typically used for forward compatibility, when trying to support an architecture newer than the CUDA version allows.</p> <p>Type: list of A virtual CUDA architecture name.</p> <p>Default:</p> <pre><code>[\n  \"compute_89\"\n]\n</code></pre> <p>Example:</p> <pre><code>[\n  \"compute_75\"\n  \"compute_86\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_1cudaflagsutilsarchmapper","title":"cudaPackagesPackageSets.cudaPackages_12_1.cudaFlags.utils.archMapper","text":"<p>Maps a feature across a list of compute capabilities to produce a list of architectures.</p> <p>For example, \u201csm\u201d and [ \u201c8.0\u201d \u201c8.6\u201d \u201c8.7\u201d ] yield [ \u201csm_80\u201d \u201csm_86\u201d \u201csm_87\u201d ].</p> <p>Type: function that evaluates to a(n) function that evaluates to a(n) list of string</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_1cudaflagsutilsdropdot","title":"cudaPackagesPackageSets.cudaPackages_12_1.cudaFlags.utils.dropDot","text":"<p>Drops dots from a string.</p> <p>Type: function that evaluates to a(n) string</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_1cudaflagsutilsgencodemapper","title":"cudaPackagesPackageSets.cudaPackages_12_1.cudaFlags.utils.gencodeMapper","text":"<p>Maps a feature across a list of compute capabilities to produce a list of gencode arguments.</p> <p>For example, \u201csm\u201d and [ \u201c8.0\u201d \u201c8.6\u201d \u201c8.7\u201d ] yield [ \u201c-gencode=arch=compute_80,code=sm_80\u201d \u201c-gencode=arch=compute_86,code=sm_86\u201d \u201c-gencode=arch=compute_87,code=sm_87\u201d ].</p> <p>Type: function that evaluates to a(n) function that evaluates to a(n) list of string</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_1cudaflagsutilsgetnixsystem","title":"cudaPackagesPackageSets.cudaPackages_12_1.cudaFlags.utils.getNixSystem","text":"<p>Maps NVIDIA redist arch to Nix system.</p> <p>NOTE: This function will be called by unsupported systems because <code>cudaPackages</code> is part of <code>all-packages.nix</code>, which is evaluated on all systems. As such, we need to handle unsupported systems gracefully.</p> <p>Type: function that evaluates to a(n) (one of \u201cunsupported\u201d, \u201caaarch64-linux\u201d, \u201cx86_64-linux\u201d, \u201cppc64le-linux\u201d, \u201cx86_64-windows\u201d)</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_1cudaflagsutilsgetredistarch","title":"cudaPackagesPackageSets.cudaPackages_12_1.cudaFlags.utils.getRedistArch","text":"<p>Maps Nix system to NVIDIA redist arch.</p> <p>NOTE: We swap out the default <code>linux-sbsa</code> redist (for server-grade ARM chips) with the <code>linux-aarch64</code> redist (which is for Jetson devices) if we\u2019re building any Jetson devices. Since both are based on aarch64, we can only have one or the other, otherwise there\u2019s an ambiguity as to which should be used.</p> <p>NOTE: This function will be called by unsupported systems because <code>cudaPackages</code> is part of <code>all-packages.nix</code>, which is evaluated on all systems. As such, we need to handle unsupported systems gracefully.</p> <p>Type: function that evaluates to a(n) (one of \u201cunsupported\u201d, \u201clinux-aarch64\u201d, \u201clinux-sbsa\u201d, \u201clinux-x86_64\u201d, \u201clinux-ppc64le\u201d, \u201cwindows-x86_64\u201d)</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_1cudaflagsutilsisdefault","title":"cudaPackagesPackageSets.cudaPackages_12_1.cudaFlags.utils.isDefault","text":"<p>Whether a GPU is included in the default capabilities</p> <p>Type: function that evaluates to a(n) boolean</p> <p>Default: <code>&lt;function, args: {dontDefaultAfter, isJetson}&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_1cudaflagsutilsissupported","title":"cudaPackagesPackageSets.cudaPackages_12_1.cudaFlags.utils.isSupported","text":"<p>Whether a CUDA version supports a given GPU</p> <p>Type: function that evaluates to a(n) boolean</p> <p>Default: <code>&lt;function, args: {maxCudaVersion, minCudaVersion}&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_1cudamajorminorversion","title":"cudaPackagesPackageSets.cudaPackages_12_1.cudaMajorMinorVersion","text":"<p>The major and minor version of the CUDA package set</p> <p>Type: string</p> <p>Default: <code>\"12.1\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_1cudamajorversion","title":"cudaPackagesPackageSets.cudaPackages_12_1.cudaMajorVersion","text":"<p>The major version of the CUDA package set</p> <p>Type: string</p> <p>Default: <code>\"12\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_1cudanewer","title":"cudaPackagesPackageSets.cudaPackages_12_1.cudaNewer","text":"<p>A utility to check if the CUDA version is newer than a given version</p> <p>Type: function that evaluates to a(n) boolean</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_1cudaolder","title":"cudaPackagesPackageSets.cudaPackages_12_1.cudaOlder","text":"<p>A utility to check if the CUDA version is older than a given version</p> <p>Type: function that evaluates to a(n) boolean</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_1cudaversion","title":"cudaPackagesPackageSets.cudaPackages_12_1.cudaVersion","text":"<p>The CUDA version of the package set</p> <p>Type: A version number with a major and minor component.</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_2","title":"cudaPackagesPackageSets.cudaPackages_12_2","text":"<p>A CUDA package set for a particular version of CUDA</p> <p>Type: submodule</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules</p>"},{"location":"#cudapackagespackagesetscudapackages_12_2cudaatleast","title":"cudaPackagesPackageSets.cudaPackages_12_2.cudaAtLeast","text":"<p>A utility to check if the CUDA version is at least a given version</p> <p>Type: function that evaluates to a(n) boolean</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_2cudaatmost","title":"cudaPackagesPackageSets.cudaPackages_12_2.cudaAtMost","text":"<p>A utility to check if the CUDA version is at most a given version</p> <p>Type: function that evaluates to a(n) boolean</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_2cudaflagsdataarchnames","title":"cudaPackagesPackageSets.cudaPackages_12_2.cudaFlags.data.archNames","text":"<p>The names of the architectures to build for</p> <p>Type: list of string</p> <p>Default:</p> <pre><code>[\n  \"Ada\"\n]\n</code></pre> <p>Example:</p> <pre><code>[\n  \"Turing\"\n  \"Ampere\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_2cudaflagsdataarches","title":"cudaPackagesPackageSets.cudaPackages_12_2.cudaFlags.data.arches","text":"<p>The architectures to build for. Includes a virtual architecture if forward compatibility is enabled.</p> <p>Type: list of (A real/physical CUDA architecture name. or A virtual CUDA architecture name.)</p> <p>Default:</p> <pre><code>[\n  \"sm_89\"\n]\n</code></pre> <p>Example:</p> <pre><code>[\n  \"sm_75\"\n  \"sm_86\"\n  \"compute_86\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_2cudaflagsdatacudacapabilities","title":"cudaPackagesPackageSets.cudaPackages_12_2.cudaFlags.data.cudaCapabilities","text":"<p>CUDA capabilities (hardware generations) to build for</p> <p>Type: list of A CUDA capability version.</p> <p>Default:</p> <pre><code>[\n  \"8.9\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_2cudaflagsdatacudaforwardcompat","title":"cudaPackagesPackageSets.cudaPackages_12_2.cudaFlags.data.cudaForwardCompat","text":"<p>Build with forward compatibility gencode (+PTX) to support future GPU generations</p> <p>Type: boolean</p> <p>Default: <code>false</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_2cudaflagsdatacudagpus","title":"cudaPackagesPackageSets.cudaPackages_12_2.cudaFlags.data.cudaGpus","text":"<p>CUDA GPUs to build for</p> <p>Type: list of (submodule)</p> <p>Default:</p> <pre><code>[\n  {\n    archName = \"Ada\";\n    computeCapability = \"8.9\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"11.8\";\n  }\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_2cudaflagsdatacudagpusarchname","title":"cudaPackagesPackageSets.cudaPackages_12_2.cudaFlags.data.cudaGpus.*.archName","text":"<p>Name of the microarchitecture</p> <p>Type: A CUDA architecture name, like Ampere or Ada.</p> <p>Example: <code>\"Kepler\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_2cudaflagsdatacudagpuscomputecapability","title":"cudaPackagesPackageSets.cudaPackages_12_2.cudaFlags.data.cudaGpus.*.computeCapability","text":"<p>Compute capability of the GPU</p> <p>Type: A CUDA capability version.</p> <p>Example: <code>\"3.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_2cudaflagsdatacudagpusdontdefaultafter","title":"cudaPackagesPackageSets.cudaPackages_12_2.cudaFlags.data.cudaGpus.*.dontDefaultAfter","text":"<p>The CUDA version after which to exclude this GPU from the list of default capabilities we build. null means we always include this GPU in the default capabilities if it is supported.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_2cudaflagsdatacudagpusisjetson","title":"cudaPackagesPackageSets.cudaPackages_12_2.cudaFlags.data.cudaGpus.*.isJetson","text":"<p>Whether a GPU is part of NVIDIA\u2019s line of Jetson embedded computers.</p> <p>This field is notable because it tells us what architecture to build for (as Jetson devices are aarch64). More on Jetson devices here: https://www.nvidia.com/en-us/autonomous-machines/embedded-systems/</p> <p>NOTE: These architectures are only built upon request.</p> <p>Type: one of true, false</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_2cudaflagsdatacudagpusmaxcudaversion","title":"cudaPackagesPackageSets.cudaPackages_12_2.cudaFlags.data.cudaGpus.*.maxCudaVersion","text":"<p>The maximum (exclusive) CUDA version that supports this GPU. null means there is no maximum.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_2cudaflagsdatacudagpusmincudaversion","title":"cudaPackagesPackageSets.cudaPackages_12_2.cudaFlags.data.cudaGpus.*.minCudaVersion","text":"<p>The minimum (inclusive) CUDA version that supports this GPU.</p> <p>Type: A version number with a major and minor component.</p> <p>Example: <code>\"10.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_2cudaflagsdatacudajetsongpus","title":"cudaPackagesPackageSets.cudaPackages_12_2.cudaFlags.data.cudaJetsonGpus","text":"<p>CUDA GPUs to build for, including only Jetson devices</p> <p>Type: list of (submodule)</p> <p>Default: <code>[ ]</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_2cudaflagsdatacudajetsongpusarchname","title":"cudaPackagesPackageSets.cudaPackages_12_2.cudaFlags.data.cudaJetsonGpus.*.archName","text":"<p>Name of the microarchitecture</p> <p>Type: A CUDA architecture name, like Ampere or Ada.</p> <p>Example: <code>\"Kepler\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_2cudaflagsdatacudajetsongpuscomputecapability","title":"cudaPackagesPackageSets.cudaPackages_12_2.cudaFlags.data.cudaJetsonGpus.*.computeCapability","text":"<p>Compute capability of the GPU</p> <p>Type: A CUDA capability version.</p> <p>Example: <code>\"3.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_2cudaflagsdatacudajetsongpusdontdefaultafter","title":"cudaPackagesPackageSets.cudaPackages_12_2.cudaFlags.data.cudaJetsonGpus.*.dontDefaultAfter","text":"<p>The CUDA version after which to exclude this GPU from the list of default capabilities we build. null means we always include this GPU in the default capabilities if it is supported.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_2cudaflagsdatacudajetsongpusisjetson","title":"cudaPackagesPackageSets.cudaPackages_12_2.cudaFlags.data.cudaJetsonGpus.*.isJetson","text":"<p>Whether a GPU is part of NVIDIA\u2019s line of Jetson embedded computers.</p> <p>This field is notable because it tells us what architecture to build for (as Jetson devices are aarch64). More on Jetson devices here: https://www.nvidia.com/en-us/autonomous-machines/embedded-systems/</p> <p>NOTE: These architectures are only built upon request.</p> <p>Type: one of true, false</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_2cudaflagsdatacudajetsongpusmaxcudaversion","title":"cudaPackagesPackageSets.cudaPackages_12_2.cudaFlags.data.cudaJetsonGpus.*.maxCudaVersion","text":"<p>The maximum (exclusive) CUDA version that supports this GPU. null means there is no maximum.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_2cudaflagsdatacudajetsongpusmincudaversion","title":"cudaPackagesPackageSets.cudaPackages_12_2.cudaFlags.data.cudaJetsonGpus.*.minCudaVersion","text":"<p>The minimum (inclusive) CUDA version that supports this GPU.</p> <p>Type: A version number with a major and minor component.</p> <p>Example: <code>\"10.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_2cudaflagsdatacudanonjetsongpus","title":"cudaPackagesPackageSets.cudaPackages_12_2.cudaFlags.data.cudaNonJetsonGpus","text":"<p>CUDA GPUs to build for, excluding Jetson devices</p> <p>Type: list of (submodule)</p> <p>Default:</p> <pre><code>[\n  {\n    archName = \"Ada\";\n    computeCapability = \"8.9\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"11.8\";\n  }\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_2cudaflagsdatacudanonjetsongpusarchname","title":"cudaPackagesPackageSets.cudaPackages_12_2.cudaFlags.data.cudaNonJetsonGpus.*.archName","text":"<p>Name of the microarchitecture</p> <p>Type: A CUDA architecture name, like Ampere or Ada.</p> <p>Example: <code>\"Kepler\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_2cudaflagsdatacudanonjetsongpuscomputecapability","title":"cudaPackagesPackageSets.cudaPackages_12_2.cudaFlags.data.cudaNonJetsonGpus.*.computeCapability","text":"<p>Compute capability of the GPU</p> <p>Type: A CUDA capability version.</p> <p>Example: <code>\"3.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_2cudaflagsdatacudanonjetsongpusdontdefaultafter","title":"cudaPackagesPackageSets.cudaPackages_12_2.cudaFlags.data.cudaNonJetsonGpus.*.dontDefaultAfter","text":"<p>The CUDA version after which to exclude this GPU from the list of default capabilities we build. null means we always include this GPU in the default capabilities if it is supported.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_2cudaflagsdatacudanonjetsongpusisjetson","title":"cudaPackagesPackageSets.cudaPackages_12_2.cudaFlags.data.cudaNonJetsonGpus.*.isJetson","text":"<p>Whether a GPU is part of NVIDIA\u2019s line of Jetson embedded computers.</p> <p>This field is notable because it tells us what architecture to build for (as Jetson devices are aarch64). More on Jetson devices here: https://www.nvidia.com/en-us/autonomous-machines/embedded-systems/</p> <p>NOTE: These architectures are only built upon request.</p> <p>Type: one of false, true</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_2cudaflagsdatacudanonjetsongpusmaxcudaversion","title":"cudaPackagesPackageSets.cudaPackages_12_2.cudaFlags.data.cudaNonJetsonGpus.*.maxCudaVersion","text":"<p>The maximum (exclusive) CUDA version that supports this GPU. null means there is no maximum.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_2cudaflagsdatacudanonjetsongpusmincudaversion","title":"cudaPackagesPackageSets.cudaPackages_12_2.cudaFlags.data.cudaNonJetsonGpus.*.minCudaVersion","text":"<p>The minimum (inclusive) CUDA version that supports this GPU.</p> <p>Type: A version number with a major and minor component.</p> <p>Example: <code>\"10.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_2cudaflagsdatacudasupport","title":"cudaPackagesPackageSets.cudaPackages_12_2.cudaFlags.data.cudaSupport","text":"<p>Build packages with CUDA support</p> <p>Type: boolean</p> <p>Default: <code>true</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_2cudaflagsdatadefaultcapabilities","title":"cudaPackagesPackageSets.cudaPackages_12_2.cudaFlags.data.defaultCapabilities","text":"<p>The default compute capabilities for a given CUDA version</p> <p>Type: list of A CUDA capability version.</p> <p>Default:</p> <pre><code>[\n  \"6.0\"\n  \"6.1\"\n  \"7.0\"\n  \"7.5\"\n  \"8.0\"\n  \"8.6\"\n  \"8.9\"\n  \"9.0\"\n  \"9.0a\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_2cudaflagsdatadefaultgpus","title":"cudaPackagesPackageSets.cudaPackages_12_2.cudaFlags.data.defaultGpus","text":"<p>The default GPUs for a given CUDA version</p> <p>Type: list of (submodule)</p> <p>Default:</p> <pre><code>[\n  {\n    archName = \"Pascal\";\n    computeCapability = \"6.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Pascal\";\n    computeCapability = \"6.1\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Volta\";\n    computeCapability = \"7.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Turing\";\n    computeCapability = \"7.5\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Ampere\";\n    computeCapability = \"8.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"11.2\";\n  }\n  {\n    archName = \"Ampere\";\n    computeCapability = \"8.6\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"11.2\";\n  }\n  {\n    archName = \"Ada\";\n    computeCapability = \"8.9\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"11.8\";\n  }\n  {\n    archName = \"Hopper\";\n    computeCapability = \"9.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"11.8\";\n  }\n  {\n    archName = \"Hopper\";\n    computeCapability = \"9.0a\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"12.0\";\n  }\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_2cudaflagsdatadefaultgpusarchname","title":"cudaPackagesPackageSets.cudaPackages_12_2.cudaFlags.data.defaultGpus.*.archName","text":"<p>Name of the microarchitecture</p> <p>Type: A CUDA architecture name, like Ampere or Ada.</p> <p>Example: <code>\"Kepler\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_2cudaflagsdatadefaultgpuscomputecapability","title":"cudaPackagesPackageSets.cudaPackages_12_2.cudaFlags.data.defaultGpus.*.computeCapability","text":"<p>Compute capability of the GPU</p> <p>Type: A CUDA capability version.</p> <p>Example: <code>\"3.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_2cudaflagsdatadefaultgpusdontdefaultafter","title":"cudaPackagesPackageSets.cudaPackages_12_2.cudaFlags.data.defaultGpus.*.dontDefaultAfter","text":"<p>The CUDA version after which to exclude this GPU from the list of default capabilities we build. null means we always include this GPU in the default capabilities if it is supported.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_2cudaflagsdatadefaultgpusisjetson","title":"cudaPackagesPackageSets.cudaPackages_12_2.cudaFlags.data.defaultGpus.*.isJetson","text":"<p>Whether a GPU is part of NVIDIA\u2019s line of Jetson embedded computers.</p> <p>This field is notable because it tells us what architecture to build for (as Jetson devices are aarch64). More on Jetson devices here: https://www.nvidia.com/en-us/autonomous-machines/embedded-systems/</p> <p>NOTE: These architectures are only built upon request.</p> <p>Type: one of true, false</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_2cudaflagsdatadefaultgpusmaxcudaversion","title":"cudaPackagesPackageSets.cudaPackages_12_2.cudaFlags.data.defaultGpus.*.maxCudaVersion","text":"<p>The maximum (exclusive) CUDA version that supports this GPU. null means there is no maximum.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_2cudaflagsdatadefaultgpusmincudaversion","title":"cudaPackagesPackageSets.cudaPackages_12_2.cudaFlags.data.defaultGpus.*.minCudaVersion","text":"<p>The minimum (inclusive) CUDA version that supports this GPU.</p> <p>Type: A version number with a major and minor component.</p> <p>Example: <code>\"10.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_2cudaflagsdatagencodeargs","title":"cudaPackagesPackageSets.cudaPackages_12_2.cudaFlags.data.gencodeArgs","text":"<p>The gencode arguments to pass to NVCC</p> <p>Type: list of A `gencode` argument for the `nvcc` compiler.</p> <p>Default:</p> <pre><code>[\n  \"-gencode=arch=compute_89,code=sm_89\"\n]\n</code></pre> <p>Example:</p> <pre><code>[\n  \"-gencode=arch=compute_75,code=sm_75\"\n  \"-gencode=arch=compute_86,code=sm_86\"\n  \"-gencode=arch=compute_86,code=compute_86\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_2cudaflagsdatagencodestring","title":"cudaPackagesPackageSets.cudaPackages_12_2.cudaFlags.data.gencodeString","text":"<p>A space-separated string of CUDA gencode arguments to pass to NVCC</p> <p>Type: string</p> <p>Default: <code>\"-gencode=arch=compute_89,code=sm_89\"</code></p> <p>Example: <code>\"-gencode=arch=compute_75,code=sm_75 ... -gencode=arch=compute_86,code=compute_86\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_2cudaflagsdataisjetsonbuild","title":"cudaPackagesPackageSets.cudaPackages_12_2.cudaFlags.data.isJetsonBuild","text":"<p>Whether the build is for a Jetson device.</p> <p>Jetson devices cannot be targeted by the same binaries which target non-Jetson devices. While NVIDIA provides both <code>linux-aarch64</code> and <code>linux-sbsa</code> packages, which both target <code>aarch64</code>, they are built with different settings and cannot be mixed.</p> <p>Type: boolean</p> <p>Default: <code>false</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_2cudaflagsdatarealarches","title":"cudaPackagesPackageSets.cudaPackages_12_2.cudaFlags.data.realArches","text":"<p>The physical architectures to build for</p> <p>Type: list of A real/physical CUDA architecture name.</p> <p>Default:</p> <pre><code>[\n  \"sm_89\"\n]\n</code></pre> <p>Example:</p> <pre><code>[\n  \"sm_75\"\n  \"sm_86\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_2cudaflagsdatasupportedcapabilities","title":"cudaPackagesPackageSets.cudaPackages_12_2.cudaFlags.data.supportedCapabilities","text":"<p>The compute capabilities supported by a given CUDA version</p> <p>Type: list of A CUDA capability version.</p> <p>Default:</p> <pre><code>[\n  \"5.0\"\n  \"5.2\"\n  \"5.3\"\n  \"6.0\"\n  \"6.1\"\n  \"6.2\"\n  \"7.0\"\n  \"7.2\"\n  \"7.5\"\n  \"8.0\"\n  \"8.6\"\n  \"8.7\"\n  \"8.9\"\n  \"9.0\"\n  \"9.0a\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_2cudaflagsdatasupportedgpus","title":"cudaPackagesPackageSets.cudaPackages_12_2.cudaFlags.data.supportedGpus","text":"<p>The GPUs supported by a given CUDA version</p> <p>Type: list of (submodule)</p> <p>Default:</p> <pre><code>[\n  {\n    archName = \"Maxwell\";\n    computeCapability = \"5.0\";\n    dontDefaultAfter = \"11.0\";\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Maxwell\";\n    computeCapability = \"5.2\";\n    dontDefaultAfter = \"11.0\";\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Maxwell\";\n    computeCapability = \"5.3\";\n    dontDefaultAfter = null;\n    isJetson = true;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Pascal\";\n    computeCapability = \"6.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Pascal\";\n    computeCapability = \"6.1\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Pascal\";\n    computeCapability = \"6.2\";\n    dontDefaultAfter = null;\n    isJetson = true;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Volta\";\n    computeCapability = \"7.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Volta\";\n    computeCapability = \"7.2\";\n    dontDefaultAfter = null;\n    isJetson = true;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Turing\";\n    computeCapability = \"7.5\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Ampere\";\n    computeCapability = \"8.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"11.2\";\n  }\n  {\n    archName = \"Ampere\";\n    computeCapability = \"8.6\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"11.2\";\n  }\n  {\n    archName = \"Ampere\";\n    computeCapability = \"8.7\";\n    dontDefaultAfter = null;\n    isJetson = true;\n    maxCudaVersion = null;\n    minCudaVersion = \"11.5\";\n  }\n  {\n    archName = \"Ada\";\n    computeCapability = \"8.9\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"11.8\";\n  }\n  {\n    archName = \"Hopper\";\n    computeCapability = \"9.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"11.8\";\n  }\n  {\n    archName = \"Hopper\";\n    computeCapability = \"9.0a\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"12.0\";\n  }\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_2cudaflagsdatasupportedgpusarchname","title":"cudaPackagesPackageSets.cudaPackages_12_2.cudaFlags.data.supportedGpus.*.archName","text":"<p>Name of the microarchitecture</p> <p>Type: A CUDA architecture name, like Ampere or Ada.</p> <p>Example: <code>\"Kepler\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_2cudaflagsdatasupportedgpuscomputecapability","title":"cudaPackagesPackageSets.cudaPackages_12_2.cudaFlags.data.supportedGpus.*.computeCapability","text":"<p>Compute capability of the GPU</p> <p>Type: A CUDA capability version.</p> <p>Example: <code>\"3.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_2cudaflagsdatasupportedgpusdontdefaultafter","title":"cudaPackagesPackageSets.cudaPackages_12_2.cudaFlags.data.supportedGpus.*.dontDefaultAfter","text":"<p>The CUDA version after which to exclude this GPU from the list of default capabilities we build. null means we always include this GPU in the default capabilities if it is supported.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_2cudaflagsdatasupportedgpusisjetson","title":"cudaPackagesPackageSets.cudaPackages_12_2.cudaFlags.data.supportedGpus.*.isJetson","text":"<p>Whether a GPU is part of NVIDIA\u2019s line of Jetson embedded computers.</p> <p>This field is notable because it tells us what architecture to build for (as Jetson devices are aarch64). More on Jetson devices here: https://www.nvidia.com/en-us/autonomous-machines/embedded-systems/</p> <p>NOTE: These architectures are only built upon request.</p> <p>Type: one of true, false</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_2cudaflagsdatasupportedgpusmaxcudaversion","title":"cudaPackagesPackageSets.cudaPackages_12_2.cudaFlags.data.supportedGpus.*.maxCudaVersion","text":"<p>The maximum (exclusive) CUDA version that supports this GPU. null means there is no maximum.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_2cudaflagsdatasupportedgpusmincudaversion","title":"cudaPackagesPackageSets.cudaPackages_12_2.cudaFlags.data.supportedGpus.*.minCudaVersion","text":"<p>The minimum (inclusive) CUDA version that supports this GPU.</p> <p>Type: A version number with a major and minor component.</p> <p>Example: <code>\"10.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_2cudaflagsdatavirtualarches","title":"cudaPackagesPackageSets.cudaPackages_12_2.cudaFlags.data.virtualArches","text":"<p>The virtual architectures to build for. These are typically used for forward compatibility, when trying to support an architecture newer than the CUDA version allows.</p> <p>Type: list of A virtual CUDA architecture name.</p> <p>Default:</p> <pre><code>[\n  \"compute_89\"\n]\n</code></pre> <p>Example:</p> <pre><code>[\n  \"compute_75\"\n  \"compute_86\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_2cudaflagsutilsarchmapper","title":"cudaPackagesPackageSets.cudaPackages_12_2.cudaFlags.utils.archMapper","text":"<p>Maps a feature across a list of compute capabilities to produce a list of architectures.</p> <p>For example, \u201csm\u201d and [ \u201c8.0\u201d \u201c8.6\u201d \u201c8.7\u201d ] yield [ \u201csm_80\u201d \u201csm_86\u201d \u201csm_87\u201d ].</p> <p>Type: function that evaluates to a(n) function that evaluates to a(n) list of string</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_2cudaflagsutilsdropdot","title":"cudaPackagesPackageSets.cudaPackages_12_2.cudaFlags.utils.dropDot","text":"<p>Drops dots from a string.</p> <p>Type: function that evaluates to a(n) string</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_2cudaflagsutilsgencodemapper","title":"cudaPackagesPackageSets.cudaPackages_12_2.cudaFlags.utils.gencodeMapper","text":"<p>Maps a feature across a list of compute capabilities to produce a list of gencode arguments.</p> <p>For example, \u201csm\u201d and [ \u201c8.0\u201d \u201c8.6\u201d \u201c8.7\u201d ] yield [ \u201c-gencode=arch=compute_80,code=sm_80\u201d \u201c-gencode=arch=compute_86,code=sm_86\u201d \u201c-gencode=arch=compute_87,code=sm_87\u201d ].</p> <p>Type: function that evaluates to a(n) function that evaluates to a(n) list of string</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_2cudaflagsutilsgetnixsystem","title":"cudaPackagesPackageSets.cudaPackages_12_2.cudaFlags.utils.getNixSystem","text":"<p>Maps NVIDIA redist arch to Nix system.</p> <p>NOTE: This function will be called by unsupported systems because <code>cudaPackages</code> is part of <code>all-packages.nix</code>, which is evaluated on all systems. As such, we need to handle unsupported systems gracefully.</p> <p>Type: function that evaluates to a(n) (one of \u201cunsupported\u201d, \u201caaarch64-linux\u201d, \u201cx86_64-linux\u201d, \u201cppc64le-linux\u201d, \u201cx86_64-windows\u201d)</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_2cudaflagsutilsgetredistarch","title":"cudaPackagesPackageSets.cudaPackages_12_2.cudaFlags.utils.getRedistArch","text":"<p>Maps Nix system to NVIDIA redist arch.</p> <p>NOTE: We swap out the default <code>linux-sbsa</code> redist (for server-grade ARM chips) with the <code>linux-aarch64</code> redist (which is for Jetson devices) if we\u2019re building any Jetson devices. Since both are based on aarch64, we can only have one or the other, otherwise there\u2019s an ambiguity as to which should be used.</p> <p>NOTE: This function will be called by unsupported systems because <code>cudaPackages</code> is part of <code>all-packages.nix</code>, which is evaluated on all systems. As such, we need to handle unsupported systems gracefully.</p> <p>Type: function that evaluates to a(n) (one of \u201cunsupported\u201d, \u201clinux-aarch64\u201d, \u201clinux-sbsa\u201d, \u201clinux-x86_64\u201d, \u201clinux-ppc64le\u201d, \u201cwindows-x86_64\u201d)</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_2cudaflagsutilsisdefault","title":"cudaPackagesPackageSets.cudaPackages_12_2.cudaFlags.utils.isDefault","text":"<p>Whether a GPU is included in the default capabilities</p> <p>Type: function that evaluates to a(n) boolean</p> <p>Default: <code>&lt;function, args: {dontDefaultAfter, isJetson}&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_2cudaflagsutilsissupported","title":"cudaPackagesPackageSets.cudaPackages_12_2.cudaFlags.utils.isSupported","text":"<p>Whether a CUDA version supports a given GPU</p> <p>Type: function that evaluates to a(n) boolean</p> <p>Default: <code>&lt;function, args: {maxCudaVersion, minCudaVersion}&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_2cudamajorminorversion","title":"cudaPackagesPackageSets.cudaPackages_12_2.cudaMajorMinorVersion","text":"<p>The major and minor version of the CUDA package set</p> <p>Type: string</p> <p>Default: <code>\"12.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_2cudamajorversion","title":"cudaPackagesPackageSets.cudaPackages_12_2.cudaMajorVersion","text":"<p>The major version of the CUDA package set</p> <p>Type: string</p> <p>Default: <code>\"12\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_2cudanewer","title":"cudaPackagesPackageSets.cudaPackages_12_2.cudaNewer","text":"<p>A utility to check if the CUDA version is newer than a given version</p> <p>Type: function that evaluates to a(n) boolean</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_2cudaolder","title":"cudaPackagesPackageSets.cudaPackages_12_2.cudaOlder","text":"<p>A utility to check if the CUDA version is older than a given version</p> <p>Type: function that evaluates to a(n) boolean</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_2cudaversion","title":"cudaPackagesPackageSets.cudaPackages_12_2.cudaVersion","text":"<p>The CUDA version of the package set</p> <p>Type: A version number with a major and minor component.</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_3","title":"cudaPackagesPackageSets.cudaPackages_12_3","text":"<p>A CUDA package set for a particular version of CUDA</p> <p>Type: submodule</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules</p>"},{"location":"#cudapackagespackagesetscudapackages_12_3cudaatleast","title":"cudaPackagesPackageSets.cudaPackages_12_3.cudaAtLeast","text":"<p>A utility to check if the CUDA version is at least a given version</p> <p>Type: function that evaluates to a(n) boolean</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_3cudaatmost","title":"cudaPackagesPackageSets.cudaPackages_12_3.cudaAtMost","text":"<p>A utility to check if the CUDA version is at most a given version</p> <p>Type: function that evaluates to a(n) boolean</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_3cudaflagsdataarchnames","title":"cudaPackagesPackageSets.cudaPackages_12_3.cudaFlags.data.archNames","text":"<p>The names of the architectures to build for</p> <p>Type: list of string</p> <p>Default:</p> <pre><code>[\n  \"Ada\"\n]\n</code></pre> <p>Example:</p> <pre><code>[\n  \"Turing\"\n  \"Ampere\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_3cudaflagsdataarches","title":"cudaPackagesPackageSets.cudaPackages_12_3.cudaFlags.data.arches","text":"<p>The architectures to build for. Includes a virtual architecture if forward compatibility is enabled.</p> <p>Type: list of (A real/physical CUDA architecture name. or A virtual CUDA architecture name.)</p> <p>Default:</p> <pre><code>[\n  \"sm_89\"\n]\n</code></pre> <p>Example:</p> <pre><code>[\n  \"sm_75\"\n  \"sm_86\"\n  \"compute_86\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_3cudaflagsdatacudacapabilities","title":"cudaPackagesPackageSets.cudaPackages_12_3.cudaFlags.data.cudaCapabilities","text":"<p>CUDA capabilities (hardware generations) to build for</p> <p>Type: list of A CUDA capability version.</p> <p>Default:</p> <pre><code>[\n  \"8.9\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_3cudaflagsdatacudaforwardcompat","title":"cudaPackagesPackageSets.cudaPackages_12_3.cudaFlags.data.cudaForwardCompat","text":"<p>Build with forward compatibility gencode (+PTX) to support future GPU generations</p> <p>Type: boolean</p> <p>Default: <code>false</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_3cudaflagsdatacudagpus","title":"cudaPackagesPackageSets.cudaPackages_12_3.cudaFlags.data.cudaGpus","text":"<p>CUDA GPUs to build for</p> <p>Type: list of (submodule)</p> <p>Default:</p> <pre><code>[\n  {\n    archName = \"Ada\";\n    computeCapability = \"8.9\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"11.8\";\n  }\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_3cudaflagsdatacudagpusarchname","title":"cudaPackagesPackageSets.cudaPackages_12_3.cudaFlags.data.cudaGpus.*.archName","text":"<p>Name of the microarchitecture</p> <p>Type: A CUDA architecture name, like Ampere or Ada.</p> <p>Example: <code>\"Kepler\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_3cudaflagsdatacudagpuscomputecapability","title":"cudaPackagesPackageSets.cudaPackages_12_3.cudaFlags.data.cudaGpus.*.computeCapability","text":"<p>Compute capability of the GPU</p> <p>Type: A CUDA capability version.</p> <p>Example: <code>\"3.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_3cudaflagsdatacudagpusdontdefaultafter","title":"cudaPackagesPackageSets.cudaPackages_12_3.cudaFlags.data.cudaGpus.*.dontDefaultAfter","text":"<p>The CUDA version after which to exclude this GPU from the list of default capabilities we build. null means we always include this GPU in the default capabilities if it is supported.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_3cudaflagsdatacudagpusisjetson","title":"cudaPackagesPackageSets.cudaPackages_12_3.cudaFlags.data.cudaGpus.*.isJetson","text":"<p>Whether a GPU is part of NVIDIA\u2019s line of Jetson embedded computers.</p> <p>This field is notable because it tells us what architecture to build for (as Jetson devices are aarch64). More on Jetson devices here: https://www.nvidia.com/en-us/autonomous-machines/embedded-systems/</p> <p>NOTE: These architectures are only built upon request.</p> <p>Type: one of true, false</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_3cudaflagsdatacudagpusmaxcudaversion","title":"cudaPackagesPackageSets.cudaPackages_12_3.cudaFlags.data.cudaGpus.*.maxCudaVersion","text":"<p>The maximum (exclusive) CUDA version that supports this GPU. null means there is no maximum.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_3cudaflagsdatacudagpusmincudaversion","title":"cudaPackagesPackageSets.cudaPackages_12_3.cudaFlags.data.cudaGpus.*.minCudaVersion","text":"<p>The minimum (inclusive) CUDA version that supports this GPU.</p> <p>Type: A version number with a major and minor component.</p> <p>Example: <code>\"10.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_3cudaflagsdatacudajetsongpus","title":"cudaPackagesPackageSets.cudaPackages_12_3.cudaFlags.data.cudaJetsonGpus","text":"<p>CUDA GPUs to build for, including only Jetson devices</p> <p>Type: list of (submodule)</p> <p>Default: <code>[ ]</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_3cudaflagsdatacudajetsongpusarchname","title":"cudaPackagesPackageSets.cudaPackages_12_3.cudaFlags.data.cudaJetsonGpus.*.archName","text":"<p>Name of the microarchitecture</p> <p>Type: A CUDA architecture name, like Ampere or Ada.</p> <p>Example: <code>\"Kepler\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_3cudaflagsdatacudajetsongpuscomputecapability","title":"cudaPackagesPackageSets.cudaPackages_12_3.cudaFlags.data.cudaJetsonGpus.*.computeCapability","text":"<p>Compute capability of the GPU</p> <p>Type: A CUDA capability version.</p> <p>Example: <code>\"3.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_3cudaflagsdatacudajetsongpusdontdefaultafter","title":"cudaPackagesPackageSets.cudaPackages_12_3.cudaFlags.data.cudaJetsonGpus.*.dontDefaultAfter","text":"<p>The CUDA version after which to exclude this GPU from the list of default capabilities we build. null means we always include this GPU in the default capabilities if it is supported.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_3cudaflagsdatacudajetsongpusisjetson","title":"cudaPackagesPackageSets.cudaPackages_12_3.cudaFlags.data.cudaJetsonGpus.*.isJetson","text":"<p>Whether a GPU is part of NVIDIA\u2019s line of Jetson embedded computers.</p> <p>This field is notable because it tells us what architecture to build for (as Jetson devices are aarch64). More on Jetson devices here: https://www.nvidia.com/en-us/autonomous-machines/embedded-systems/</p> <p>NOTE: These architectures are only built upon request.</p> <p>Type: one of true, false</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_3cudaflagsdatacudajetsongpusmaxcudaversion","title":"cudaPackagesPackageSets.cudaPackages_12_3.cudaFlags.data.cudaJetsonGpus.*.maxCudaVersion","text":"<p>The maximum (exclusive) CUDA version that supports this GPU. null means there is no maximum.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_3cudaflagsdatacudajetsongpusmincudaversion","title":"cudaPackagesPackageSets.cudaPackages_12_3.cudaFlags.data.cudaJetsonGpus.*.minCudaVersion","text":"<p>The minimum (inclusive) CUDA version that supports this GPU.</p> <p>Type: A version number with a major and minor component.</p> <p>Example: <code>\"10.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_3cudaflagsdatacudanonjetsongpus","title":"cudaPackagesPackageSets.cudaPackages_12_3.cudaFlags.data.cudaNonJetsonGpus","text":"<p>CUDA GPUs to build for, excluding Jetson devices</p> <p>Type: list of (submodule)</p> <p>Default:</p> <pre><code>[\n  {\n    archName = \"Ada\";\n    computeCapability = \"8.9\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"11.8\";\n  }\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_3cudaflagsdatacudanonjetsongpusarchname","title":"cudaPackagesPackageSets.cudaPackages_12_3.cudaFlags.data.cudaNonJetsonGpus.*.archName","text":"<p>Name of the microarchitecture</p> <p>Type: A CUDA architecture name, like Ampere or Ada.</p> <p>Example: <code>\"Kepler\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_3cudaflagsdatacudanonjetsongpuscomputecapability","title":"cudaPackagesPackageSets.cudaPackages_12_3.cudaFlags.data.cudaNonJetsonGpus.*.computeCapability","text":"<p>Compute capability of the GPU</p> <p>Type: A CUDA capability version.</p> <p>Example: <code>\"3.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_3cudaflagsdatacudanonjetsongpusdontdefaultafter","title":"cudaPackagesPackageSets.cudaPackages_12_3.cudaFlags.data.cudaNonJetsonGpus.*.dontDefaultAfter","text":"<p>The CUDA version after which to exclude this GPU from the list of default capabilities we build. null means we always include this GPU in the default capabilities if it is supported.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_3cudaflagsdatacudanonjetsongpusisjetson","title":"cudaPackagesPackageSets.cudaPackages_12_3.cudaFlags.data.cudaNonJetsonGpus.*.isJetson","text":"<p>Whether a GPU is part of NVIDIA\u2019s line of Jetson embedded computers.</p> <p>This field is notable because it tells us what architecture to build for (as Jetson devices are aarch64). More on Jetson devices here: https://www.nvidia.com/en-us/autonomous-machines/embedded-systems/</p> <p>NOTE: These architectures are only built upon request.</p> <p>Type: one of false, true</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_3cudaflagsdatacudanonjetsongpusmaxcudaversion","title":"cudaPackagesPackageSets.cudaPackages_12_3.cudaFlags.data.cudaNonJetsonGpus.*.maxCudaVersion","text":"<p>The maximum (exclusive) CUDA version that supports this GPU. null means there is no maximum.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_3cudaflagsdatacudanonjetsongpusmincudaversion","title":"cudaPackagesPackageSets.cudaPackages_12_3.cudaFlags.data.cudaNonJetsonGpus.*.minCudaVersion","text":"<p>The minimum (inclusive) CUDA version that supports this GPU.</p> <p>Type: A version number with a major and minor component.</p> <p>Example: <code>\"10.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_3cudaflagsdatacudasupport","title":"cudaPackagesPackageSets.cudaPackages_12_3.cudaFlags.data.cudaSupport","text":"<p>Build packages with CUDA support</p> <p>Type: boolean</p> <p>Default: <code>true</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_3cudaflagsdatadefaultcapabilities","title":"cudaPackagesPackageSets.cudaPackages_12_3.cudaFlags.data.defaultCapabilities","text":"<p>The default compute capabilities for a given CUDA version</p> <p>Type: list of A CUDA capability version.</p> <p>Default:</p> <pre><code>[\n  \"6.0\"\n  \"6.1\"\n  \"7.0\"\n  \"7.5\"\n  \"8.0\"\n  \"8.6\"\n  \"8.9\"\n  \"9.0\"\n  \"9.0a\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_3cudaflagsdatadefaultgpus","title":"cudaPackagesPackageSets.cudaPackages_12_3.cudaFlags.data.defaultGpus","text":"<p>The default GPUs for a given CUDA version</p> <p>Type: list of (submodule)</p> <p>Default:</p> <pre><code>[\n  {\n    archName = \"Pascal\";\n    computeCapability = \"6.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Pascal\";\n    computeCapability = \"6.1\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Volta\";\n    computeCapability = \"7.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Turing\";\n    computeCapability = \"7.5\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Ampere\";\n    computeCapability = \"8.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"11.2\";\n  }\n  {\n    archName = \"Ampere\";\n    computeCapability = \"8.6\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"11.2\";\n  }\n  {\n    archName = \"Ada\";\n    computeCapability = \"8.9\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"11.8\";\n  }\n  {\n    archName = \"Hopper\";\n    computeCapability = \"9.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"11.8\";\n  }\n  {\n    archName = \"Hopper\";\n    computeCapability = \"9.0a\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"12.0\";\n  }\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_3cudaflagsdatadefaultgpusarchname","title":"cudaPackagesPackageSets.cudaPackages_12_3.cudaFlags.data.defaultGpus.*.archName","text":"<p>Name of the microarchitecture</p> <p>Type: A CUDA architecture name, like Ampere or Ada.</p> <p>Example: <code>\"Kepler\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_3cudaflagsdatadefaultgpuscomputecapability","title":"cudaPackagesPackageSets.cudaPackages_12_3.cudaFlags.data.defaultGpus.*.computeCapability","text":"<p>Compute capability of the GPU</p> <p>Type: A CUDA capability version.</p> <p>Example: <code>\"3.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_3cudaflagsdatadefaultgpusdontdefaultafter","title":"cudaPackagesPackageSets.cudaPackages_12_3.cudaFlags.data.defaultGpus.*.dontDefaultAfter","text":"<p>The CUDA version after which to exclude this GPU from the list of default capabilities we build. null means we always include this GPU in the default capabilities if it is supported.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_3cudaflagsdatadefaultgpusisjetson","title":"cudaPackagesPackageSets.cudaPackages_12_3.cudaFlags.data.defaultGpus.*.isJetson","text":"<p>Whether a GPU is part of NVIDIA\u2019s line of Jetson embedded computers.</p> <p>This field is notable because it tells us what architecture to build for (as Jetson devices are aarch64). More on Jetson devices here: https://www.nvidia.com/en-us/autonomous-machines/embedded-systems/</p> <p>NOTE: These architectures are only built upon request.</p> <p>Type: one of true, false</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_3cudaflagsdatadefaultgpusmaxcudaversion","title":"cudaPackagesPackageSets.cudaPackages_12_3.cudaFlags.data.defaultGpus.*.maxCudaVersion","text":"<p>The maximum (exclusive) CUDA version that supports this GPU. null means there is no maximum.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_3cudaflagsdatadefaultgpusmincudaversion","title":"cudaPackagesPackageSets.cudaPackages_12_3.cudaFlags.data.defaultGpus.*.minCudaVersion","text":"<p>The minimum (inclusive) CUDA version that supports this GPU.</p> <p>Type: A version number with a major and minor component.</p> <p>Example: <code>\"10.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_3cudaflagsdatagencodeargs","title":"cudaPackagesPackageSets.cudaPackages_12_3.cudaFlags.data.gencodeArgs","text":"<p>The gencode arguments to pass to NVCC</p> <p>Type: list of A `gencode` argument for the `nvcc` compiler.</p> <p>Default:</p> <pre><code>[\n  \"-gencode=arch=compute_89,code=sm_89\"\n]\n</code></pre> <p>Example:</p> <pre><code>[\n  \"-gencode=arch=compute_75,code=sm_75\"\n  \"-gencode=arch=compute_86,code=sm_86\"\n  \"-gencode=arch=compute_86,code=compute_86\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_3cudaflagsdatagencodestring","title":"cudaPackagesPackageSets.cudaPackages_12_3.cudaFlags.data.gencodeString","text":"<p>A space-separated string of CUDA gencode arguments to pass to NVCC</p> <p>Type: string</p> <p>Default: <code>\"-gencode=arch=compute_89,code=sm_89\"</code></p> <p>Example: <code>\"-gencode=arch=compute_75,code=sm_75 ... -gencode=arch=compute_86,code=compute_86\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_3cudaflagsdataisjetsonbuild","title":"cudaPackagesPackageSets.cudaPackages_12_3.cudaFlags.data.isJetsonBuild","text":"<p>Whether the build is for a Jetson device.</p> <p>Jetson devices cannot be targeted by the same binaries which target non-Jetson devices. While NVIDIA provides both <code>linux-aarch64</code> and <code>linux-sbsa</code> packages, which both target <code>aarch64</code>, they are built with different settings and cannot be mixed.</p> <p>Type: boolean</p> <p>Default: <code>false</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_3cudaflagsdatarealarches","title":"cudaPackagesPackageSets.cudaPackages_12_3.cudaFlags.data.realArches","text":"<p>The physical architectures to build for</p> <p>Type: list of A real/physical CUDA architecture name.</p> <p>Default:</p> <pre><code>[\n  \"sm_89\"\n]\n</code></pre> <p>Example:</p> <pre><code>[\n  \"sm_75\"\n  \"sm_86\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_3cudaflagsdatasupportedcapabilities","title":"cudaPackagesPackageSets.cudaPackages_12_3.cudaFlags.data.supportedCapabilities","text":"<p>The compute capabilities supported by a given CUDA version</p> <p>Type: list of A CUDA capability version.</p> <p>Default:</p> <pre><code>[\n  \"5.0\"\n  \"5.2\"\n  \"5.3\"\n  \"6.0\"\n  \"6.1\"\n  \"6.2\"\n  \"7.0\"\n  \"7.2\"\n  \"7.5\"\n  \"8.0\"\n  \"8.6\"\n  \"8.7\"\n  \"8.9\"\n  \"9.0\"\n  \"9.0a\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_3cudaflagsdatasupportedgpus","title":"cudaPackagesPackageSets.cudaPackages_12_3.cudaFlags.data.supportedGpus","text":"<p>The GPUs supported by a given CUDA version</p> <p>Type: list of (submodule)</p> <p>Default:</p> <pre><code>[\n  {\n    archName = \"Maxwell\";\n    computeCapability = \"5.0\";\n    dontDefaultAfter = \"11.0\";\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Maxwell\";\n    computeCapability = \"5.2\";\n    dontDefaultAfter = \"11.0\";\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Maxwell\";\n    computeCapability = \"5.3\";\n    dontDefaultAfter = null;\n    isJetson = true;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Pascal\";\n    computeCapability = \"6.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Pascal\";\n    computeCapability = \"6.1\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Pascal\";\n    computeCapability = \"6.2\";\n    dontDefaultAfter = null;\n    isJetson = true;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Volta\";\n    computeCapability = \"7.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Volta\";\n    computeCapability = \"7.2\";\n    dontDefaultAfter = null;\n    isJetson = true;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Turing\";\n    computeCapability = \"7.5\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Ampere\";\n    computeCapability = \"8.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"11.2\";\n  }\n  {\n    archName = \"Ampere\";\n    computeCapability = \"8.6\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"11.2\";\n  }\n  {\n    archName = \"Ampere\";\n    computeCapability = \"8.7\";\n    dontDefaultAfter = null;\n    isJetson = true;\n    maxCudaVersion = null;\n    minCudaVersion = \"11.5\";\n  }\n  {\n    archName = \"Ada\";\n    computeCapability = \"8.9\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"11.8\";\n  }\n  {\n    archName = \"Hopper\";\n    computeCapability = \"9.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"11.8\";\n  }\n  {\n    archName = \"Hopper\";\n    computeCapability = \"9.0a\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"12.0\";\n  }\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_3cudaflagsdatasupportedgpusarchname","title":"cudaPackagesPackageSets.cudaPackages_12_3.cudaFlags.data.supportedGpus.*.archName","text":"<p>Name of the microarchitecture</p> <p>Type: A CUDA architecture name, like Ampere or Ada.</p> <p>Example: <code>\"Kepler\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_3cudaflagsdatasupportedgpuscomputecapability","title":"cudaPackagesPackageSets.cudaPackages_12_3.cudaFlags.data.supportedGpus.*.computeCapability","text":"<p>Compute capability of the GPU</p> <p>Type: A CUDA capability version.</p> <p>Example: <code>\"3.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_3cudaflagsdatasupportedgpusdontdefaultafter","title":"cudaPackagesPackageSets.cudaPackages_12_3.cudaFlags.data.supportedGpus.*.dontDefaultAfter","text":"<p>The CUDA version after which to exclude this GPU from the list of default capabilities we build. null means we always include this GPU in the default capabilities if it is supported.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_3cudaflagsdatasupportedgpusisjetson","title":"cudaPackagesPackageSets.cudaPackages_12_3.cudaFlags.data.supportedGpus.*.isJetson","text":"<p>Whether a GPU is part of NVIDIA\u2019s line of Jetson embedded computers.</p> <p>This field is notable because it tells us what architecture to build for (as Jetson devices are aarch64). More on Jetson devices here: https://www.nvidia.com/en-us/autonomous-machines/embedded-systems/</p> <p>NOTE: These architectures are only built upon request.</p> <p>Type: one of true, false</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_3cudaflagsdatasupportedgpusmaxcudaversion","title":"cudaPackagesPackageSets.cudaPackages_12_3.cudaFlags.data.supportedGpus.*.maxCudaVersion","text":"<p>The maximum (exclusive) CUDA version that supports this GPU. null means there is no maximum.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_3cudaflagsdatasupportedgpusmincudaversion","title":"cudaPackagesPackageSets.cudaPackages_12_3.cudaFlags.data.supportedGpus.*.minCudaVersion","text":"<p>The minimum (inclusive) CUDA version that supports this GPU.</p> <p>Type: A version number with a major and minor component.</p> <p>Example: <code>\"10.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_3cudaflagsdatavirtualarches","title":"cudaPackagesPackageSets.cudaPackages_12_3.cudaFlags.data.virtualArches","text":"<p>The virtual architectures to build for. These are typically used for forward compatibility, when trying to support an architecture newer than the CUDA version allows.</p> <p>Type: list of A virtual CUDA architecture name.</p> <p>Default:</p> <pre><code>[\n  \"compute_89\"\n]\n</code></pre> <p>Example:</p> <pre><code>[\n  \"compute_75\"\n  \"compute_86\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_3cudaflagsutilsarchmapper","title":"cudaPackagesPackageSets.cudaPackages_12_3.cudaFlags.utils.archMapper","text":"<p>Maps a feature across a list of compute capabilities to produce a list of architectures.</p> <p>For example, \u201csm\u201d and [ \u201c8.0\u201d \u201c8.6\u201d \u201c8.7\u201d ] yield [ \u201csm_80\u201d \u201csm_86\u201d \u201csm_87\u201d ].</p> <p>Type: function that evaluates to a(n) function that evaluates to a(n) list of string</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_3cudaflagsutilsdropdot","title":"cudaPackagesPackageSets.cudaPackages_12_3.cudaFlags.utils.dropDot","text":"<p>Drops dots from a string.</p> <p>Type: function that evaluates to a(n) string</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_3cudaflagsutilsgencodemapper","title":"cudaPackagesPackageSets.cudaPackages_12_3.cudaFlags.utils.gencodeMapper","text":"<p>Maps a feature across a list of compute capabilities to produce a list of gencode arguments.</p> <p>For example, \u201csm\u201d and [ \u201c8.0\u201d \u201c8.6\u201d \u201c8.7\u201d ] yield [ \u201c-gencode=arch=compute_80,code=sm_80\u201d \u201c-gencode=arch=compute_86,code=sm_86\u201d \u201c-gencode=arch=compute_87,code=sm_87\u201d ].</p> <p>Type: function that evaluates to a(n) function that evaluates to a(n) list of string</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_3cudaflagsutilsgetnixsystem","title":"cudaPackagesPackageSets.cudaPackages_12_3.cudaFlags.utils.getNixSystem","text":"<p>Maps NVIDIA redist arch to Nix system.</p> <p>NOTE: This function will be called by unsupported systems because <code>cudaPackages</code> is part of <code>all-packages.nix</code>, which is evaluated on all systems. As such, we need to handle unsupported systems gracefully.</p> <p>Type: function that evaluates to a(n) (one of \u201cunsupported\u201d, \u201caaarch64-linux\u201d, \u201cx86_64-linux\u201d, \u201cppc64le-linux\u201d, \u201cx86_64-windows\u201d)</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_3cudaflagsutilsgetredistarch","title":"cudaPackagesPackageSets.cudaPackages_12_3.cudaFlags.utils.getRedistArch","text":"<p>Maps Nix system to NVIDIA redist arch.</p> <p>NOTE: We swap out the default <code>linux-sbsa</code> redist (for server-grade ARM chips) with the <code>linux-aarch64</code> redist (which is for Jetson devices) if we\u2019re building any Jetson devices. Since both are based on aarch64, we can only have one or the other, otherwise there\u2019s an ambiguity as to which should be used.</p> <p>NOTE: This function will be called by unsupported systems because <code>cudaPackages</code> is part of <code>all-packages.nix</code>, which is evaluated on all systems. As such, we need to handle unsupported systems gracefully.</p> <p>Type: function that evaluates to a(n) (one of \u201cunsupported\u201d, \u201clinux-aarch64\u201d, \u201clinux-sbsa\u201d, \u201clinux-x86_64\u201d, \u201clinux-ppc64le\u201d, \u201cwindows-x86_64\u201d)</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_3cudaflagsutilsisdefault","title":"cudaPackagesPackageSets.cudaPackages_12_3.cudaFlags.utils.isDefault","text":"<p>Whether a GPU is included in the default capabilities</p> <p>Type: function that evaluates to a(n) boolean</p> <p>Default: <code>&lt;function, args: {dontDefaultAfter, isJetson}&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_3cudaflagsutilsissupported","title":"cudaPackagesPackageSets.cudaPackages_12_3.cudaFlags.utils.isSupported","text":"<p>Whether a CUDA version supports a given GPU</p> <p>Type: function that evaluates to a(n) boolean</p> <p>Default: <code>&lt;function, args: {maxCudaVersion, minCudaVersion}&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-flags.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_3cudamajorminorversion","title":"cudaPackagesPackageSets.cudaPackages_12_3.cudaMajorMinorVersion","text":"<p>The major and minor version of the CUDA package set</p> <p>Type: string</p> <p>Default: <code>\"12.3\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_3cudamajorversion","title":"cudaPackagesPackageSets.cudaPackages_12_3.cudaMajorVersion","text":"<p>The major version of the CUDA package set</p> <p>Type: string</p> <p>Default: <code>\"12\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_3cudanewer","title":"cudaPackagesPackageSets.cudaPackages_12_3.cudaNewer","text":"<p>A utility to check if the CUDA version is newer than a given version</p> <p>Type: function that evaluates to a(n) boolean</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_3cudaolder","title":"cudaPackagesPackageSets.cudaPackages_12_3.cudaOlder","text":"<p>A utility to check if the CUDA version is older than a given version</p> <p>Type: function that evaluates to a(n) boolean</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudapackagespackagesetscudapackages_12_3cudaversion","title":"cudaPackagesPackageSets.cudaPackages_12_3.cudaVersion","text":"<p>The CUDA version of the package set</p> <p>Type: A version number with a major and minor component.</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/cuda-packages-package-set.nix</p>"},{"location":"#cudaversions","title":"cudaVersions","text":"<p>A list of CUDA versions to create package sets for</p> <p>Type: list of A version number with a major and minor component.</p> <p>Default:</p> <pre><code>[\n  \"10.0\"\n  \"10.1\"\n  \"10.2\"\n  \"11.0\"\n  \"11.1\"\n  \"11.2\"\n  \"11.3\"\n  \"11.4\"\n  \"11.5\"\n  \"11.6\"\n  \"11.7\"\n  \"11.8\"\n  \"12.0\"\n  \"12.1\"\n  \"12.2\"\n  \"12.3\"\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules</p>"},{"location":"#genericdatagpusall","title":"generic.data.gpus.all","text":"<p>Known GPUs</p> <p>Type: list of (submodule)</p> <p>Default:</p> <pre><code>[\n  {\n    archName = \"Kepler\";\n    computeCapability = \"3.0\";\n    dontDefaultAfter = \"10.2\";\n    isJetson = false;\n    maxCudaVersion = \"10.2\";\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Kepler\";\n    computeCapability = \"3.2\";\n    dontDefaultAfter = \"10.2\";\n    isJetson = false;\n    maxCudaVersion = \"10.2\";\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Kepler\";\n    computeCapability = \"3.5\";\n    dontDefaultAfter = \"11.0\";\n    isJetson = false;\n    maxCudaVersion = \"11.8\";\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Kepler\";\n    computeCapability = \"3.7\";\n    dontDefaultAfter = \"11.0\";\n    isJetson = false;\n    maxCudaVersion = \"11.8\";\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Maxwell\";\n    computeCapability = \"5.0\";\n    dontDefaultAfter = \"11.0\";\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Maxwell\";\n    computeCapability = \"5.2\";\n    dontDefaultAfter = \"11.0\";\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Maxwell\";\n    computeCapability = \"5.3\";\n    dontDefaultAfter = null;\n    isJetson = true;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Pascal\";\n    computeCapability = \"6.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Pascal\";\n    computeCapability = \"6.1\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Pascal\";\n    computeCapability = \"6.2\";\n    dontDefaultAfter = null;\n    isJetson = true;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Volta\";\n    computeCapability = \"7.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Volta\";\n    computeCapability = \"7.2\";\n    dontDefaultAfter = null;\n    isJetson = true;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Turing\";\n    computeCapability = \"7.5\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Ampere\";\n    computeCapability = \"8.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"11.2\";\n  }\n  {\n    archName = \"Ampere\";\n    computeCapability = \"8.6\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"11.2\";\n  }\n  {\n    archName = \"Ampere\";\n    computeCapability = \"8.7\";\n    dontDefaultAfter = null;\n    isJetson = true;\n    maxCudaVersion = null;\n    minCudaVersion = \"11.5\";\n  }\n  {\n    archName = \"Ada\";\n    computeCapability = \"8.9\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"11.8\";\n  }\n  {\n    archName = \"Hopper\";\n    computeCapability = \"9.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"11.8\";\n  }\n  {\n    archName = \"Hopper\";\n    computeCapability = \"9.0a\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"12.0\";\n  }\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/generic/data/gpus</p>"},{"location":"#genericdatagpusallarchname","title":"generic.data.gpus.all.*.archName","text":"<p>Name of the microarchitecture</p> <p>Type: A CUDA architecture name, like Ampere or Ada.</p> <p>Example: <code>\"Kepler\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/generic/data/gpus</p>"},{"location":"#genericdatagpusallcomputecapability","title":"generic.data.gpus.all.*.computeCapability","text":"<p>Compute capability of the GPU</p> <p>Type: A CUDA capability version.</p> <p>Example: <code>\"3.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/generic/data/gpus</p>"},{"location":"#genericdatagpusalldontdefaultafter","title":"generic.data.gpus.all.*.dontDefaultAfter","text":"<p>The CUDA version after which to exclude this GPU from the list of default capabilities we build. null means we always include this GPU in the default capabilities if it is supported.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/generic/data/gpus</p>"},{"location":"#genericdatagpusallisjetson","title":"generic.data.gpus.all.*.isJetson","text":"<p>Whether a GPU is part of NVIDIA\u2019s line of Jetson embedded computers.</p> <p>This field is notable because it tells us what architecture to build for (as Jetson devices are aarch64). More on Jetson devices here: https://www.nvidia.com/en-us/autonomous-machines/embedded-systems/</p> <p>NOTE: These architectures are only built upon request.</p> <p>Type: one of true, false</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/generic/data/gpus</p>"},{"location":"#genericdatagpusallmaxcudaversion","title":"generic.data.gpus.all.*.maxCudaVersion","text":"<p>The maximum (exclusive) CUDA version that supports this GPU. null means there is no maximum.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/generic/data/gpus</p>"},{"location":"#genericdatagpusallmincudaversion","title":"generic.data.gpus.all.*.minCudaVersion","text":"<p>The minimum (inclusive) CUDA version that supports this GPU.</p> <p>Type: A version number with a major and minor component.</p> <p>Example: <code>\"10.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/generic/data/gpus</p>"},{"location":"#genericdatagpusjetsons","title":"generic.data.gpus.jetsons","text":"<p>Known GPUs that are part of NVIDIA\u2019s Jetson line of embedded computers</p> <p>Type: list of (submodule)</p> <p>Default:</p> <pre><code>[\n  {\n    archName = \"Maxwell\";\n    computeCapability = \"5.3\";\n    dontDefaultAfter = null;\n    isJetson = true;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Pascal\";\n    computeCapability = \"6.2\";\n    dontDefaultAfter = null;\n    isJetson = true;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Volta\";\n    computeCapability = \"7.2\";\n    dontDefaultAfter = null;\n    isJetson = true;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Ampere\";\n    computeCapability = \"8.7\";\n    dontDefaultAfter = null;\n    isJetson = true;\n    maxCudaVersion = null;\n    minCudaVersion = \"11.5\";\n  }\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/generic/data/gpus</p>"},{"location":"#genericdatagpusjetsonsarchname","title":"generic.data.gpus.jetsons.*.archName","text":"<p>Name of the microarchitecture</p> <p>Type: A CUDA architecture name, like Ampere or Ada.</p> <p>Example: <code>\"Kepler\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/generic/data/gpus</p>"},{"location":"#genericdatagpusjetsonscomputecapability","title":"generic.data.gpus.jetsons.*.computeCapability","text":"<p>Compute capability of the GPU</p> <p>Type: A CUDA capability version.</p> <p>Example: <code>\"3.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/generic/data/gpus</p>"},{"location":"#genericdatagpusjetsonsdontdefaultafter","title":"generic.data.gpus.jetsons.*.dontDefaultAfter","text":"<p>The CUDA version after which to exclude this GPU from the list of default capabilities we build. null means we always include this GPU in the default capabilities if it is supported.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/generic/data/gpus</p>"},{"location":"#genericdatagpusjetsonsisjetson","title":"generic.data.gpus.jetsons.*.isJetson","text":"<p>Whether a GPU is part of NVIDIA\u2019s line of Jetson embedded computers.</p> <p>This field is notable because it tells us what architecture to build for (as Jetson devices are aarch64). More on Jetson devices here: https://www.nvidia.com/en-us/autonomous-machines/embedded-systems/</p> <p>NOTE: These architectures are only built upon request.</p> <p>Type: one of true, false</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/generic/data/gpus  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/generic/data/gpus</p>"},{"location":"#genericdatagpusjetsonsmaxcudaversion","title":"generic.data.gpus.jetsons.*.maxCudaVersion","text":"<p>The maximum (exclusive) CUDA version that supports this GPU. null means there is no maximum.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/generic/data/gpus</p>"},{"location":"#genericdatagpusjetsonsmincudaversion","title":"generic.data.gpus.jetsons.*.minCudaVersion","text":"<p>The minimum (inclusive) CUDA version that supports this GPU.</p> <p>Type: A version number with a major and minor component.</p> <p>Example: <code>\"10.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/generic/data/gpus</p>"},{"location":"#genericdatagpusnonjetsons","title":"generic.data.gpus.nonJetsons","text":"<p>Known GPUs that are not part of NVIDIA\u2019s Jetson line of embedded computers</p> <p>Type: list of (submodule)</p> <p>Default:</p> <pre><code>[\n  {\n    archName = \"Kepler\";\n    computeCapability = \"3.0\";\n    dontDefaultAfter = \"10.2\";\n    isJetson = false;\n    maxCudaVersion = \"10.2\";\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Kepler\";\n    computeCapability = \"3.2\";\n    dontDefaultAfter = \"10.2\";\n    isJetson = false;\n    maxCudaVersion = \"10.2\";\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Kepler\";\n    computeCapability = \"3.5\";\n    dontDefaultAfter = \"11.0\";\n    isJetson = false;\n    maxCudaVersion = \"11.8\";\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Kepler\";\n    computeCapability = \"3.7\";\n    dontDefaultAfter = \"11.0\";\n    isJetson = false;\n    maxCudaVersion = \"11.8\";\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Maxwell\";\n    computeCapability = \"5.0\";\n    dontDefaultAfter = \"11.0\";\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Maxwell\";\n    computeCapability = \"5.2\";\n    dontDefaultAfter = \"11.0\";\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Pascal\";\n    computeCapability = \"6.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Pascal\";\n    computeCapability = \"6.1\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Volta\";\n    computeCapability = \"7.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Turing\";\n    computeCapability = \"7.5\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"10.0\";\n  }\n  {\n    archName = \"Ampere\";\n    computeCapability = \"8.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"11.2\";\n  }\n  {\n    archName = \"Ampere\";\n    computeCapability = \"8.6\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"11.2\";\n  }\n  {\n    archName = \"Ada\";\n    computeCapability = \"8.9\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"11.8\";\n  }\n  {\n    archName = \"Hopper\";\n    computeCapability = \"9.0\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"11.8\";\n  }\n  {\n    archName = \"Hopper\";\n    computeCapability = \"9.0a\";\n    dontDefaultAfter = null;\n    isJetson = false;\n    maxCudaVersion = null;\n    minCudaVersion = \"12.0\";\n  }\n]\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/generic/data/gpus</p>"},{"location":"#genericdatagpusnonjetsonsarchname","title":"generic.data.gpus.nonJetsons.*.archName","text":"<p>Name of the microarchitecture</p> <p>Type: A CUDA architecture name, like Ampere or Ada.</p> <p>Example: <code>\"Kepler\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/generic/data/gpus</p>"},{"location":"#genericdatagpusnonjetsonscomputecapability","title":"generic.data.gpus.nonJetsons.*.computeCapability","text":"<p>Compute capability of the GPU</p> <p>Type: A CUDA capability version.</p> <p>Example: <code>\"3.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/generic/data/gpus</p>"},{"location":"#genericdatagpusnonjetsonsdontdefaultafter","title":"generic.data.gpus.nonJetsons.*.dontDefaultAfter","text":"<p>The CUDA version after which to exclude this GPU from the list of default capabilities we build. null means we always include this GPU in the default capabilities if it is supported.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/generic/data/gpus</p>"},{"location":"#genericdatagpusnonjetsonsisjetson","title":"generic.data.gpus.nonJetsons.*.isJetson","text":"<p>Whether a GPU is part of NVIDIA\u2019s line of Jetson embedded computers.</p> <p>This field is notable because it tells us what architecture to build for (as Jetson devices are aarch64). More on Jetson devices here: https://www.nvidia.com/en-us/autonomous-machines/embedded-systems/</p> <p>NOTE: These architectures are only built upon request.</p> <p>Type: one of false, true</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/generic/data/gpus  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/generic/data/gpus</p>"},{"location":"#genericdatagpusnonjetsonsmaxcudaversion","title":"generic.data.gpus.nonJetsons.*.maxCudaVersion","text":"<p>The maximum (exclusive) CUDA version that supports this GPU. null means there is no maximum.</p> <p>Type: null or A version number with a major and minor component.</p> <p>Example: <code>\"10.2\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/generic/data/gpus</p>"},{"location":"#genericdatagpusnonjetsonsmincudaversion","title":"generic.data.gpus.nonJetsons.*.minCudaVersion","text":"<p>The minimum (inclusive) CUDA version that supports this GPU.</p> <p>Type: A version number with a major and minor component.</p> <p>Example: <code>\"10.0\"</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/generic/data/gpus</p>"},{"location":"#genericdatanvcccompatibilities","title":"generic.data.nvccCompatibilities","text":"<p>Mapping of CUDA version to known NVCC compatibilities with GCC and Clang</p> <p>Type: attribute set of (submodule)</p> <p>Default:</p> <pre><code>{\n  \"10.0\" = {\n    clangMaxMajorVersion = \"6\";\n    clangMinMajorVersion = \"6\";\n    gccMaxMajorVersion = \"7\";\n    gccMinMajorVersion = \"5\";\n  };\n  \"10.1\" = {\n    clangMaxMajorVersion = \"7\";\n    clangMinMajorVersion = \"6\";\n    gccMaxMajorVersion = \"8\";\n    gccMinMajorVersion = \"5\";\n  };\n  \"10.2\" = {\n    clangMaxMajorVersion = \"8\";\n    clangMinMajorVersion = \"6\";\n    gccMaxMajorVersion = \"8\";\n    gccMinMajorVersion = \"5\";\n  };\n  \"11.0\" = {\n    clangMaxMajorVersion = \"9\";\n    clangMinMajorVersion = \"7\";\n    gccMaxMajorVersion = \"9\";\n    gccMinMajorVersion = \"6\";\n  };\n  \"11.1\" = {\n    clangMaxMajorVersion = \"10\";\n    clangMinMajorVersion = \"7\";\n    gccMaxMajorVersion = \"10\";\n    gccMinMajorVersion = \"6\";\n  };\n  \"11.2\" = {\n    clangMaxMajorVersion = \"11\";\n    clangMinMajorVersion = \"7\";\n    gccMaxMajorVersion = \"10\";\n    gccMinMajorVersion = \"6\";\n  };\n  \"11.3\" = {\n    clangMaxMajorVersion = \"11\";\n    clangMinMajorVersion = \"7\";\n    gccMaxMajorVersion = \"10\";\n    gccMinMajorVersion = \"6\";\n  };\n  \"11.4\" = {\n    clangMaxMajorVersion = \"12\";\n    clangMinMajorVersion = \"7\";\n    gccMaxMajorVersion = \"10\";\n    gccMinMajorVersion = \"6\";\n  };\n  \"11.5\" = {\n    clangMaxMajorVersion = \"12\";\n    clangMinMajorVersion = \"7\";\n    gccMaxMajorVersion = \"10\";\n    gccMinMajorVersion = \"6\";\n  };\n  \"11.6\" = {\n    clangMaxMajorVersion = \"12\";\n    clangMinMajorVersion = \"7\";\n    gccMaxMajorVersion = \"11\";\n    gccMinMajorVersion = \"6\";\n  };\n  \"11.7\" = {\n    clangMaxMajorVersion = \"13\";\n    clangMinMajorVersion = \"7\";\n    gccMaxMajorVersion = \"11\";\n    gccMinMajorVersion = \"6\";\n  };\n  \"11.8\" = {\n    clangMaxMajorVersion = \"14\";\n    clangMinMajorVersion = \"7\";\n    gccMaxMajorVersion = \"11\";\n    gccMinMajorVersion = \"6\";\n  };\n  \"12.0\" = {\n    clangMaxMajorVersion = \"14\";\n    clangMinMajorVersion = \"7\";\n    gccMaxMajorVersion = \"12\";\n    gccMinMajorVersion = \"6\";\n  };\n  \"12.1\" = {\n    clangMaxMajorVersion = \"15\";\n    clangMinMajorVersion = \"7\";\n    gccMaxMajorVersion = \"12\";\n    gccMinMajorVersion = \"6\";\n  };\n  \"12.2\" = {\n    clangMaxMajorVersion = \"16\";\n    clangMinMajorVersion = \"7\";\n    gccMaxMajorVersion = \"12\";\n    gccMinMajorVersion = \"6\";\n  };\n  \"12.3\" = {\n    clangMaxMajorVersion = \"16\";\n    clangMinMajorVersion = \"7\";\n    gccMaxMajorVersion = \"12\";\n    gccMinMajorVersion = \"6\";\n  };\n}\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/generic/data/nvcc-compatibilities</p>"},{"location":"#genericdatanvcccompatibilitiesclangmaxmajorversion","title":"generic.data.nvccCompatibilities.\\.clangMaxMajorVersion <p>Maximum Clang major version to support this CUDA version</p> <p>Type: A version number with a major component.</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/generic/data/nvcc-compatibilities</p>","text":""},{"location":"#genericdatanvcccompatibilitiesclangminmajorversion","title":"generic.data.nvccCompatibilities.\\.clangMinMajorVersion <p>Minimum Clang major version to support this CUDA version</p> <p>Type: A version number with a major component.</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/generic/data/nvcc-compatibilities</p>","text":""},{"location":"#genericdatanvcccompatibilitiesgccmaxmajorversion","title":"generic.data.nvccCompatibilities.\\.gccMaxMajorVersion <p>Maximum GCC major version to support this CUDA version</p> <p>Type: A version number with a major component.</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/generic/data/nvcc-compatibilities</p>","text":""},{"location":"#genericdatanvcccompatibilitiesgccminmajorversion","title":"generic.data.nvccCompatibilities.\\.gccMinMajorVersion <p>Minimum GCC major version to support this CUDA version</p> <p>Type: A version number with a major component.</p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/generic/data/nvcc-compatibilities</p>","text":""},{"location":"#generictypes","title":"generic.types <p>A set of types used in building cudaPackages.</p> <p>Type: attribute set of optionType</p> <p>Default: <code>{ }</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/generic/data/nvcc-compatibilities  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/generic/data/gpus  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/generic</p>","text":""},{"location":"#generictypesarchname","title":"generic.types.archName <p>A CUDA architecture name, like Ampere or Ada.</p> <p>Type: optionType</p> <p>Default:</p> <pre><code>{\n  _type = \"option-type\";\n  check = &lt;function&gt;;\n  deprecationMessage = null;\n  description = \"A CUDA architecture name, like Ampere or Ada.\";\n  descriptionClass = \"noun\";\n  emptyValue = { };\n  functor = {\n    binOp = &lt;function&gt;;\n    name = \"strMatching \\\"^[[:alpha:]]+\\\\$\\\"\";\n    payload = null;\n    type = null;\n    wrapped = null;\n  };\n  getSubModules = null;\n  getSubOptions = &lt;function&gt;;\n  merge = &lt;function&gt;;\n  name = \"archName\";\n  nestedTypes = { };\n  substSubModules = &lt;function&gt;;\n  typeMerge = &lt;function&gt;;\n}\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/generic/types.nix</p>","text":""},{"location":"#generictypescudaarch","title":"generic.types.cudaArch <p>A real/physical CUDA architecture name.</p> <p>Type: optionType</p> <p>Default:</p> <pre><code>{\n  _type = \"option-type\";\n  check = &lt;function&gt;;\n  deprecationMessage = null;\n  description = \"A real/physical CUDA architecture name.\";\n  descriptionClass = \"noun\";\n  emptyValue = { };\n  functor = {\n    binOp = &lt;function&gt;;\n    name = \"strMatching \\\"^sm_[[:digit:]]+[a-z]?\\\\$\\\"\";\n    payload = null;\n    type = null;\n    wrapped = null;\n  };\n  getSubModules = null;\n  getSubOptions = &lt;function&gt;;\n  merge = &lt;function&gt;;\n  name = \"cudaArch\";\n  nestedTypes = { };\n  substSubModules = &lt;function&gt;;\n  typeMerge = &lt;function&gt;;\n}\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/generic/types.nix</p>","text":""},{"location":"#generictypescudacapability","title":"generic.types.cudaCapability <p>A CUDA capability version.</p> <p>Type: optionType</p> <p>Default:</p> <pre><code>{\n  _type = \"option-type\";\n  check = &lt;function&gt;;\n  deprecationMessage = null;\n  description = \"A CUDA capability version.\";\n  descriptionClass = \"noun\";\n  emptyValue = { };\n  functor = {\n    binOp = &lt;function&gt;;\n    name = \"strMatching \\\"^[[:digit:]]+\\\\\\\\.[[:digit:]]+[a-z]?\\\\$\\\"\";\n    payload = null;\n    type = null;\n    wrapped = null;\n  };\n  getSubModules = null;\n  getSubOptions = &lt;function&gt;;\n  merge = &lt;function&gt;;\n  name = \"cudaCapability\";\n  nestedTypes = { };\n  substSubModules = &lt;function&gt;;\n  typeMerge = &lt;function&gt;;\n}\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/generic/types.nix</p>","text":""},{"location":"#generictypesgencodearg","title":"generic.types.gencodeArg <p>A <code>gencode</code> argument for the <code>nvcc</code> compiler.</p> <p>Type: optionType</p> <p>Default:</p> <pre><code>{\n  _type = \"option-type\";\n  check = &lt;function&gt;;\n  deprecationMessage = null;\n  description = \"A `gencode` argument for the `nvcc` compiler.\";\n  descriptionClass = \"noun\";\n  emptyValue = { };\n  functor = {\n    binOp = &lt;function&gt;;\n    name = \"strMatching \\\"^-gencode=arch=compute_[[:digit:]]+[a-z]?,code=(sm|compute)_[[:digit:]]+[a-z]?\\\\$\\\"\";\n    payload = null;\n    type = null;\n    wrapped = null;\n  };\n  getSubModules = null;\n  getSubOptions = &lt;function&gt;;\n  merge = &lt;function&gt;;\n  name = \"gencodeArg\";\n  nestedTypes = { };\n  substSubModules = &lt;function&gt;;\n  typeMerge = &lt;function&gt;;\n}\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/generic/types.nix</p>","text":""},{"location":"#generictypesgpu","title":"generic.types.gpu <p>A GPU</p> <p>Type: optionType</p> <p>Default:</p> <pre><code>{\n  _type = \"option-type\";\n  check = &lt;function&gt;;\n  deprecationMessage = null;\n  description = \"submodule\";\n  descriptionClass = null;\n  emptyValue = {\n    value = { };\n  };\n  functor = {\n    binOp = &lt;function&gt;;\n    name = \"submodule\";\n    payload = {\n      class = null;\n      description = null;\n      modules = [\n        {\n          options = {\n            archName = {\n              _type = \"option\";\n              description = \"Name of the microarchitecture\";\n              example = \"Kepler\";\n              type = {\n                _type = \"option-type\";\n                check = &lt;function&gt;;\n                deprecationMessage = null;\n                description = \"A CUDA architecture name, like Ampere or Ada.\";\n                descriptionClass = \"noun\";\n                emptyValue = { };\n                functor = {\n                  binOp = &lt;function&gt;;\n                  name = \"strMatching \\\"^[[:alpha:]]+\\\\$\\\"\";\n                  payload = null;\n                  type = null;\n                  wrapped = null;\n                };\n                getSubModules = null;\n                getSubOptions = &lt;function&gt;;\n                merge = &lt;function&gt;;\n                name = \"archName\";\n                nestedTypes = { };\n                substSubModules = &lt;function&gt;;\n                typeMerge = &lt;function&gt;;\n              };\n            };\n            computeCapability = {\n              _type = \"option\";\n              description = \"Compute capability of the GPU\";\n              example = \"3.0\";\n              type = {\n                _type = \"option-type\";\n                check = &lt;function&gt;;\n                deprecationMessage = null;\n                description = \"A CUDA capability version.\";\n                descriptionClass = \"noun\";\n                emptyValue = { };\n                functor = {\n                  binOp = &lt;function&gt;;\n                  name = \"strMatching \\\"^[[:digit:]]+\\\\\\\\.[[:digit:]]+[a-z]?\\\\$\\\"\";\n                  payload = null;\n                  type = null;\n                  wrapped = null;\n                };\n                getSubModules = null;\n                getSubOptions = &lt;function&gt;;\n                merge = &lt;function&gt;;\n                name = \"cudaCapability\";\n                nestedTypes = { };\n                substSubModules = &lt;function&gt;;\n                typeMerge = &lt;function&gt;;\n              };\n            };\n            dontDefaultAfter = {\n              _type = \"option\";\n              description = ''\n                The CUDA version after which to exclude this GPU from the list of default capabilities\n                we build. null means we always include this GPU in the default capabilities if it is\n                supported.\n              '';\n              example = \"10.2\";\n              type = {\n                _type = \"option-type\";\n                check = &lt;function&gt;;\n                deprecationMessage = null;\n                description = \"null or A version number with a major and minor component.\";\n                descriptionClass = \"conjunction\";\n                emptyValue = {\n                  value = null;\n                };\n                functor = {\n                  binOp = &lt;function&gt;;\n                  name = \"nullOr\";\n                  payload = null;\n                  type = &lt;function&gt;;\n                  wrapped = {\n                    _type = \"option-type\";\n                    check = &lt;function&gt;;\n                    deprecationMessage = null;\n                    description = \"A version number with a major and minor component.\";\n                    descriptionClass = \"noun\";\n                    emptyValue = { };\n                    functor = {\n                      binOp = &lt;function&gt;;\n                      name = \"strMatching \\\"^([[:digit:]]+)\\\\\\\\.([[:digit:]]+)\\\\$\\\"\";\n                      payload = null;\n                      type = null;\n                      wrapped = null;\n                    };\n                    getSubModules = null;\n                    getSubOptions = &lt;function&gt;;\n                    merge = &lt;function&gt;;\n                    name = \"majorMinorVersion\";\n                    nestedTypes = { };\n                    substSubModules = &lt;function&gt;;\n                    typeMerge = &lt;function&gt;;\n                  };\n                };\n                getSubModules = null;\n                getSubOptions = &lt;function&gt;;\n                merge = &lt;function&gt;;\n                name = \"nullOr\";\n                nestedTypes = {\n                  elemType = {\n                    _type = \"option-type\";\n                    check = &lt;function&gt;;\n                    deprecationMessage = null;\n                    description = \"A version number with a major and minor component.\";\n                    descriptionClass = \"noun\";\n                    emptyValue = { };\n                    functor = {\n                      binOp = &lt;function&gt;;\n                      name = \"strMatching \\\"^([[:digit:]]+)\\\\\\\\.([[:digit:]]+)\\\\$\\\"\";\n                      payload = null;\n                      type = null;\n                      wrapped = null;\n                    };\n                    getSubModules = null;\n                    getSubOptions = &lt;function&gt;;\n                    merge = &lt;function&gt;;\n                    name = \"majorMinorVersion\";\n                    nestedTypes = { };\n                    substSubModules = &lt;function&gt;;\n                    typeMerge = &lt;function&gt;;\n                  };\n                };\n                substSubModules = &lt;function&gt;;\n                typeMerge = &lt;function&gt;;\n              };\n            };\n            isJetson = {\n              _type = \"option\";\n              description = ''\n                Whether a GPU is part of NVIDIA's line of Jetson embedded computers.\n\n                This field is notable because it tells us what architecture to build for (as Jetson devices are\n                aarch64). More on Jetson devices here:\n                https://www.nvidia.com/en-us/autonomous-machines/embedded-systems/\n\n                NOTE: These architectures are only built upon request.\n              '';\n              type = {\n                _type = \"option-type\";\n                check = &lt;function&gt;;\n                deprecationMessage = null;\n                description = \"one of true, false\";\n                descriptionClass = \"conjunction\";\n                emptyValue = { };\n                functor = {\n                  binOp = &lt;function&gt;;\n                  name = \"enum\";\n                  payload = [\n                    true\n                    false\n                  ];\n                  type = &lt;function&gt;;\n                  wrapped = null;\n                };\n                getSubModules = null;\n                getSubOptions = &lt;function&gt;;\n                merge = &lt;function&gt;;\n                name = \"enum\";\n                nestedTypes = { };\n                substSubModules = &lt;function&gt;;\n                typeMerge = &lt;function&gt;;\n              };\n            };\n            maxCudaVersion = {\n              _type = \"option\";\n              description = \"The maximum (exclusive) CUDA version that supports this GPU. null means there is no maximum.\";\n              example = \"10.2\";\n              type = {\n                _type = \"option-type\";\n                check = &lt;function&gt;;\n                deprecationMessage = null;\n                description = \"null or A version number with a major and minor component.\";\n                descriptionClass = \"conjunction\";\n                emptyValue = {\n                  value = null;\n                };\n                functor = {\n                  binOp = &lt;function&gt;;\n                  name = \"nullOr\";\n                  payload = null;\n                  type = &lt;function&gt;;\n                  wrapped = {\n                    _type = \"option-type\";\n                    check = &lt;function&gt;;\n                    deprecationMessage = null;\n                    description = \"A version number with a major and minor component.\";\n                    descriptionClass = \"noun\";\n                    emptyValue = { };\n                    functor = {\n                      binOp = &lt;function&gt;;\n                      name = \"strMatching \\\"^([[:digit:]]+)\\\\\\\\.([[:digit:]]+)\\\\$\\\"\";\n                      payload = null;\n                      type = null;\n                      wrapped = null;\n                    };\n                    getSubModules = null;\n                    getSubOptions = &lt;function&gt;;\n                    merge = &lt;function&gt;;\n                    name = \"majorMinorVersion\";\n                    nestedTypes = { };\n                    substSubModules = &lt;function&gt;;\n                    typeMerge = &lt;function&gt;;\n                  };\n                };\n                getSubModules = null;\n                getSubOptions = &lt;function&gt;;\n                merge = &lt;function&gt;;\n                name = \"nullOr\";\n                nestedTypes = {\n                  elemType = {\n                    _type = \"option-type\";\n                    check = &lt;function&gt;;\n                    deprecationMessage = null;\n                    description = \"A version number with a major and minor component.\";\n                    descriptionClass = \"noun\";\n                    emptyValue = { };\n                    functor = {\n                      binOp = &lt;function&gt;;\n                      name = \"strMatching \\\"^([[:digit:]]+)\\\\\\\\.([[:digit:]]+)\\\\$\\\"\";\n                      payload = null;\n                      type = null;\n                      wrapped = null;\n                    };\n                    getSubModules = null;\n                    getSubOptions = &lt;function&gt;;\n                    merge = &lt;function&gt;;\n                    name = \"majorMinorVersion\";\n                    nestedTypes = { };\n                    substSubModules = &lt;function&gt;;\n                    typeMerge = &lt;function&gt;;\n                  };\n                };\n                substSubModules = &lt;function&gt;;\n                typeMerge = &lt;function&gt;;\n              };\n            };\n            minCudaVersion = {\n              _type = \"option\";\n              description = \"The minimum (inclusive) CUDA version that supports this GPU.\";\n              example = \"10.0\";\n              type = {\n                _type = \"option-type\";\n                check = &lt;function&gt;;\n                deprecationMessage = null;\n                description = \"A version number with a major and minor component.\";\n                descriptionClass = \"noun\";\n                emptyValue = { };\n                functor = {\n                  binOp = &lt;function&gt;;\n                  name = \"strMatching \\\"^([[:digit:]]+)\\\\\\\\.([[:digit:]]+)\\\\$\\\"\";\n                  payload = null;\n                  type = null;\n                  wrapped = null;\n                };\n                getSubModules = null;\n                getSubOptions = &lt;function&gt;;\n                merge = &lt;function&gt;;\n                name = \"majorMinorVersion\";\n                nestedTypes = { };\n                substSubModules = &lt;function&gt;;\n                typeMerge = &lt;function&gt;;\n              };\n            };\n          };\n        }\n      ];\n      shorthandOnlyDefinesConfig = false;\n      specialArgs = { };\n    };\n    type = &lt;function, args: {class?, description?, modules, shorthandOnlyDefinesConfig?, specialArgs?}&gt;;\n    wrapped = null;\n  };\n  getSubModules = [\n    {\n      options = {\n        archName = {\n          _type = \"option\";\n          description = \"Name of the microarchitecture\";\n          example = \"Kepler\";\n          type = {\n            _type = \"option-type\";\n            check = &lt;function&gt;;\n            deprecationMessage = null;\n            description = \"A CUDA architecture name, like Ampere or Ada.\";\n            descriptionClass = \"noun\";\n            emptyValue = { };\n            functor = {\n              binOp = &lt;function&gt;;\n              name = \"strMatching \\\"^[[:alpha:]]+\\\\$\\\"\";\n              payload = null;\n              type = null;\n              wrapped = null;\n            };\n            getSubModules = null;\n            getSubOptions = &lt;function&gt;;\n            merge = &lt;function&gt;;\n            name = \"archName\";\n            nestedTypes = { };\n            substSubModules = &lt;function&gt;;\n            typeMerge = &lt;function&gt;;\n          };\n        };\n        computeCapability = {\n          _type = \"option\";\n          description = \"Compute capability of the GPU\";\n          example = \"3.0\";\n          type = {\n            _type = \"option-type\";\n            check = &lt;function&gt;;\n            deprecationMessage = null;\n            description = \"A CUDA capability version.\";\n            descriptionClass = \"noun\";\n            emptyValue = { };\n            functor = {\n              binOp = &lt;function&gt;;\n              name = \"strMatching \\\"^[[:digit:]]+\\\\\\\\.[[:digit:]]+[a-z]?\\\\$\\\"\";\n              payload = null;\n              type = null;\n              wrapped = null;\n            };\n            getSubModules = null;\n            getSubOptions = &lt;function&gt;;\n            merge = &lt;function&gt;;\n            name = \"cudaCapability\";\n            nestedTypes = { };\n            substSubModules = &lt;function&gt;;\n            typeMerge = &lt;function&gt;;\n          };\n        };\n        dontDefaultAfter = {\n          _type = \"option\";\n          description = ''\n            The CUDA version after which to exclude this GPU from the list of default capabilities\n            we build. null means we always include this GPU in the default capabilities if it is\n            supported.\n          '';\n          example = \"10.2\";\n          type = {\n            _type = \"option-type\";\n            check = &lt;function&gt;;\n            deprecationMessage = null;\n            description = \"null or A version number with a major and minor component.\";\n            descriptionClass = \"conjunction\";\n            emptyValue = {\n              value = null;\n            };\n            functor = {\n              binOp = &lt;function&gt;;\n              name = \"nullOr\";\n              payload = null;\n              type = &lt;function&gt;;\n              wrapped = {\n                _type = \"option-type\";\n                check = &lt;function&gt;;\n                deprecationMessage = null;\n                description = \"A version number with a major and minor component.\";\n                descriptionClass = \"noun\";\n                emptyValue = { };\n                functor = {\n                  binOp = &lt;function&gt;;\n                  name = \"strMatching \\\"^([[:digit:]]+)\\\\\\\\.([[:digit:]]+)\\\\$\\\"\";\n                  payload = null;\n                  type = null;\n                  wrapped = null;\n                };\n                getSubModules = null;\n                getSubOptions = &lt;function&gt;;\n                merge = &lt;function&gt;;\n                name = \"majorMinorVersion\";\n                nestedTypes = { };\n                substSubModules = &lt;function&gt;;\n                typeMerge = &lt;function&gt;;\n              };\n            };\n            getSubModules = null;\n            getSubOptions = &lt;function&gt;;\n            merge = &lt;function&gt;;\n            name = \"nullOr\";\n            nestedTypes = {\n              elemType = {\n                _type = \"option-type\";\n                check = &lt;function&gt;;\n                deprecationMessage = null;\n                description = \"A version number with a major and minor component.\";\n                descriptionClass = \"noun\";\n                emptyValue = { };\n                functor = {\n                  binOp = &lt;function&gt;;\n                  name = \"strMatching \\\"^([[:digit:]]+)\\\\\\\\.([[:digit:]]+)\\\\$\\\"\";\n                  payload = null;\n                  type = null;\n                  wrapped = null;\n                };\n                getSubModules = null;\n                getSubOptions = &lt;function&gt;;\n                merge = &lt;function&gt;;\n                name = \"majorMinorVersion\";\n                nestedTypes = { };\n                substSubModules = &lt;function&gt;;\n                typeMerge = &lt;function&gt;;\n              };\n            };\n            substSubModules = &lt;function&gt;;\n            typeMerge = &lt;function&gt;;\n          };\n        };\n        isJetson = {\n          _type = \"option\";\n          description = ''\n            Whether a GPU is part of NVIDIA's line of Jetson embedded computers.\n\n            This field is notable because it tells us what architecture to build for (as Jetson devices are\n            aarch64). More on Jetson devices here:\n            https://www.nvidia.com/en-us/autonomous-machines/embedded-systems/\n\n            NOTE: These architectures are only built upon request.\n          '';\n          type = {\n            _type = \"option-type\";\n            check = &lt;function&gt;;\n            deprecationMessage = null;\n            description = \"one of true, false\";\n            descriptionClass = \"conjunction\";\n            emptyValue = { };\n            functor = {\n              binOp = &lt;function&gt;;\n              name = \"enum\";\n              payload = [\n                true\n                false\n              ];\n              type = &lt;function&gt;;\n              wrapped = null;\n            };\n            getSubModules = null;\n            getSubOptions = &lt;function&gt;;\n            merge = &lt;function&gt;;\n            name = \"enum\";\n            nestedTypes = { };\n            substSubModules = &lt;function&gt;;\n            typeMerge = &lt;function&gt;;\n          };\n        };\n        maxCudaVersion = {\n          _type = \"option\";\n          description = \"The maximum (exclusive) CUDA version that supports this GPU. null means there is no maximum.\";\n          example = \"10.2\";\n          type = {\n            _type = \"option-type\";\n            check = &lt;function&gt;;\n            deprecationMessage = null;\n            description = \"null or A version number with a major and minor component.\";\n            descriptionClass = \"conjunction\";\n            emptyValue = {\n              value = null;\n            };\n            functor = {\n              binOp = &lt;function&gt;;\n              name = \"nullOr\";\n              payload = null;\n              type = &lt;function&gt;;\n              wrapped = {\n                _type = \"option-type\";\n                check = &lt;function&gt;;\n                deprecationMessage = null;\n                description = \"A version number with a major and minor component.\";\n                descriptionClass = \"noun\";\n                emptyValue = { };\n                functor = {\n                  binOp = &lt;function&gt;;\n                  name = \"strMatching \\\"^([[:digit:]]+)\\\\\\\\.([[:digit:]]+)\\\\$\\\"\";\n                  payload = null;\n                  type = null;\n                  wrapped = null;\n                };\n                getSubModules = null;\n                getSubOptions = &lt;function&gt;;\n                merge = &lt;function&gt;;\n                name = \"majorMinorVersion\";\n                nestedTypes = { };\n                substSubModules = &lt;function&gt;;\n                typeMerge = &lt;function&gt;;\n              };\n            };\n            getSubModules = null;\n            getSubOptions = &lt;function&gt;;\n            merge = &lt;function&gt;;\n            name = \"nullOr\";\n            nestedTypes = {\n              elemType = {\n                _type = \"option-type\";\n                check = &lt;function&gt;;\n                deprecationMessage = null;\n                description = \"A version number with a major and minor component.\";\n                descriptionClass = \"noun\";\n                emptyValue = { };\n                functor = {\n                  binOp = &lt;function&gt;;\n                  name = \"strMatching \\\"^([[:digit:]]+)\\\\\\\\.([[:digit:]]+)\\\\$\\\"\";\n                  payload = null;\n                  type = null;\n                  wrapped = null;\n                };\n                getSubModules = null;\n                getSubOptions = &lt;function&gt;;\n                merge = &lt;function&gt;;\n                name = \"majorMinorVersion\";\n                nestedTypes = { };\n                substSubModules = &lt;function&gt;;\n                typeMerge = &lt;function&gt;;\n              };\n            };\n            substSubModules = &lt;function&gt;;\n            typeMerge = &lt;function&gt;;\n          };\n        };\n        minCudaVersion = {\n          _type = \"option\";\n          description = \"The minimum (inclusive) CUDA version that supports this GPU.\";\n          example = \"10.0\";\n          type = {\n            _type = \"option-type\";\n            check = &lt;function&gt;;\n            deprecationMessage = null;\n            description = \"A version number with a major and minor component.\";\n            descriptionClass = \"noun\";\n            emptyValue = { };\n            functor = {\n              binOp = &lt;function&gt;;\n              name = \"strMatching \\\"^([[:digit:]]+)\\\\\\\\.([[:digit:]]+)\\\\$\\\"\";\n              payload = null;\n              type = null;\n              wrapped = null;\n            };\n            getSubModules = null;\n            getSubOptions = &lt;function&gt;;\n            merge = &lt;function&gt;;\n            name = \"majorMinorVersion\";\n            nestedTypes = { };\n            substSubModules = &lt;function&gt;;\n            typeMerge = &lt;function&gt;;\n          };\n        };\n      };\n    }\n  ];\n  getSubOptions = &lt;function&gt;;\n  merge = &lt;function&gt;;\n  name = \"submodule\";\n  nestedTypes = { };\n  substSubModules = &lt;function&gt;;\n  typeMerge = &lt;function&gt;;\n}\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/generic/data/gpus</p>","text":""},{"location":"#generictypesjetsongpu","title":"generic.types.jetsonGpu <p>A GPU that is part of NVIDIA\u2019s Jetson line of embedded computers</p> <p>Type: optionType</p> <p>Default:</p> <pre><code>{\n  _type = \"option-type\";\n  check = &lt;function&gt;;\n  deprecationMessage = null;\n  description = \"submodule\";\n  descriptionClass = null;\n  emptyValue = {\n    value = { };\n  };\n  functor = {\n    binOp = &lt;function&gt;;\n    name = \"submodule\";\n    payload = {\n      class = null;\n      description = null;\n      modules = [\n        {\n          options = {\n            archName = {\n              _type = \"option\";\n              description = \"Name of the microarchitecture\";\n              example = \"Kepler\";\n              type = {\n                _type = \"option-type\";\n                check = &lt;function&gt;;\n                deprecationMessage = null;\n                description = \"A CUDA architecture name, like Ampere or Ada.\";\n                descriptionClass = \"noun\";\n                emptyValue = { };\n                functor = {\n                  binOp = &lt;function&gt;;\n                  name = \"strMatching \\\"^[[:alpha:]]+\\\\$\\\"\";\n                  payload = null;\n                  type = null;\n                  wrapped = null;\n                };\n                getSubModules = null;\n                getSubOptions = &lt;function&gt;;\n                merge = &lt;function&gt;;\n                name = \"archName\";\n                nestedTypes = { };\n                substSubModules = &lt;function&gt;;\n                typeMerge = &lt;function&gt;;\n              };\n            };\n            computeCapability = {\n              _type = \"option\";\n              description = \"Compute capability of the GPU\";\n              example = \"3.0\";\n              type = {\n                _type = \"option-type\";\n                check = &lt;function&gt;;\n                deprecationMessage = null;\n                description = \"A CUDA capability version.\";\n                descriptionClass = \"noun\";\n                emptyValue = { };\n                functor = {\n                  binOp = &lt;function&gt;;\n                  name = \"strMatching \\\"^[[:digit:]]+\\\\\\\\.[[:digit:]]+[a-z]?\\\\$\\\"\";\n                  payload = null;\n                  type = null;\n                  wrapped = null;\n                };\n                getSubModules = null;\n                getSubOptions = &lt;function&gt;;\n                merge = &lt;function&gt;;\n                name = \"cudaCapability\";\n                nestedTypes = { };\n                substSubModules = &lt;function&gt;;\n                typeMerge = &lt;function&gt;;\n              };\n            };\n            dontDefaultAfter = {\n              _type = \"option\";\n              description = ''\n                The CUDA version after which to exclude this GPU from the list of default capabilities\n                we build. null means we always include this GPU in the default capabilities if it is\n                supported.\n              '';\n              example = \"10.2\";\n              type = {\n                _type = \"option-type\";\n                check = &lt;function&gt;;\n                deprecationMessage = null;\n                description = \"null or A version number with a major and minor component.\";\n                descriptionClass = \"conjunction\";\n                emptyValue = {\n                  value = null;\n                };\n                functor = {\n                  binOp = &lt;function&gt;;\n                  name = \"nullOr\";\n                  payload = null;\n                  type = &lt;function&gt;;\n                  wrapped = {\n                    _type = \"option-type\";\n                    check = &lt;function&gt;;\n                    deprecationMessage = null;\n                    description = \"A version number with a major and minor component.\";\n                    descriptionClass = \"noun\";\n                    emptyValue = { };\n                    functor = {\n                      binOp = &lt;function&gt;;\n                      name = \"strMatching \\\"^([[:digit:]]+)\\\\\\\\.([[:digit:]]+)\\\\$\\\"\";\n                      payload = null;\n                      type = null;\n                      wrapped = null;\n                    };\n                    getSubModules = null;\n                    getSubOptions = &lt;function&gt;;\n                    merge = &lt;function&gt;;\n                    name = \"majorMinorVersion\";\n                    nestedTypes = { };\n                    substSubModules = &lt;function&gt;;\n                    typeMerge = &lt;function&gt;;\n                  };\n                };\n                getSubModules = null;\n                getSubOptions = &lt;function&gt;;\n                merge = &lt;function&gt;;\n                name = \"nullOr\";\n                nestedTypes = {\n                  elemType = {\n                    _type = \"option-type\";\n                    check = &lt;function&gt;;\n                    deprecationMessage = null;\n                    description = \"A version number with a major and minor component.\";\n                    descriptionClass = \"noun\";\n                    emptyValue = { };\n                    functor = {\n                      binOp = &lt;function&gt;;\n                      name = \"strMatching \\\"^([[:digit:]]+)\\\\\\\\.([[:digit:]]+)\\\\$\\\"\";\n                      payload = null;\n                      type = null;\n                      wrapped = null;\n                    };\n                    getSubModules = null;\n                    getSubOptions = &lt;function&gt;;\n                    merge = &lt;function&gt;;\n                    name = \"majorMinorVersion\";\n                    nestedTypes = { };\n                    substSubModules = &lt;function&gt;;\n                    typeMerge = &lt;function&gt;;\n                  };\n                };\n                substSubModules = &lt;function&gt;;\n                typeMerge = &lt;function&gt;;\n              };\n            };\n            isJetson = {\n              _type = \"option\";\n              description = ''\n                Whether a GPU is part of NVIDIA's line of Jetson embedded computers.\n\n                This field is notable because it tells us what architecture to build for (as Jetson devices are\n                aarch64). More on Jetson devices here:\n                https://www.nvidia.com/en-us/autonomous-machines/embedded-systems/\n\n                NOTE: These architectures are only built upon request.\n              '';\n              type = {\n                _type = \"option-type\";\n                check = &lt;function&gt;;\n                deprecationMessage = null;\n                description = \"one of true, false\";\n                descriptionClass = \"conjunction\";\n                emptyValue = { };\n                functor = {\n                  binOp = &lt;function&gt;;\n                  name = \"enum\";\n                  payload = [\n                    true\n                    false\n                  ];\n                  type = &lt;function&gt;;\n                  wrapped = null;\n                };\n                getSubModules = null;\n                getSubOptions = &lt;function&gt;;\n                merge = &lt;function&gt;;\n                name = \"enum\";\n                nestedTypes = { };\n                substSubModules = &lt;function&gt;;\n                typeMerge = &lt;function&gt;;\n              };\n            };\n            maxCudaVersion = {\n              _type = \"option\";\n              description = \"The maximum (exclusive) CUDA version that supports this GPU. null means there is no maximum.\";\n              example = \"10.2\";\n              type = {\n                _type = \"option-type\";\n                check = &lt;function&gt;;\n                deprecationMessage = null;\n                description = \"null or A version number with a major and minor component.\";\n                descriptionClass = \"conjunction\";\n                emptyValue = {\n                  value = null;\n                };\n                functor = {\n                  binOp = &lt;function&gt;;\n                  name = \"nullOr\";\n                  payload = null;\n                  type = &lt;function&gt;;\n                  wrapped = {\n                    _type = \"option-type\";\n                    check = &lt;function&gt;;\n                    deprecationMessage = null;\n                    description = \"A version number with a major and minor component.\";\n                    descriptionClass = \"noun\";\n                    emptyValue = { };\n                    functor = {\n                      binOp = &lt;function&gt;;\n                      name = \"strMatching \\\"^([[:digit:]]+)\\\\\\\\.([[:digit:]]+)\\\\$\\\"\";\n                      payload = null;\n                      type = null;\n                      wrapped = null;\n                    };\n                    getSubModules = null;\n                    getSubOptions = &lt;function&gt;;\n                    merge = &lt;function&gt;;\n                    name = \"majorMinorVersion\";\n                    nestedTypes = { };\n                    substSubModules = &lt;function&gt;;\n                    typeMerge = &lt;function&gt;;\n                  };\n                };\n                getSubModules = null;\n                getSubOptions = &lt;function&gt;;\n                merge = &lt;function&gt;;\n                name = \"nullOr\";\n                nestedTypes = {\n                  elemType = {\n                    _type = \"option-type\";\n                    check = &lt;function&gt;;\n                    deprecationMessage = null;\n                    description = \"A version number with a major and minor component.\";\n                    descriptionClass = \"noun\";\n                    emptyValue = { };\n                    functor = {\n                      binOp = &lt;function&gt;;\n                      name = \"strMatching \\\"^([[:digit:]]+)\\\\\\\\.([[:digit:]]+)\\\\$\\\"\";\n                      payload = null;\n                      type = null;\n                      wrapped = null;\n                    };\n                    getSubModules = null;\n                    getSubOptions = &lt;function&gt;;\n                    merge = &lt;function&gt;;\n                    name = \"majorMinorVersion\";\n                    nestedTypes = { };\n                    substSubModules = &lt;function&gt;;\n                    typeMerge = &lt;function&gt;;\n                  };\n                };\n                substSubModules = &lt;function&gt;;\n                typeMerge = &lt;function&gt;;\n              };\n            };\n            minCudaVersion = {\n              _type = \"option\";\n              description = \"The minimum (inclusive) CUDA version that supports this GPU.\";\n              example = \"10.0\";\n              type = {\n                _type = \"option-type\";\n                check = &lt;function&gt;;\n                deprecationMessage = null;\n                description = \"A version number with a major and minor component.\";\n                descriptionClass = \"noun\";\n                emptyValue = { };\n                functor = {\n                  binOp = &lt;function&gt;;\n                  name = \"strMatching \\\"^([[:digit:]]+)\\\\\\\\.([[:digit:]]+)\\\\$\\\"\";\n                  payload = null;\n                  type = null;\n                  wrapped = null;\n                };\n                getSubModules = null;\n                getSubOptions = &lt;function&gt;;\n                merge = &lt;function&gt;;\n                name = \"majorMinorVersion\";\n                nestedTypes = { };\n                substSubModules = &lt;function&gt;;\n                typeMerge = &lt;function&gt;;\n              };\n            };\n          };\n        }\n        {\n          options = {\n            isJetson = {\n              _type = \"option\";\n              type = {\n                _type = \"option-type\";\n                check = &lt;function&gt;;\n                deprecationMessage = null;\n                description = \"value true (singular enum)\";\n                descriptionClass = \"noun\";\n                emptyValue = { };\n                functor = {\n                  binOp = &lt;function&gt;;\n                  name = \"enum\";\n                  payload = [\n                    true\n                  ];\n                  type = &lt;function&gt;;\n                  wrapped = null;\n                };\n                getSubModules = null;\n                getSubOptions = &lt;function&gt;;\n                merge = &lt;function&gt;;\n                name = \"enum\";\n                nestedTypes = { };\n                substSubModules = &lt;function&gt;;\n                typeMerge = &lt;function&gt;;\n              };\n            };\n          };\n        }\n      ];\n      shorthandOnlyDefinesConfig = false;\n      specialArgs = { };\n    };\n    type = &lt;function, args: {class?, description?, modules, shorthandOnlyDefinesConfig?, specialArgs?}&gt;;\n    wrapped = null;\n  };\n  getSubModules = [\n    {\n      options = {\n        archName = {\n          _type = \"option\";\n          description = \"Name of the microarchitecture\";\n          example = \"Kepler\";\n          type = {\n            _type = \"option-type\";\n            check = &lt;function&gt;;\n            deprecationMessage = null;\n            description = \"A CUDA architecture name, like Ampere or Ada.\";\n            descriptionClass = \"noun\";\n            emptyValue = { };\n            functor = {\n              binOp = &lt;function&gt;;\n              name = \"strMatching \\\"^[[:alpha:]]+\\\\$\\\"\";\n              payload = null;\n              type = null;\n              wrapped = null;\n            };\n            getSubModules = null;\n            getSubOptions = &lt;function&gt;;\n            merge = &lt;function&gt;;\n            name = \"archName\";\n            nestedTypes = { };\n            substSubModules = &lt;function&gt;;\n            typeMerge = &lt;function&gt;;\n          };\n        };\n        computeCapability = {\n          _type = \"option\";\n          description = \"Compute capability of the GPU\";\n          example = \"3.0\";\n          type = {\n            _type = \"option-type\";\n            check = &lt;function&gt;;\n            deprecationMessage = null;\n            description = \"A CUDA capability version.\";\n            descriptionClass = \"noun\";\n            emptyValue = { };\n            functor = {\n              binOp = &lt;function&gt;;\n              name = \"strMatching \\\"^[[:digit:]]+\\\\\\\\.[[:digit:]]+[a-z]?\\\\$\\\"\";\n              payload = null;\n              type = null;\n              wrapped = null;\n            };\n            getSubModules = null;\n            getSubOptions = &lt;function&gt;;\n            merge = &lt;function&gt;;\n            name = \"cudaCapability\";\n            nestedTypes = { };\n            substSubModules = &lt;function&gt;;\n            typeMerge = &lt;function&gt;;\n          };\n        };\n        dontDefaultAfter = {\n          _type = \"option\";\n          description = ''\n            The CUDA version after which to exclude this GPU from the list of default capabilities\n            we build. null means we always include this GPU in the default capabilities if it is\n            supported.\n          '';\n          example = \"10.2\";\n          type = {\n            _type = \"option-type\";\n            check = &lt;function&gt;;\n            deprecationMessage = null;\n            description = \"null or A version number with a major and minor component.\";\n            descriptionClass = \"conjunction\";\n            emptyValue = {\n              value = null;\n            };\n            functor = {\n              binOp = &lt;function&gt;;\n              name = \"nullOr\";\n              payload = null;\n              type = &lt;function&gt;;\n              wrapped = {\n                _type = \"option-type\";\n                check = &lt;function&gt;;\n                deprecationMessage = null;\n                description = \"A version number with a major and minor component.\";\n                descriptionClass = \"noun\";\n                emptyValue = { };\n                functor = {\n                  binOp = &lt;function&gt;;\n                  name = \"strMatching \\\"^([[:digit:]]+)\\\\\\\\.([[:digit:]]+)\\\\$\\\"\";\n                  payload = null;\n                  type = null;\n                  wrapped = null;\n                };\n                getSubModules = null;\n                getSubOptions = &lt;function&gt;;\n                merge = &lt;function&gt;;\n                name = \"majorMinorVersion\";\n                nestedTypes = { };\n                substSubModules = &lt;function&gt;;\n                typeMerge = &lt;function&gt;;\n              };\n            };\n            getSubModules = null;\n            getSubOptions = &lt;function&gt;;\n            merge = &lt;function&gt;;\n            name = \"nullOr\";\n            nestedTypes = {\n              elemType = {\n                _type = \"option-type\";\n                check = &lt;function&gt;;\n                deprecationMessage = null;\n                description = \"A version number with a major and minor component.\";\n                descriptionClass = \"noun\";\n                emptyValue = { };\n                functor = {\n                  binOp = &lt;function&gt;;\n                  name = \"strMatching \\\"^([[:digit:]]+)\\\\\\\\.([[:digit:]]+)\\\\$\\\"\";\n                  payload = null;\n                  type = null;\n                  wrapped = null;\n                };\n                getSubModules = null;\n                getSubOptions = &lt;function&gt;;\n                merge = &lt;function&gt;;\n                name = \"majorMinorVersion\";\n                nestedTypes = { };\n                substSubModules = &lt;function&gt;;\n                typeMerge = &lt;function&gt;;\n              };\n            };\n            substSubModules = &lt;function&gt;;\n            typeMerge = &lt;function&gt;;\n          };\n        };\n        isJetson = {\n          _type = \"option\";\n          description = ''\n            Whether a GPU is part of NVIDIA's line of Jetson embedded computers.\n\n            This field is notable because it tells us what architecture to build for (as Jetson devices are\n            aarch64). More on Jetson devices here:\n            https://www.nvidia.com/en-us/autonomous-machines/embedded-systems/\n\n            NOTE: These architectures are only built upon request.\n          '';\n          type = {\n            _type = \"option-type\";\n            check = &lt;function&gt;;\n            deprecationMessage = null;\n            description = \"one of true, false\";\n            descriptionClass = \"conjunction\";\n            emptyValue = { };\n            functor = {\n              binOp = &lt;function&gt;;\n              name = \"enum\";\n              payload = [\n                true\n                false\n              ];\n              type = &lt;function&gt;;\n              wrapped = null;\n            };\n            getSubModules = null;\n            getSubOptions = &lt;function&gt;;\n            merge = &lt;function&gt;;\n            name = \"enum\";\n            nestedTypes = { };\n            substSubModules = &lt;function&gt;;\n            typeMerge = &lt;function&gt;;\n          };\n        };\n        maxCudaVersion = {\n          _type = \"option\";\n          description = \"The maximum (exclusive) CUDA version that supports this GPU. null means there is no maximum.\";\n          example = \"10.2\";\n          type = {\n            _type = \"option-type\";\n            check = &lt;function&gt;;\n            deprecationMessage = null;\n            description = \"null or A version number with a major and minor component.\";\n            descriptionClass = \"conjunction\";\n            emptyValue = {\n              value = null;\n            };\n            functor = {\n              binOp = &lt;function&gt;;\n              name = \"nullOr\";\n              payload = null;\n              type = &lt;function&gt;;\n              wrapped = {\n                _type = \"option-type\";\n                check = &lt;function&gt;;\n                deprecationMessage = null;\n                description = \"A version number with a major and minor component.\";\n                descriptionClass = \"noun\";\n                emptyValue = { };\n                functor = {\n                  binOp = &lt;function&gt;;\n                  name = \"strMatching \\\"^([[:digit:]]+)\\\\\\\\.([[:digit:]]+)\\\\$\\\"\";\n                  payload = null;\n                  type = null;\n                  wrapped = null;\n                };\n                getSubModules = null;\n                getSubOptions = &lt;function&gt;;\n                merge = &lt;function&gt;;\n                name = \"majorMinorVersion\";\n                nestedTypes = { };\n                substSubModules = &lt;function&gt;;\n                typeMerge = &lt;function&gt;;\n              };\n            };\n            getSubModules = null;\n            getSubOptions = &lt;function&gt;;\n            merge = &lt;function&gt;;\n            name = \"nullOr\";\n            nestedTypes = {\n              elemType = {\n                _type = \"option-type\";\n                check = &lt;function&gt;;\n                deprecationMessage = null;\n                description = \"A version number with a major and minor component.\";\n                descriptionClass = \"noun\";\n                emptyValue = { };\n                functor = {\n                  binOp = &lt;function&gt;;\n                  name = \"strMatching \\\"^([[:digit:]]+)\\\\\\\\.([[:digit:]]+)\\\\$\\\"\";\n                  payload = null;\n                  type = null;\n                  wrapped = null;\n                };\n                getSubModules = null;\n                getSubOptions = &lt;function&gt;;\n                merge = &lt;function&gt;;\n                name = \"majorMinorVersion\";\n                nestedTypes = { };\n                substSubModules = &lt;function&gt;;\n                typeMerge = &lt;function&gt;;\n              };\n            };\n            substSubModules = &lt;function&gt;;\n            typeMerge = &lt;function&gt;;\n          };\n        };\n        minCudaVersion = {\n          _type = \"option\";\n          description = \"The minimum (inclusive) CUDA version that supports this GPU.\";\n          example = \"10.0\";\n          type = {\n            _type = \"option-type\";\n            check = &lt;function&gt;;\n            deprecationMessage = null;\n            description = \"A version number with a major and minor component.\";\n            descriptionClass = \"noun\";\n            emptyValue = { };\n            functor = {\n              binOp = &lt;function&gt;;\n              name = \"strMatching \\\"^([[:digit:]]+)\\\\\\\\.([[:digit:]]+)\\\\$\\\"\";\n              payload = null;\n              type = null;\n              wrapped = null;\n            };\n            getSubModules = null;\n            getSubOptions = &lt;function&gt;;\n            merge = &lt;function&gt;;\n            name = \"majorMinorVersion\";\n            nestedTypes = { };\n            substSubModules = &lt;function&gt;;\n            typeMerge = &lt;function&gt;;\n          };\n        };\n      };\n    }\n    {\n      options = {\n        isJetson = {\n          _type = \"option\";\n          type = {\n            _type = \"option-type\";\n            check = &lt;function&gt;;\n            deprecationMessage = null;\n            description = \"value true (singular enum)\";\n            descriptionClass = \"noun\";\n            emptyValue = { };\n            functor = {\n              binOp = &lt;function&gt;;\n              name = \"enum\";\n              payload = [\n                true\n              ];\n              type = &lt;function&gt;;\n              wrapped = null;\n            };\n            getSubModules = null;\n            getSubOptions = &lt;function&gt;;\n            merge = &lt;function&gt;;\n            name = \"enum\";\n            nestedTypes = { };\n            substSubModules = &lt;function&gt;;\n            typeMerge = &lt;function&gt;;\n          };\n        };\n      };\n    }\n  ];\n  getSubOptions = &lt;function&gt;;\n  merge = &lt;function&gt;;\n  name = \"submodule\";\n  nestedTypes = { };\n  substSubModules = &lt;function&gt;;\n  typeMerge = &lt;function&gt;;\n}\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/generic/data/gpus</p>","text":""},{"location":"#generictypeslibsoname","title":"generic.types.libSoName <p>The name of a shared object file.</p> <p>Type: optionType</p> <p>Default:</p> <pre><code>{\n  _type = \"option-type\";\n  check = &lt;function&gt;;\n  deprecationMessage = null;\n  description = \"The name of a shared object file.\";\n  descriptionClass = \"noun\";\n  emptyValue = { };\n  functor = {\n    binOp = &lt;function&gt;;\n    name = \"strMatching \\\".*\\\\\\\\.so(\\\\\\\\.[[:digit:]]+)*\\\\$\\\"\";\n    payload = null;\n    type = null;\n    wrapped = null;\n  };\n  getSubModules = null;\n  getSubOptions = &lt;function&gt;;\n  merge = &lt;function&gt;;\n  name = \"libSoName\";\n  nestedTypes = { };\n  substSubModules = &lt;function&gt;;\n  typeMerge = &lt;function&gt;;\n}\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/generic/types.nix</p>","text":""},{"location":"#generictypesmajorminorpatchbuildversion","title":"generic.types.majorMinorPatchBuildVersion <p>A version number with a major, minor, patch, and build component.</p> <p>Type: optionType</p> <p>Default:</p> <pre><code>{\n  _type = \"option-type\";\n  check = &lt;function&gt;;\n  deprecationMessage = null;\n  description = \"A version number with a major, minor, patch, and build component.\";\n  descriptionClass = \"noun\";\n  emptyValue = { };\n  functor = {\n    binOp = &lt;function&gt;;\n    name = \"strMatching \\\"^([[:digit:]]+)\\\\\\\\.([[:digit:]]+)\\\\\\\\.([[:digit:]]+)\\\\\\\\.([[:digit:]]+)\\\\$\\\"\";\n    payload = null;\n    type = null;\n    wrapped = null;\n  };\n  getSubModules = null;\n  getSubOptions = &lt;function&gt;;\n  merge = &lt;function&gt;;\n  name = \"majorMinorPatchBuildVersion\";\n  nestedTypes = { };\n  substSubModules = &lt;function&gt;;\n  typeMerge = &lt;function&gt;;\n}\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/generic/types.nix</p>","text":""},{"location":"#generictypesmajorminorpatchversion","title":"generic.types.majorMinorPatchVersion <p>A version number with a major, minor, and patch component.</p> <p>Type: optionType</p> <p>Default:</p> <pre><code>{\n  _type = \"option-type\";\n  check = &lt;function&gt;;\n  deprecationMessage = null;\n  description = \"A version number with a major, minor, and patch component.\";\n  descriptionClass = \"noun\";\n  emptyValue = { };\n  functor = {\n    binOp = &lt;function&gt;;\n    name = \"strMatching \\\"^([[:digit:]]+)\\\\\\\\.([[:digit:]]+)\\\\\\\\.([[:digit:]]+)\\\\$\\\"\";\n    payload = null;\n    type = null;\n    wrapped = null;\n  };\n  getSubModules = null;\n  getSubOptions = &lt;function&gt;;\n  merge = &lt;function&gt;;\n  name = \"majorMinorPatchVersion\";\n  nestedTypes = { };\n  substSubModules = &lt;function&gt;;\n  typeMerge = &lt;function&gt;;\n}\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/generic/types.nix</p>","text":""},{"location":"#generictypesmajorminorversion","title":"generic.types.majorMinorVersion <p>A version number with a major and minor component.</p> <p>Type: optionType</p> <p>Default:</p> <pre><code>{\n  _type = \"option-type\";\n  check = &lt;function&gt;;\n  deprecationMessage = null;\n  description = \"A version number with a major and minor component.\";\n  descriptionClass = \"noun\";\n  emptyValue = { };\n  functor = {\n    binOp = &lt;function&gt;;\n    name = \"strMatching \\\"^([[:digit:]]+)\\\\\\\\.([[:digit:]]+)\\\\$\\\"\";\n    payload = null;\n    type = null;\n    wrapped = null;\n  };\n  getSubModules = null;\n  getSubOptions = &lt;function&gt;;\n  merge = &lt;function&gt;;\n  name = \"majorMinorVersion\";\n  nestedTypes = { };\n  substSubModules = &lt;function&gt;;\n  typeMerge = &lt;function&gt;;\n}\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/generic/types.nix</p>","text":""},{"location":"#generictypesmajorversion","title":"generic.types.majorVersion <p>A version number with a major component.</p> <p>Type: optionType</p> <p>Default:</p> <pre><code>{\n  _type = \"option-type\";\n  check = &lt;function&gt;;\n  deprecationMessage = null;\n  description = \"A version number with a major component.\";\n  descriptionClass = \"noun\";\n  emptyValue = { };\n  functor = {\n    binOp = &lt;function&gt;;\n    name = \"strMatching \\\"^([[:digit:]]+)\\\\$\\\"\";\n    payload = null;\n    type = null;\n    wrapped = null;\n  };\n  getSubModules = null;\n  getSubOptions = &lt;function&gt;;\n  merge = &lt;function&gt;;\n  name = \"majorVersion\";\n  nestedTypes = { };\n  substSubModules = &lt;function&gt;;\n  typeMerge = &lt;function&gt;;\n}\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/generic/types.nix</p>","text":""},{"location":"#generictypesnonjetsongpu","title":"generic.types.nonJetsonGpu <p>A GPU that is not part of NVIDIA\u2019s Jetson line of embedded computers</p> <p>Type: optionType</p> <p>Default:</p> <pre><code>{\n  _type = \"option-type\";\n  check = &lt;function&gt;;\n  deprecationMessage = null;\n  description = \"submodule\";\n  descriptionClass = null;\n  emptyValue = {\n    value = { };\n  };\n  functor = {\n    binOp = &lt;function&gt;;\n    name = \"submodule\";\n    payload = {\n      class = null;\n      description = null;\n      modules = [\n        {\n          options = {\n            archName = {\n              _type = \"option\";\n              description = \"Name of the microarchitecture\";\n              example = \"Kepler\";\n              type = {\n                _type = \"option-type\";\n                check = &lt;function&gt;;\n                deprecationMessage = null;\n                description = \"A CUDA architecture name, like Ampere or Ada.\";\n                descriptionClass = \"noun\";\n                emptyValue = { };\n                functor = {\n                  binOp = &lt;function&gt;;\n                  name = \"strMatching \\\"^[[:alpha:]]+\\\\$\\\"\";\n                  payload = null;\n                  type = null;\n                  wrapped = null;\n                };\n                getSubModules = null;\n                getSubOptions = &lt;function&gt;;\n                merge = &lt;function&gt;;\n                name = \"archName\";\n                nestedTypes = { };\n                substSubModules = &lt;function&gt;;\n                typeMerge = &lt;function&gt;;\n              };\n            };\n            computeCapability = {\n              _type = \"option\";\n              description = \"Compute capability of the GPU\";\n              example = \"3.0\";\n              type = {\n                _type = \"option-type\";\n                check = &lt;function&gt;;\n                deprecationMessage = null;\n                description = \"A CUDA capability version.\";\n                descriptionClass = \"noun\";\n                emptyValue = { };\n                functor = {\n                  binOp = &lt;function&gt;;\n                  name = \"strMatching \\\"^[[:digit:]]+\\\\\\\\.[[:digit:]]+[a-z]?\\\\$\\\"\";\n                  payload = null;\n                  type = null;\n                  wrapped = null;\n                };\n                getSubModules = null;\n                getSubOptions = &lt;function&gt;;\n                merge = &lt;function&gt;;\n                name = \"cudaCapability\";\n                nestedTypes = { };\n                substSubModules = &lt;function&gt;;\n                typeMerge = &lt;function&gt;;\n              };\n            };\n            dontDefaultAfter = {\n              _type = \"option\";\n              description = ''\n                The CUDA version after which to exclude this GPU from the list of default capabilities\n                we build. null means we always include this GPU in the default capabilities if it is\n                supported.\n              '';\n              example = \"10.2\";\n              type = {\n                _type = \"option-type\";\n                check = &lt;function&gt;;\n                deprecationMessage = null;\n                description = \"null or A version number with a major and minor component.\";\n                descriptionClass = \"conjunction\";\n                emptyValue = {\n                  value = null;\n                };\n                functor = {\n                  binOp = &lt;function&gt;;\n                  name = \"nullOr\";\n                  payload = null;\n                  type = &lt;function&gt;;\n                  wrapped = {\n                    _type = \"option-type\";\n                    check = &lt;function&gt;;\n                    deprecationMessage = null;\n                    description = \"A version number with a major and minor component.\";\n                    descriptionClass = \"noun\";\n                    emptyValue = { };\n                    functor = {\n                      binOp = &lt;function&gt;;\n                      name = \"strMatching \\\"^([[:digit:]]+)\\\\\\\\.([[:digit:]]+)\\\\$\\\"\";\n                      payload = null;\n                      type = null;\n                      wrapped = null;\n                    };\n                    getSubModules = null;\n                    getSubOptions = &lt;function&gt;;\n                    merge = &lt;function&gt;;\n                    name = \"majorMinorVersion\";\n                    nestedTypes = { };\n                    substSubModules = &lt;function&gt;;\n                    typeMerge = &lt;function&gt;;\n                  };\n                };\n                getSubModules = null;\n                getSubOptions = &lt;function&gt;;\n                merge = &lt;function&gt;;\n                name = \"nullOr\";\n                nestedTypes = {\n                  elemType = {\n                    _type = \"option-type\";\n                    check = &lt;function&gt;;\n                    deprecationMessage = null;\n                    description = \"A version number with a major and minor component.\";\n                    descriptionClass = \"noun\";\n                    emptyValue = { };\n                    functor = {\n                      binOp = &lt;function&gt;;\n                      name = \"strMatching \\\"^([[:digit:]]+)\\\\\\\\.([[:digit:]]+)\\\\$\\\"\";\n                      payload = null;\n                      type = null;\n                      wrapped = null;\n                    };\n                    getSubModules = null;\n                    getSubOptions = &lt;function&gt;;\n                    merge = &lt;function&gt;;\n                    name = \"majorMinorVersion\";\n                    nestedTypes = { };\n                    substSubModules = &lt;function&gt;;\n                    typeMerge = &lt;function&gt;;\n                  };\n                };\n                substSubModules = &lt;function&gt;;\n                typeMerge = &lt;function&gt;;\n              };\n            };\n            isJetson = {\n              _type = \"option\";\n              description = ''\n                Whether a GPU is part of NVIDIA's line of Jetson embedded computers.\n\n                This field is notable because it tells us what architecture to build for (as Jetson devices are\n                aarch64). More on Jetson devices here:\n                https://www.nvidia.com/en-us/autonomous-machines/embedded-systems/\n\n                NOTE: These architectures are only built upon request.\n              '';\n              type = {\n                _type = \"option-type\";\n                check = &lt;function&gt;;\n                deprecationMessage = null;\n                description = \"one of true, false\";\n                descriptionClass = \"conjunction\";\n                emptyValue = { };\n                functor = {\n                  binOp = &lt;function&gt;;\n                  name = \"enum\";\n                  payload = [\n                    true\n                    false\n                  ];\n                  type = &lt;function&gt;;\n                  wrapped = null;\n                };\n                getSubModules = null;\n                getSubOptions = &lt;function&gt;;\n                merge = &lt;function&gt;;\n                name = \"enum\";\n                nestedTypes = { };\n                substSubModules = &lt;function&gt;;\n                typeMerge = &lt;function&gt;;\n              };\n            };\n            maxCudaVersion = {\n              _type = \"option\";\n              description = \"The maximum (exclusive) CUDA version that supports this GPU. null means there is no maximum.\";\n              example = \"10.2\";\n              type = {\n                _type = \"option-type\";\n                check = &lt;function&gt;;\n                deprecationMessage = null;\n                description = \"null or A version number with a major and minor component.\";\n                descriptionClass = \"conjunction\";\n                emptyValue = {\n                  value = null;\n                };\n                functor = {\n                  binOp = &lt;function&gt;;\n                  name = \"nullOr\";\n                  payload = null;\n                  type = &lt;function&gt;;\n                  wrapped = {\n                    _type = \"option-type\";\n                    check = &lt;function&gt;;\n                    deprecationMessage = null;\n                    description = \"A version number with a major and minor component.\";\n                    descriptionClass = \"noun\";\n                    emptyValue = { };\n                    functor = {\n                      binOp = &lt;function&gt;;\n                      name = \"strMatching \\\"^([[:digit:]]+)\\\\\\\\.([[:digit:]]+)\\\\$\\\"\";\n                      payload = null;\n                      type = null;\n                      wrapped = null;\n                    };\n                    getSubModules = null;\n                    getSubOptions = &lt;function&gt;;\n                    merge = &lt;function&gt;;\n                    name = \"majorMinorVersion\";\n                    nestedTypes = { };\n                    substSubModules = &lt;function&gt;;\n                    typeMerge = &lt;function&gt;;\n                  };\n                };\n                getSubModules = null;\n                getSubOptions = &lt;function&gt;;\n                merge = &lt;function&gt;;\n                name = \"nullOr\";\n                nestedTypes = {\n                  elemType = {\n                    _type = \"option-type\";\n                    check = &lt;function&gt;;\n                    deprecationMessage = null;\n                    description = \"A version number with a major and minor component.\";\n                    descriptionClass = \"noun\";\n                    emptyValue = { };\n                    functor = {\n                      binOp = &lt;function&gt;;\n                      name = \"strMatching \\\"^([[:digit:]]+)\\\\\\\\.([[:digit:]]+)\\\\$\\\"\";\n                      payload = null;\n                      type = null;\n                      wrapped = null;\n                    };\n                    getSubModules = null;\n                    getSubOptions = &lt;function&gt;;\n                    merge = &lt;function&gt;;\n                    name = \"majorMinorVersion\";\n                    nestedTypes = { };\n                    substSubModules = &lt;function&gt;;\n                    typeMerge = &lt;function&gt;;\n                  };\n                };\n                substSubModules = &lt;function&gt;;\n                typeMerge = &lt;function&gt;;\n              };\n            };\n            minCudaVersion = {\n              _type = \"option\";\n              description = \"The minimum (inclusive) CUDA version that supports this GPU.\";\n              example = \"10.0\";\n              type = {\n                _type = \"option-type\";\n                check = &lt;function&gt;;\n                deprecationMessage = null;\n                description = \"A version number with a major and minor component.\";\n                descriptionClass = \"noun\";\n                emptyValue = { };\n                functor = {\n                  binOp = &lt;function&gt;;\n                  name = \"strMatching \\\"^([[:digit:]]+)\\\\\\\\.([[:digit:]]+)\\\\$\\\"\";\n                  payload = null;\n                  type = null;\n                  wrapped = null;\n                };\n                getSubModules = null;\n                getSubOptions = &lt;function&gt;;\n                merge = &lt;function&gt;;\n                name = \"majorMinorVersion\";\n                nestedTypes = { };\n                substSubModules = &lt;function&gt;;\n                typeMerge = &lt;function&gt;;\n              };\n            };\n          };\n        }\n        {\n          options = {\n            isJetson = {\n              _type = \"option\";\n              type = {\n                _type = \"option-type\";\n                check = &lt;function&gt;;\n                deprecationMessage = null;\n                description = \"value false (singular enum)\";\n                descriptionClass = \"noun\";\n                emptyValue = { };\n                functor = {\n                  binOp = &lt;function&gt;;\n                  name = \"enum\";\n                  payload = [\n                    false\n                  ];\n                  type = &lt;function&gt;;\n                  wrapped = null;\n                };\n                getSubModules = null;\n                getSubOptions = &lt;function&gt;;\n                merge = &lt;function&gt;;\n                name = \"enum\";\n                nestedTypes = { };\n                substSubModules = &lt;function&gt;;\n                typeMerge = &lt;function&gt;;\n              };\n            };\n          };\n        }\n      ];\n      shorthandOnlyDefinesConfig = false;\n      specialArgs = { };\n    };\n    type = &lt;function, args: {class?, description?, modules, shorthandOnlyDefinesConfig?, specialArgs?}&gt;;\n    wrapped = null;\n  };\n  getSubModules = [\n    {\n      options = {\n        archName = {\n          _type = \"option\";\n          description = \"Name of the microarchitecture\";\n          example = \"Kepler\";\n          type = {\n            _type = \"option-type\";\n            check = &lt;function&gt;;\n            deprecationMessage = null;\n            description = \"A CUDA architecture name, like Ampere or Ada.\";\n            descriptionClass = \"noun\";\n            emptyValue = { };\n            functor = {\n              binOp = &lt;function&gt;;\n              name = \"strMatching \\\"^[[:alpha:]]+\\\\$\\\"\";\n              payload = null;\n              type = null;\n              wrapped = null;\n            };\n            getSubModules = null;\n            getSubOptions = &lt;function&gt;;\n            merge = &lt;function&gt;;\n            name = \"archName\";\n            nestedTypes = { };\n            substSubModules = &lt;function&gt;;\n            typeMerge = &lt;function&gt;;\n          };\n        };\n        computeCapability = {\n          _type = \"option\";\n          description = \"Compute capability of the GPU\";\n          example = \"3.0\";\n          type = {\n            _type = \"option-type\";\n            check = &lt;function&gt;;\n            deprecationMessage = null;\n            description = \"A CUDA capability version.\";\n            descriptionClass = \"noun\";\n            emptyValue = { };\n            functor = {\n              binOp = &lt;function&gt;;\n              name = \"strMatching \\\"^[[:digit:]]+\\\\\\\\.[[:digit:]]+[a-z]?\\\\$\\\"\";\n              payload = null;\n              type = null;\n              wrapped = null;\n            };\n            getSubModules = null;\n            getSubOptions = &lt;function&gt;;\n            merge = &lt;function&gt;;\n            name = \"cudaCapability\";\n            nestedTypes = { };\n            substSubModules = &lt;function&gt;;\n            typeMerge = &lt;function&gt;;\n          };\n        };\n        dontDefaultAfter = {\n          _type = \"option\";\n          description = ''\n            The CUDA version after which to exclude this GPU from the list of default capabilities\n            we build. null means we always include this GPU in the default capabilities if it is\n            supported.\n          '';\n          example = \"10.2\";\n          type = {\n            _type = \"option-type\";\n            check = &lt;function&gt;;\n            deprecationMessage = null;\n            description = \"null or A version number with a major and minor component.\";\n            descriptionClass = \"conjunction\";\n            emptyValue = {\n              value = null;\n            };\n            functor = {\n              binOp = &lt;function&gt;;\n              name = \"nullOr\";\n              payload = null;\n              type = &lt;function&gt;;\n              wrapped = {\n                _type = \"option-type\";\n                check = &lt;function&gt;;\n                deprecationMessage = null;\n                description = \"A version number with a major and minor component.\";\n                descriptionClass = \"noun\";\n                emptyValue = { };\n                functor = {\n                  binOp = &lt;function&gt;;\n                  name = \"strMatching \\\"^([[:digit:]]+)\\\\\\\\.([[:digit:]]+)\\\\$\\\"\";\n                  payload = null;\n                  type = null;\n                  wrapped = null;\n                };\n                getSubModules = null;\n                getSubOptions = &lt;function&gt;;\n                merge = &lt;function&gt;;\n                name = \"majorMinorVersion\";\n                nestedTypes = { };\n                substSubModules = &lt;function&gt;;\n                typeMerge = &lt;function&gt;;\n              };\n            };\n            getSubModules = null;\n            getSubOptions = &lt;function&gt;;\n            merge = &lt;function&gt;;\n            name = \"nullOr\";\n            nestedTypes = {\n              elemType = {\n                _type = \"option-type\";\n                check = &lt;function&gt;;\n                deprecationMessage = null;\n                description = \"A version number with a major and minor component.\";\n                descriptionClass = \"noun\";\n                emptyValue = { };\n                functor = {\n                  binOp = &lt;function&gt;;\n                  name = \"strMatching \\\"^([[:digit:]]+)\\\\\\\\.([[:digit:]]+)\\\\$\\\"\";\n                  payload = null;\n                  type = null;\n                  wrapped = null;\n                };\n                getSubModules = null;\n                getSubOptions = &lt;function&gt;;\n                merge = &lt;function&gt;;\n                name = \"majorMinorVersion\";\n                nestedTypes = { };\n                substSubModules = &lt;function&gt;;\n                typeMerge = &lt;function&gt;;\n              };\n            };\n            substSubModules = &lt;function&gt;;\n            typeMerge = &lt;function&gt;;\n          };\n        };\n        isJetson = {\n          _type = \"option\";\n          description = ''\n            Whether a GPU is part of NVIDIA's line of Jetson embedded computers.\n\n            This field is notable because it tells us what architecture to build for (as Jetson devices are\n            aarch64). More on Jetson devices here:\n            https://www.nvidia.com/en-us/autonomous-machines/embedded-systems/\n\n            NOTE: These architectures are only built upon request.\n          '';\n          type = {\n            _type = \"option-type\";\n            check = &lt;function&gt;;\n            deprecationMessage = null;\n            description = \"one of true, false\";\n            descriptionClass = \"conjunction\";\n            emptyValue = { };\n            functor = {\n              binOp = &lt;function&gt;;\n              name = \"enum\";\n              payload = [\n                true\n                false\n              ];\n              type = &lt;function&gt;;\n              wrapped = null;\n            };\n            getSubModules = null;\n            getSubOptions = &lt;function&gt;;\n            merge = &lt;function&gt;;\n            name = \"enum\";\n            nestedTypes = { };\n            substSubModules = &lt;function&gt;;\n            typeMerge = &lt;function&gt;;\n          };\n        };\n        maxCudaVersion = {\n          _type = \"option\";\n          description = \"The maximum (exclusive) CUDA version that supports this GPU. null means there is no maximum.\";\n          example = \"10.2\";\n          type = {\n            _type = \"option-type\";\n            check = &lt;function&gt;;\n            deprecationMessage = null;\n            description = \"null or A version number with a major and minor component.\";\n            descriptionClass = \"conjunction\";\n            emptyValue = {\n              value = null;\n            };\n            functor = {\n              binOp = &lt;function&gt;;\n              name = \"nullOr\";\n              payload = null;\n              type = &lt;function&gt;;\n              wrapped = {\n                _type = \"option-type\";\n                check = &lt;function&gt;;\n                deprecationMessage = null;\n                description = \"A version number with a major and minor component.\";\n                descriptionClass = \"noun\";\n                emptyValue = { };\n                functor = {\n                  binOp = &lt;function&gt;;\n                  name = \"strMatching \\\"^([[:digit:]]+)\\\\\\\\.([[:digit:]]+)\\\\$\\\"\";\n                  payload = null;\n                  type = null;\n                  wrapped = null;\n                };\n                getSubModules = null;\n                getSubOptions = &lt;function&gt;;\n                merge = &lt;function&gt;;\n                name = \"majorMinorVersion\";\n                nestedTypes = { };\n                substSubModules = &lt;function&gt;;\n                typeMerge = &lt;function&gt;;\n              };\n            };\n            getSubModules = null;\n            getSubOptions = &lt;function&gt;;\n            merge = &lt;function&gt;;\n            name = \"nullOr\";\n            nestedTypes = {\n              elemType = {\n                _type = \"option-type\";\n                check = &lt;function&gt;;\n                deprecationMessage = null;\n                description = \"A version number with a major and minor component.\";\n                descriptionClass = \"noun\";\n                emptyValue = { };\n                functor = {\n                  binOp = &lt;function&gt;;\n                  name = \"strMatching \\\"^([[:digit:]]+)\\\\\\\\.([[:digit:]]+)\\\\$\\\"\";\n                  payload = null;\n                  type = null;\n                  wrapped = null;\n                };\n                getSubModules = null;\n                getSubOptions = &lt;function&gt;;\n                merge = &lt;function&gt;;\n                name = \"majorMinorVersion\";\n                nestedTypes = { };\n                substSubModules = &lt;function&gt;;\n                typeMerge = &lt;function&gt;;\n              };\n            };\n            substSubModules = &lt;function&gt;;\n            typeMerge = &lt;function&gt;;\n          };\n        };\n        minCudaVersion = {\n          _type = \"option\";\n          description = \"The minimum (inclusive) CUDA version that supports this GPU.\";\n          example = \"10.0\";\n          type = {\n            _type = \"option-type\";\n            check = &lt;function&gt;;\n            deprecationMessage = null;\n            description = \"A version number with a major and minor component.\";\n            descriptionClass = \"noun\";\n            emptyValue = { };\n            functor = {\n              binOp = &lt;function&gt;;\n              name = \"strMatching \\\"^([[:digit:]]+)\\\\\\\\.([[:digit:]]+)\\\\$\\\"\";\n              payload = null;\n              type = null;\n              wrapped = null;\n            };\n            getSubModules = null;\n            getSubOptions = &lt;function&gt;;\n            merge = &lt;function&gt;;\n            name = \"majorMinorVersion\";\n            nestedTypes = { };\n            substSubModules = &lt;function&gt;;\n            typeMerge = &lt;function&gt;;\n          };\n        };\n      };\n    }\n    {\n      options = {\n        isJetson = {\n          _type = \"option\";\n          type = {\n            _type = \"option-type\";\n            check = &lt;function&gt;;\n            deprecationMessage = null;\n            description = \"value false (singular enum)\";\n            descriptionClass = \"noun\";\n            emptyValue = { };\n            functor = {\n              binOp = &lt;function&gt;;\n              name = \"enum\";\n              payload = [\n                false\n              ];\n              type = &lt;function&gt;;\n              wrapped = null;\n            };\n            getSubModules = null;\n            getSubOptions = &lt;function&gt;;\n            merge = &lt;function&gt;;\n            name = \"enum\";\n            nestedTypes = { };\n            substSubModules = &lt;function&gt;;\n            typeMerge = &lt;function&gt;;\n          };\n        };\n      };\n    }\n  ];\n  getSubOptions = &lt;function&gt;;\n  merge = &lt;function&gt;;\n  name = \"submodule\";\n  nestedTypes = { };\n  substSubModules = &lt;function&gt;;\n  typeMerge = &lt;function&gt;;\n}\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/generic/data/gpus</p>","text":""},{"location":"#generictypesnvcccompatibilities","title":"generic.types.nvccCompatibilities <p>Mapping of CUDA version to known NVCC compatibilities with GCC and Clang</p> <p>Taken from https://docs.nvidia.com/cuda/cuda-installation-guide-linux/index.html#host-compiler-support-policy</p> <p>NVCC performs a version check on the host compiler\u2019s major version and so newer minor versions of the compilers listed below will be supported, but major versions falling outside the range will not be supported.</p> <p>NOTE: These constraints don\u2019t apply to Jetson, which uses something else. NOTE: NVIDIA can and will add support for newer compilers even during patch releases. E.g.: CUDA 12.2.1 maxxed out with support for Clang 15.0; 12.2.2 added support for Clang 16.0. NOTE: Because all platforms NVIDIA supports use GCC and Clang, we omit the architectures here.</p> <p>Type: optionType</p> <p>Default:</p> <pre><code>{\n  _type = \"option-type\";\n  check = &lt;function&gt;;\n  deprecationMessage = null;\n  description = \"attribute set of (submodule)\";\n  descriptionClass = \"composite\";\n  emptyValue = {\n    value = { };\n  };\n  functor = {\n    binOp = &lt;function&gt;;\n    name = \"attrsOf\";\n    payload = null;\n    type = &lt;function&gt;;\n    wrapped = {\n      _type = \"option-type\";\n      check = &lt;function&gt;;\n      deprecationMessage = null;\n      description = \"submodule\";\n      descriptionClass = null;\n      emptyValue = {\n        value = { };\n      };\n      functor = {\n        binOp = &lt;function&gt;;\n        name = \"submodule\";\n        payload = {\n          class = null;\n          description = null;\n          modules = [\n            {\n              options = {\n                clangMaxMajorVersion = {\n                  _type = \"option\";\n                  description = \"Maximum Clang major version to support this CUDA version\";\n                  type = {\n                    _type = \"option-type\";\n                    check = &lt;function&gt;;\n                    deprecationMessage = null;\n                    description = \"A version number with a major component.\";\n                    descriptionClass = \"noun\";\n                    emptyValue = { };\n                    functor = {\n                      binOp = &lt;function&gt;;\n                      name = \"strMatching \\\"^([[:digit:]]+)\\\\$\\\"\";\n                      payload = null;\n                      type = null;\n                      wrapped = null;\n                    };\n                    getSubModules = null;\n                    getSubOptions = &lt;function&gt;;\n                    merge = &lt;function&gt;;\n                    name = \"majorVersion\";\n                    nestedTypes = { };\n                    substSubModules = &lt;function&gt;;\n                    typeMerge = &lt;function&gt;;\n                  };\n                };\n                clangMinMajorVersion = {\n                  _type = \"option\";\n                  description = \"Minimum Clang major version to support this CUDA version\";\n                  type = {\n                    _type = \"option-type\";\n                    check = &lt;function&gt;;\n                    deprecationMessage = null;\n                    description = \"A version number with a major component.\";\n                    descriptionClass = \"noun\";\n                    emptyValue = { };\n                    functor = {\n                      binOp = &lt;function&gt;;\n                      name = \"strMatching \\\"^([[:digit:]]+)\\\\$\\\"\";\n                      payload = null;\n                      type = null;\n                      wrapped = null;\n                    };\n                    getSubModules = null;\n                    getSubOptions = &lt;function&gt;;\n                    merge = &lt;function&gt;;\n                    name = \"majorVersion\";\n                    nestedTypes = { };\n                    substSubModules = &lt;function&gt;;\n                    typeMerge = &lt;function&gt;;\n                  };\n                };\n                gccMaxMajorVersion = {\n                  _type = \"option\";\n                  description = \"Maximum GCC major version to support this CUDA version\";\n                  type = {\n                    _type = \"option-type\";\n                    check = &lt;function&gt;;\n                    deprecationMessage = null;\n                    description = \"A version number with a major component.\";\n                    descriptionClass = \"noun\";\n                    emptyValue = { };\n                    functor = {\n                      binOp = &lt;function&gt;;\n                      name = \"strMatching \\\"^([[:digit:]]+)\\\\$\\\"\";\n                      payload = null;\n                      type = null;\n                      wrapped = null;\n                    };\n                    getSubModules = null;\n                    getSubOptions = &lt;function&gt;;\n                    merge = &lt;function&gt;;\n                    name = \"majorVersion\";\n                    nestedTypes = { };\n                    substSubModules = &lt;function&gt;;\n                    typeMerge = &lt;function&gt;;\n                  };\n                };\n                gccMinMajorVersion = {\n                  _type = \"option\";\n                  description = \"Minimum GCC major version to support this CUDA version\";\n                  type = {\n                    _type = \"option-type\";\n                    check = &lt;function&gt;;\n                    deprecationMessage = null;\n                    description = \"A version number with a major component.\";\n                    descriptionClass = \"noun\";\n                    emptyValue = { };\n                    functor = {\n                      binOp = &lt;function&gt;;\n                      name = \"strMatching \\\"^([[:digit:]]+)\\\\$\\\"\";\n                      payload = null;\n                      type = null;\n                      wrapped = null;\n                    };\n                    getSubModules = null;\n                    getSubOptions = &lt;function&gt;;\n                    merge = &lt;function&gt;;\n                    name = \"majorVersion\";\n                    nestedTypes = { };\n                    substSubModules = &lt;function&gt;;\n                    typeMerge = &lt;function&gt;;\n                  };\n                };\n              };\n            }\n          ];\n          shorthandOnlyDefinesConfig = false;\n          specialArgs = { };\n        };\n        type = &lt;function, args: {class?, description?, modules, shorthandOnlyDefinesConfig?, specialArgs?}&gt;;\n        wrapped = null;\n      };\n      getSubModules = [\n        {\n          options = {\n            clangMaxMajorVersion = {\n              _type = \"option\";\n              description = \"Maximum Clang major version to support this CUDA version\";\n              type = {\n                _type = \"option-type\";\n                check = &lt;function&gt;;\n                deprecationMessage = null;\n                description = \"A version number with a major component.\";\n                descriptionClass = \"noun\";\n                emptyValue = { };\n                functor = {\n                  binOp = &lt;function&gt;;\n                  name = \"strMatching \\\"^([[:digit:]]+)\\\\$\\\"\";\n                  payload = null;\n                  type = null;\n                  wrapped = null;\n                };\n                getSubModules = null;\n                getSubOptions = &lt;function&gt;;\n                merge = &lt;function&gt;;\n                name = \"majorVersion\";\n                nestedTypes = { };\n                substSubModules = &lt;function&gt;;\n                typeMerge = &lt;function&gt;;\n              };\n            };\n            clangMinMajorVersion = {\n              _type = \"option\";\n              description = \"Minimum Clang major version to support this CUDA version\";\n              type = {\n                _type = \"option-type\";\n                check = &lt;function&gt;;\n                deprecationMessage = null;\n                description = \"A version number with a major component.\";\n                descriptionClass = \"noun\";\n                emptyValue = { };\n                functor = {\n                  binOp = &lt;function&gt;;\n                  name = \"strMatching \\\"^([[:digit:]]+)\\\\$\\\"\";\n                  payload = null;\n                  type = null;\n                  wrapped = null;\n                };\n                getSubModules = null;\n                getSubOptions = &lt;function&gt;;\n                merge = &lt;function&gt;;\n                name = \"majorVersion\";\n                nestedTypes = { };\n                substSubModules = &lt;function&gt;;\n                typeMerge = &lt;function&gt;;\n              };\n            };\n            gccMaxMajorVersion = {\n              _type = \"option\";\n              description = \"Maximum GCC major version to support this CUDA version\";\n              type = {\n                _type = \"option-type\";\n                check = &lt;function&gt;;\n                deprecationMessage = null;\n                description = \"A version number with a major component.\";\n                descriptionClass = \"noun\";\n                emptyValue = { };\n                functor = {\n                  binOp = &lt;function&gt;;\n                  name = \"strMatching \\\"^([[:digit:]]+)\\\\$\\\"\";\n                  payload = null;\n                  type = null;\n                  wrapped = null;\n                };\n                getSubModules = null;\n                getSubOptions = &lt;function&gt;;\n                merge = &lt;function&gt;;\n                name = \"majorVersion\";\n                nestedTypes = { };\n                substSubModules = &lt;function&gt;;\n                typeMerge = &lt;function&gt;;\n              };\n            };\n            gccMinMajorVersion = {\n              _type = \"option\";\n              description = \"Minimum GCC major version to support this CUDA version\";\n              type = {\n                _type = \"option-type\";\n                check = &lt;function&gt;;\n                deprecationMessage = null;\n                description = \"A version number with a major component.\";\n                descriptionClass = \"noun\";\n                emptyValue = { };\n                functor = {\n                  binOp = &lt;function&gt;;\n                  name = \"strMatching \\\"^([[:digit:]]+)\\\\$\\\"\";\n                  payload = null;\n                  type = null;\n                  wrapped = null;\n                };\n                getSubModules = null;\n                getSubOptions = &lt;function&gt;;\n                merge = &lt;function&gt;;\n                name = \"majorVersion\";\n                nestedTypes = { };\n                substSubModules = &lt;function&gt;;\n                typeMerge = &lt;function&gt;;\n              };\n            };\n          };\n        }\n      ];\n      getSubOptions = &lt;function&gt;;\n      merge = &lt;function&gt;;\n      name = \"submodule\";\n      nestedTypes = { };\n      substSubModules = &lt;function&gt;;\n      typeMerge = &lt;function&gt;;\n    };\n  };\n  getSubModules = [\n    {\n      options = {\n        clangMaxMajorVersion = {\n          _type = \"option\";\n          description = \"Maximum Clang major version to support this CUDA version\";\n          type = {\n            _type = \"option-type\";\n            check = &lt;function&gt;;\n            deprecationMessage = null;\n            description = \"A version number with a major component.\";\n            descriptionClass = \"noun\";\n            emptyValue = { };\n            functor = {\n              binOp = &lt;function&gt;;\n              name = \"strMatching \\\"^([[:digit:]]+)\\\\$\\\"\";\n              payload = null;\n              type = null;\n              wrapped = null;\n            };\n            getSubModules = null;\n            getSubOptions = &lt;function&gt;;\n            merge = &lt;function&gt;;\n            name = \"majorVersion\";\n            nestedTypes = { };\n            substSubModules = &lt;function&gt;;\n            typeMerge = &lt;function&gt;;\n          };\n        };\n        clangMinMajorVersion = {\n          _type = \"option\";\n          description = \"Minimum Clang major version to support this CUDA version\";\n          type = {\n            _type = \"option-type\";\n            check = &lt;function&gt;;\n            deprecationMessage = null;\n            description = \"A version number with a major component.\";\n            descriptionClass = \"noun\";\n            emptyValue = { };\n            functor = {\n              binOp = &lt;function&gt;;\n              name = \"strMatching \\\"^([[:digit:]]+)\\\\$\\\"\";\n              payload = null;\n              type = null;\n              wrapped = null;\n            };\n            getSubModules = null;\n            getSubOptions = &lt;function&gt;;\n            merge = &lt;function&gt;;\n            name = \"majorVersion\";\n            nestedTypes = { };\n            substSubModules = &lt;function&gt;;\n            typeMerge = &lt;function&gt;;\n          };\n        };\n        gccMaxMajorVersion = {\n          _type = \"option\";\n          description = \"Maximum GCC major version to support this CUDA version\";\n          type = {\n            _type = \"option-type\";\n            check = &lt;function&gt;;\n            deprecationMessage = null;\n            description = \"A version number with a major component.\";\n            descriptionClass = \"noun\";\n            emptyValue = { };\n            functor = {\n              binOp = &lt;function&gt;;\n              name = \"strMatching \\\"^([[:digit:]]+)\\\\$\\\"\";\n              payload = null;\n              type = null;\n              wrapped = null;\n            };\n            getSubModules = null;\n            getSubOptions = &lt;function&gt;;\n            merge = &lt;function&gt;;\n            name = \"majorVersion\";\n            nestedTypes = { };\n            substSubModules = &lt;function&gt;;\n            typeMerge = &lt;function&gt;;\n          };\n        };\n        gccMinMajorVersion = {\n          _type = \"option\";\n          description = \"Minimum GCC major version to support this CUDA version\";\n          type = {\n            _type = \"option-type\";\n            check = &lt;function&gt;;\n            deprecationMessage = null;\n            description = \"A version number with a major component.\";\n            descriptionClass = \"noun\";\n            emptyValue = { };\n            functor = {\n              binOp = &lt;function&gt;;\n              name = \"strMatching \\\"^([[:digit:]]+)\\\\$\\\"\";\n              payload = null;\n              type = null;\n              wrapped = null;\n            };\n            getSubModules = null;\n            getSubOptions = &lt;function&gt;;\n            merge = &lt;function&gt;;\n            name = \"majorVersion\";\n            nestedTypes = { };\n            substSubModules = &lt;function&gt;;\n            typeMerge = &lt;function&gt;;\n          };\n        };\n      };\n    }\n  ];\n  getSubOptions = &lt;function&gt;;\n  merge = &lt;function&gt;;\n  name = \"attrsOf\";\n  nestedTypes = {\n    elemType = {\n      _type = \"option-type\";\n      check = &lt;function&gt;;\n      deprecationMessage = null;\n      description = \"submodule\";\n      descriptionClass = null;\n      emptyValue = {\n        value = { };\n      };\n      functor = {\n        binOp = &lt;function&gt;;\n        name = \"submodule\";\n        payload = {\n          class = null;\n          description = null;\n          modules = [\n            {\n              options = {\n                clangMaxMajorVersion = {\n                  _type = \"option\";\n                  description = \"Maximum Clang major version to support this CUDA version\";\n                  type = {\n                    _type = \"option-type\";\n                    check = &lt;function&gt;;\n                    deprecationMessage = null;\n                    description = \"A version number with a major component.\";\n                    descriptionClass = \"noun\";\n                    emptyValue = { };\n                    functor = {\n                      binOp = &lt;function&gt;;\n                      name = \"strMatching \\\"^([[:digit:]]+)\\\\$\\\"\";\n                      payload = null;\n                      type = null;\n                      wrapped = null;\n                    };\n                    getSubModules = null;\n                    getSubOptions = &lt;function&gt;;\n                    merge = &lt;function&gt;;\n                    name = \"majorVersion\";\n                    nestedTypes = { };\n                    substSubModules = &lt;function&gt;;\n                    typeMerge = &lt;function&gt;;\n                  };\n                };\n                clangMinMajorVersion = {\n                  _type = \"option\";\n                  description = \"Minimum Clang major version to support this CUDA version\";\n                  type = {\n                    _type = \"option-type\";\n                    check = &lt;function&gt;;\n                    deprecationMessage = null;\n                    description = \"A version number with a major component.\";\n                    descriptionClass = \"noun\";\n                    emptyValue = { };\n                    functor = {\n                      binOp = &lt;function&gt;;\n                      name = \"strMatching \\\"^([[:digit:]]+)\\\\$\\\"\";\n                      payload = null;\n                      type = null;\n                      wrapped = null;\n                    };\n                    getSubModules = null;\n                    getSubOptions = &lt;function&gt;;\n                    merge = &lt;function&gt;;\n                    name = \"majorVersion\";\n                    nestedTypes = { };\n                    substSubModules = &lt;function&gt;;\n                    typeMerge = &lt;function&gt;;\n                  };\n                };\n                gccMaxMajorVersion = {\n                  _type = \"option\";\n                  description = \"Maximum GCC major version to support this CUDA version\";\n                  type = {\n                    _type = \"option-type\";\n                    check = &lt;function&gt;;\n                    deprecationMessage = null;\n                    description = \"A version number with a major component.\";\n                    descriptionClass = \"noun\";\n                    emptyValue = { };\n                    functor = {\n                      binOp = &lt;function&gt;;\n                      name = \"strMatching \\\"^([[:digit:]]+)\\\\$\\\"\";\n                      payload = null;\n                      type = null;\n                      wrapped = null;\n                    };\n                    getSubModules = null;\n                    getSubOptions = &lt;function&gt;;\n                    merge = &lt;function&gt;;\n                    name = \"majorVersion\";\n                    nestedTypes = { };\n                    substSubModules = &lt;function&gt;;\n                    typeMerge = &lt;function&gt;;\n                  };\n                };\n                gccMinMajorVersion = {\n                  _type = \"option\";\n                  description = \"Minimum GCC major version to support this CUDA version\";\n                  type = {\n                    _type = \"option-type\";\n                    check = &lt;function&gt;;\n                    deprecationMessage = null;\n                    description = \"A version number with a major component.\";\n                    descriptionClass = \"noun\";\n                    emptyValue = { };\n                    functor = {\n                      binOp = &lt;function&gt;;\n                      name = \"strMatching \\\"^([[:digit:]]+)\\\\$\\\"\";\n                      payload = null;\n                      type = null;\n                      wrapped = null;\n                    };\n                    getSubModules = null;\n                    getSubOptions = &lt;function&gt;;\n                    merge = &lt;function&gt;;\n                    name = \"majorVersion\";\n                    nestedTypes = { };\n                    substSubModules = &lt;function&gt;;\n                    typeMerge = &lt;function&gt;;\n                  };\n                };\n              };\n            }\n          ];\n          shorthandOnlyDefinesConfig = false;\n          specialArgs = { };\n        };\n        type = &lt;function, args: {class?, description?, modules, shorthandOnlyDefinesConfig?, specialArgs?}&gt;;\n        wrapped = null;\n      };\n      getSubModules = [\n        {\n          options = {\n            clangMaxMajorVersion = {\n              _type = \"option\";\n              description = \"Maximum Clang major version to support this CUDA version\";\n              type = {\n                _type = \"option-type\";\n                check = &lt;function&gt;;\n                deprecationMessage = null;\n                description = \"A version number with a major component.\";\n                descriptionClass = \"noun\";\n                emptyValue = { };\n                functor = {\n                  binOp = &lt;function&gt;;\n                  name = \"strMatching \\\"^([[:digit:]]+)\\\\$\\\"\";\n                  payload = null;\n                  type = null;\n                  wrapped = null;\n                };\n                getSubModules = null;\n                getSubOptions = &lt;function&gt;;\n                merge = &lt;function&gt;;\n                name = \"majorVersion\";\n                nestedTypes = { };\n                substSubModules = &lt;function&gt;;\n                typeMerge = &lt;function&gt;;\n              };\n            };\n            clangMinMajorVersion = {\n              _type = \"option\";\n              description = \"Minimum Clang major version to support this CUDA version\";\n              type = {\n                _type = \"option-type\";\n                check = &lt;function&gt;;\n                deprecationMessage = null;\n                description = \"A version number with a major component.\";\n                descriptionClass = \"noun\";\n                emptyValue = { };\n                functor = {\n                  binOp = &lt;function&gt;;\n                  name = \"strMatching \\\"^([[:digit:]]+)\\\\$\\\"\";\n                  payload = null;\n                  type = null;\n                  wrapped = null;\n                };\n                getSubModules = null;\n                getSubOptions = &lt;function&gt;;\n                merge = &lt;function&gt;;\n                name = \"majorVersion\";\n                nestedTypes = { };\n                substSubModules = &lt;function&gt;;\n                typeMerge = &lt;function&gt;;\n              };\n            };\n            gccMaxMajorVersion = {\n              _type = \"option\";\n              description = \"Maximum GCC major version to support this CUDA version\";\n              type = {\n                _type = \"option-type\";\n                check = &lt;function&gt;;\n                deprecationMessage = null;\n                description = \"A version number with a major component.\";\n                descriptionClass = \"noun\";\n                emptyValue = { };\n                functor = {\n                  binOp = &lt;function&gt;;\n                  name = \"strMatching \\\"^([[:digit:]]+)\\\\$\\\"\";\n                  payload = null;\n                  type = null;\n                  wrapped = null;\n                };\n                getSubModules = null;\n                getSubOptions = &lt;function&gt;;\n                merge = &lt;function&gt;;\n                name = \"majorVersion\";\n                nestedTypes = { };\n                substSubModules = &lt;function&gt;;\n                typeMerge = &lt;function&gt;;\n              };\n            };\n            gccMinMajorVersion = {\n              _type = \"option\";\n              description = \"Minimum GCC major version to support this CUDA version\";\n              type = {\n                _type = \"option-type\";\n                check = &lt;function&gt;;\n                deprecationMessage = null;\n                description = \"A version number with a major component.\";\n                descriptionClass = \"noun\";\n                emptyValue = { };\n                functor = {\n                  binOp = &lt;function&gt;;\n                  name = \"strMatching \\\"^([[:digit:]]+)\\\\$\\\"\";\n                  payload = null;\n                  type = null;\n                  wrapped = null;\n                };\n                getSubModules = null;\n                getSubOptions = &lt;function&gt;;\n                merge = &lt;function&gt;;\n                name = \"majorVersion\";\n                nestedTypes = { };\n                substSubModules = &lt;function&gt;;\n                typeMerge = &lt;function&gt;;\n              };\n            };\n          };\n        }\n      ];\n      getSubOptions = &lt;function&gt;;\n      merge = &lt;function&gt;;\n      name = \"submodule\";\n      nestedTypes = { };\n      substSubModules = &lt;function&gt;;\n      typeMerge = &lt;function&gt;;\n    };\n  };\n  substSubModules = &lt;function&gt;;\n  typeMerge = &lt;function&gt;;\n}\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/generic/data/nvcc-compatibilities</p>","text":""},{"location":"#generictypesnvcccompatibility","title":"generic.types.nvccCompatibility <p>Compatibility of an instance of NVCC with GCC and Clang</p> <p>Type: optionType</p> <p>Default:</p> <pre><code>{\n  _type = \"option-type\";\n  check = &lt;function&gt;;\n  deprecationMessage = null;\n  description = \"submodule\";\n  descriptionClass = null;\n  emptyValue = {\n    value = { };\n  };\n  functor = {\n    binOp = &lt;function&gt;;\n    name = \"submodule\";\n    payload = {\n      class = null;\n      description = null;\n      modules = [\n        {\n          options = {\n            clangMaxMajorVersion = {\n              _type = \"option\";\n              description = \"Maximum Clang major version to support this CUDA version\";\n              type = {\n                _type = \"option-type\";\n                check = &lt;function&gt;;\n                deprecationMessage = null;\n                description = \"A version number with a major component.\";\n                descriptionClass = \"noun\";\n                emptyValue = { };\n                functor = {\n                  binOp = &lt;function&gt;;\n                  name = \"strMatching \\\"^([[:digit:]]+)\\\\$\\\"\";\n                  payload = null;\n                  type = null;\n                  wrapped = null;\n                };\n                getSubModules = null;\n                getSubOptions = &lt;function&gt;;\n                merge = &lt;function&gt;;\n                name = \"majorVersion\";\n                nestedTypes = { };\n                substSubModules = &lt;function&gt;;\n                typeMerge = &lt;function&gt;;\n              };\n            };\n            clangMinMajorVersion = {\n              _type = \"option\";\n              description = \"Minimum Clang major version to support this CUDA version\";\n              type = {\n                _type = \"option-type\";\n                check = &lt;function&gt;;\n                deprecationMessage = null;\n                description = \"A version number with a major component.\";\n                descriptionClass = \"noun\";\n                emptyValue = { };\n                functor = {\n                  binOp = &lt;function&gt;;\n                  name = \"strMatching \\\"^([[:digit:]]+)\\\\$\\\"\";\n                  payload = null;\n                  type = null;\n                  wrapped = null;\n                };\n                getSubModules = null;\n                getSubOptions = &lt;function&gt;;\n                merge = &lt;function&gt;;\n                name = \"majorVersion\";\n                nestedTypes = { };\n                substSubModules = &lt;function&gt;;\n                typeMerge = &lt;function&gt;;\n              };\n            };\n            gccMaxMajorVersion = {\n              _type = \"option\";\n              description = \"Maximum GCC major version to support this CUDA version\";\n              type = {\n                _type = \"option-type\";\n                check = &lt;function&gt;;\n                deprecationMessage = null;\n                description = \"A version number with a major component.\";\n                descriptionClass = \"noun\";\n                emptyValue = { };\n                functor = {\n                  binOp = &lt;function&gt;;\n                  name = \"strMatching \\\"^([[:digit:]]+)\\\\$\\\"\";\n                  payload = null;\n                  type = null;\n                  wrapped = null;\n                };\n                getSubModules = null;\n                getSubOptions = &lt;function&gt;;\n                merge = &lt;function&gt;;\n                name = \"majorVersion\";\n                nestedTypes = { };\n                substSubModules = &lt;function&gt;;\n                typeMerge = &lt;function&gt;;\n              };\n            };\n            gccMinMajorVersion = {\n              _type = \"option\";\n              description = \"Minimum GCC major version to support this CUDA version\";\n              type = {\n                _type = \"option-type\";\n                check = &lt;function&gt;;\n                deprecationMessage = null;\n                description = \"A version number with a major component.\";\n                descriptionClass = \"noun\";\n                emptyValue = { };\n                functor = {\n                  binOp = &lt;function&gt;;\n                  name = \"strMatching \\\"^([[:digit:]]+)\\\\$\\\"\";\n                  payload = null;\n                  type = null;\n                  wrapped = null;\n                };\n                getSubModules = null;\n                getSubOptions = &lt;function&gt;;\n                merge = &lt;function&gt;;\n                name = \"majorVersion\";\n                nestedTypes = { };\n                substSubModules = &lt;function&gt;;\n                typeMerge = &lt;function&gt;;\n              };\n            };\n          };\n        }\n      ];\n      shorthandOnlyDefinesConfig = false;\n      specialArgs = { };\n    };\n    type = &lt;function, args: {class?, description?, modules, shorthandOnlyDefinesConfig?, specialArgs?}&gt;;\n    wrapped = null;\n  };\n  getSubModules = [\n    {\n      options = {\n        clangMaxMajorVersion = {\n          _type = \"option\";\n          description = \"Maximum Clang major version to support this CUDA version\";\n          type = {\n            _type = \"option-type\";\n            check = &lt;function&gt;;\n            deprecationMessage = null;\n            description = \"A version number with a major component.\";\n            descriptionClass = \"noun\";\n            emptyValue = { };\n            functor = {\n              binOp = &lt;function&gt;;\n              name = \"strMatching \\\"^([[:digit:]]+)\\\\$\\\"\";\n              payload = null;\n              type = null;\n              wrapped = null;\n            };\n            getSubModules = null;\n            getSubOptions = &lt;function&gt;;\n            merge = &lt;function&gt;;\n            name = \"majorVersion\";\n            nestedTypes = { };\n            substSubModules = &lt;function&gt;;\n            typeMerge = &lt;function&gt;;\n          };\n        };\n        clangMinMajorVersion = {\n          _type = \"option\";\n          description = \"Minimum Clang major version to support this CUDA version\";\n          type = {\n            _type = \"option-type\";\n            check = &lt;function&gt;;\n            deprecationMessage = null;\n            description = \"A version number with a major component.\";\n            descriptionClass = \"noun\";\n            emptyValue = { };\n            functor = {\n              binOp = &lt;function&gt;;\n              name = \"strMatching \\\"^([[:digit:]]+)\\\\$\\\"\";\n              payload = null;\n              type = null;\n              wrapped = null;\n            };\n            getSubModules = null;\n            getSubOptions = &lt;function&gt;;\n            merge = &lt;function&gt;;\n            name = \"majorVersion\";\n            nestedTypes = { };\n            substSubModules = &lt;function&gt;;\n            typeMerge = &lt;function&gt;;\n          };\n        };\n        gccMaxMajorVersion = {\n          _type = \"option\";\n          description = \"Maximum GCC major version to support this CUDA version\";\n          type = {\n            _type = \"option-type\";\n            check = &lt;function&gt;;\n            deprecationMessage = null;\n            description = \"A version number with a major component.\";\n            descriptionClass = \"noun\";\n            emptyValue = { };\n            functor = {\n              binOp = &lt;function&gt;;\n              name = \"strMatching \\\"^([[:digit:]]+)\\\\$\\\"\";\n              payload = null;\n              type = null;\n              wrapped = null;\n            };\n            getSubModules = null;\n            getSubOptions = &lt;function&gt;;\n            merge = &lt;function&gt;;\n            name = \"majorVersion\";\n            nestedTypes = { };\n            substSubModules = &lt;function&gt;;\n            typeMerge = &lt;function&gt;;\n          };\n        };\n        gccMinMajorVersion = {\n          _type = \"option\";\n          description = \"Minimum GCC major version to support this CUDA version\";\n          type = {\n            _type = \"option-type\";\n            check = &lt;function&gt;;\n            deprecationMessage = null;\n            description = \"A version number with a major component.\";\n            descriptionClass = \"noun\";\n            emptyValue = { };\n            functor = {\n              binOp = &lt;function&gt;;\n              name = \"strMatching \\\"^([[:digit:]]+)\\\\$\\\"\";\n              payload = null;\n              type = null;\n              wrapped = null;\n            };\n            getSubModules = null;\n            getSubOptions = &lt;function&gt;;\n            merge = &lt;function&gt;;\n            name = \"majorVersion\";\n            nestedTypes = { };\n            substSubModules = &lt;function&gt;;\n            typeMerge = &lt;function&gt;;\n          };\n        };\n      };\n    }\n  ];\n  getSubOptions = &lt;function&gt;;\n  merge = &lt;function&gt;;\n  name = \"submodule\";\n  nestedTypes = { };\n  substSubModules = &lt;function&gt;;\n  typeMerge = &lt;function&gt;;\n}\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/generic/data/nvcc-compatibilities</p>","text":""},{"location":"#generictypesvirtualcudaarch","title":"generic.types.virtualCudaArch <p>A virtual CUDA architecture name.</p> <p>Type: optionType</p> <p>Default:</p> <pre><code>{\n  _type = \"option-type\";\n  check = &lt;function&gt;;\n  deprecationMessage = null;\n  description = \"A virtual CUDA architecture name.\";\n  descriptionClass = \"noun\";\n  emptyValue = { };\n  functor = {\n    binOp = &lt;function&gt;;\n    name = \"strMatching \\\"^compute_[[:digit:]]+[a-z]?\\\\$\\\"\";\n    payload = null;\n    type = null;\n    wrapped = null;\n  };\n  getSubModules = null;\n  getSubOptions = &lt;function&gt;;\n  merge = &lt;function&gt;;\n  name = \"virtualCudaArch\";\n  nestedTypes = { };\n  substSubModules = &lt;function&gt;;\n  typeMerge = &lt;function&gt;;\n}\n</code></pre> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/generic/types.nix</p>","text":""},{"location":"#genericutils","title":"generic.utils <p>A set of utility functions used in building cudaPackages.</p> <p>Type: anything</p> <p>Default: <code>{ }</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/generic</p>","text":""},{"location":"#genericutilsmkversionedpackagename","title":"generic.utils.mkVersionedPackageName <p>A function to generate a versioned package name</p> <p>Type: function that evaluates to a(n) function that evaluates to a(n) string</p> <p>Default: <code>&lt;function&gt;</code></p> <p>Declared by:  - /nix/store/qbcb5y4gv6lw4mr9dap8f1whh7y0dw6h-source/cuda-modules/generic/utils.nix</p>","text":""}]}